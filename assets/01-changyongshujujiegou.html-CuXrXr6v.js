import{_ as e,c as t,d as l,e as s,f as a,b as c,w as o,r as i,o as u}from"./app-I6OnLCmc.js";const k={};function r(d,n){const p=i("RouteLink");return u(),t("div",null,[n[3]||(n[3]=l(`<h1 id="常用数据结构" tabindex="-1"><a class="header-anchor" href="#常用数据结构"><span>常用数据结构</span></a></h1><blockquote><p>掌握Python中的常用数据结构及其应用</p></blockquote><h2 id="📚-学习目标" tabindex="-1"><a class="header-anchor" href="#📚-学习目标"><span>📚 学习目标</span></a></h2><ul><li>理解栈、队列、链表等基本数据结构</li><li>掌握各种数据结构的实现</li><li>学会选择合适的数据结构</li><li>理解时间复杂度和空间复杂度</li></ul><h2 id="_1-栈-stack" tabindex="-1"><a class="header-anchor" href="#_1-栈-stack"><span>1. 栈（Stack）</span></a></h2><h3 id="_1-1-栈的实现" tabindex="-1"><a class="header-anchor" href="#_1-1-栈的实现"><span>1.1 栈的实现</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;栈 - 后进先出（LIFO）&quot;&quot;&quot;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;入栈&quot;&quot;&quot;</span></span>
<span class="line">        self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;出栈&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string">&#39;栈为空&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">peek</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;查看栈顶元素&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> self<span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;检查栈是否为空&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;返回栈的大小&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>items<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用</span></span>
<span class="line">stack <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>peek<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-栈的应用" tabindex="-1"><a class="header-anchor" href="#_1-2-栈的应用"><span>1.2 栈的应用</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 括号匹配</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">is_valid_parentheses</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;检查括号是否匹配&quot;&quot;&quot;</span></span>
<span class="line">    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    pairs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> char <span class="token keyword">in</span> s<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> char <span class="token keyword">in</span> pairs<span class="token punctuation">:</span></span>
<span class="line">            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>char<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">elif</span> char <span class="token keyword">in</span> pairs<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token keyword">not</span> stack <span class="token keyword">or</span> pairs<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> char<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token boolean">False</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>is_valid_parentheses<span class="token punctuation">(</span><span class="token string">&#39;()[]{}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>is_valid_parentheses<span class="token punctuation">(</span><span class="token string">&#39;([)]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># False</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 逆波兰表达式求值</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">eval_rpn</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;逆波兰表达式求值&quot;&quot;&quot;</span></span>
<span class="line">    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    operators <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> token <span class="token keyword">in</span> tokens<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> token <span class="token keyword">in</span> operators<span class="token punctuation">:</span></span>
<span class="line">            b <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            a <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> token <span class="token operator">==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">:</span></span>
<span class="line">                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">elif</span> token <span class="token operator">==</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">:</span></span>
<span class="line">                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">elif</span> token <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">:</span></span>
<span class="line">                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>eval_rpn<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-队列-queue" tabindex="-1"><a class="header-anchor" href="#_2-队列-queue"><span>2. 队列（Queue）</span></a></h2><h3 id="_2-1-队列的实现" tabindex="-1"><a class="header-anchor" href="#_2-1-队列的实现"><span>2.1 队列的实现</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;队列 - 先进先出（FIFO）&quot;&quot;&quot;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;入队&quot;&quot;&quot;</span></span>
<span class="line">        self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">dequeue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;出队&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string">&#39;队列为空&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>items<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用</span></span>
<span class="line">queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">queue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">queue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-使用-collections-deque" tabindex="-1"><a class="header-anchor" href="#_2-2-使用-collections-deque"><span>2.2 使用 collections.deque</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 双端队列（更高效）</span></span>
<span class="line">queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 队列操作</span></span>
<span class="line">queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 右侧入队</span></span>
<span class="line">queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 左侧出队</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 栈操作</span></span>
<span class="line">queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 入栈</span></span>
<span class="line">queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 出栈</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-循环队列" tabindex="-1"><a class="header-anchor" href="#_2-3-循环队列"><span>2.3 循环队列</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">CircularQueue</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;循环队列&quot;&quot;&quot;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity</span>
<span class="line">        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> capacity</span>
<span class="line">        self<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        self<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_full<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string">&#39;队列已满&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>self<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> item</span>
<span class="line">        self<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>capacity</span>
<span class="line">        self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">dequeue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string">&#39;队列为空&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        item <span class="token operator">=</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>self<span class="token punctuation">.</span>front<span class="token punctuation">]</span></span>
<span class="line">        self<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>capacity</span>
<span class="line">        self<span class="token punctuation">.</span>size <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token keyword">return</span> item</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">is_full</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>size <span class="token operator">==</span> self<span class="token punctuation">.</span>capacity</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用</span></span>
<span class="line">cq <span class="token operator">=</span> CircularQueue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    cq<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-链表-linked-list" tabindex="-1"><a class="header-anchor" href="#_3-链表-linked-list"><span>3. 链表（Linked List）</span></a></h2><h3 id="_3-1-单链表" tabindex="-1"><a class="header-anchor" href="#_3-1-单链表"><span>3.1 单链表</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;链表节点&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data</span>
<span class="line">        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;单链表&quot;&quot;&quot;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;在末尾添加节点&quot;&quot;&quot;</span></span>
<span class="line">        new_node <span class="token operator">=</span> Node<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>head<span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>head <span class="token operator">=</span> new_node</span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        </span>
<span class="line">        current <span class="token operator">=</span> self<span class="token punctuation">.</span>head</span>
<span class="line">        <span class="token keyword">while</span> current<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span></span>
<span class="line">            current <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">        current<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> new_node</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> position<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;在指定位置插入节点&quot;&quot;&quot;</span></span>
<span class="line">        new_node <span class="token operator">=</span> Node<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> position <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">            new_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>head</span>
<span class="line">            self<span class="token punctuation">.</span>head <span class="token operator">=</span> new_node</span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        </span>
<span class="line">        current <span class="token operator">=</span> self<span class="token punctuation">.</span>head</span>
<span class="line">        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token keyword">not</span> current<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">raise</span> IndexError<span class="token punctuation">(</span><span class="token string">&#39;位置超出范围&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            current <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">        </span>
<span class="line">        new_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">        current<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> new_node</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;删除指定值的节点&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>head<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>head <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        </span>
<span class="line">        current <span class="token operator">=</span> self<span class="token punctuation">.</span>head</span>
<span class="line">        <span class="token keyword">while</span> current<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> current<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">:</span></span>
<span class="line">                current<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">                <span class="token keyword">return</span></span>
<span class="line">            current <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;显示链表&quot;&quot;&quot;</span></span>
<span class="line">        elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        current <span class="token operator">=</span> self<span class="token punctuation">.</span>head</span>
<span class="line">        <span class="token keyword">while</span> current<span class="token punctuation">:</span></span>
<span class="line">            elements<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">            current <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39; -&gt; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用</span></span>
<span class="line">ll <span class="token operator">=</span> LinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">ll<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 1 -&gt; 2 -&gt; 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-双向链表" tabindex="-1"><a class="header-anchor" href="#_3-2-双向链表"><span>3.2 双向链表</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">DNode</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;双向链表节点&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data</span>
<span class="line">        self<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">DoublyLinkedList</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;双向链表&quot;&quot;&quot;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;在末尾添加节点&quot;&quot;&quot;</span></span>
<span class="line">        new_node <span class="token operator">=</span> DNode<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>head<span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>head <span class="token operator">=</span> self<span class="token punctuation">.</span>tail <span class="token operator">=</span> new_node</span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        </span>
<span class="line">        new_node<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>tail</span>
<span class="line">        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> new_node</span>
<span class="line">        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> new_node</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">display_forward</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;正向显示&quot;&quot;&quot;</span></span>
<span class="line">        elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        current <span class="token operator">=</span> self<span class="token punctuation">.</span>head</span>
<span class="line">        <span class="token keyword">while</span> current<span class="token punctuation">:</span></span>
<span class="line">            elements<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">            current <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39; &lt;-&gt; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">display_backward</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;反向显示&quot;&quot;&quot;</span></span>
<span class="line">        elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        current <span class="token operator">=</span> self<span class="token punctuation">.</span>tail</span>
<span class="line">        <span class="token keyword">while</span> current<span class="token punctuation">:</span></span>
<span class="line">            elements<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">            current <span class="token operator">=</span> current<span class="token punctuation">.</span>prev</span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39; &lt;-&gt; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用</span></span>
<span class="line">dll <span class="token operator">=</span> DoublyLinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">dll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">dll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">dll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">dll<span class="token punctuation">.</span>display_forward<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 1 &lt;-&gt; 2 &lt;-&gt; 3</span></span>
<span class="line">dll<span class="token punctuation">.</span>display_backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 3 &lt;-&gt; 2 &lt;-&gt; 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-哈希表-hash-table" tabindex="-1"><a class="header-anchor" href="#_4-哈希表-hash-table"><span>4. 哈希表（Hash Table）</span></a></h2><h3 id="_4-1-简单哈希表实现" tabindex="-1"><a class="header-anchor" href="#_4-1-简单哈希表实现"><span>4.1 简单哈希表实现</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">HashTable</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;简单哈希表&quot;&quot;&quot;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>size <span class="token operator">=</span> size</span>
<span class="line">        self<span class="token punctuation">.</span>table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_hash</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;哈希函数&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>size</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;设置键值对&quot;&quot;&quot;</span></span>
<span class="line">        index <span class="token operator">=</span> self<span class="token punctuation">.</span>_hash<span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 检查是否已存在</span></span>
<span class="line">        <span class="token keyword">for</span> item <span class="token keyword">in</span> self<span class="token punctuation">.</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">:</span></span>
<span class="line">                item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value</span>
<span class="line">                <span class="token keyword">return</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 添加新键值对</span></span>
<span class="line">        self<span class="token punctuation">.</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;获取值&quot;&quot;&quot;</span></span>
<span class="line">        index <span class="token operator">=</span> self<span class="token punctuation">.</span>_hash<span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">for</span> item <span class="token keyword">in</span> self<span class="token punctuation">.</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">raise</span> KeyError<span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;删除键值对&quot;&quot;&quot;</span></span>
<span class="line">        index <span class="token operator">=</span> self<span class="token punctuation">.</span>_hash<span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">del</span> self<span class="token punctuation">.</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">                <span class="token keyword">return</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">raise</span> KeyError<span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用</span></span>
<span class="line">ht <span class="token operator">=</span> HashTable<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">ht<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">)</span></span>
<span class="line">ht<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>ht<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Alice</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-树-tree" tabindex="-1"><a class="header-anchor" href="#_5-树-tree"><span>5. 树（Tree）</span></a></h2><h3 id="_5-1-二叉树" tabindex="-1"><a class="header-anchor" href="#_5-1-二叉树"><span>5.1 二叉树</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;二叉树节点&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val</span>
<span class="line">        self<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">        self<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;二叉树&quot;&quot;&quot;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>root <span class="token operator">=</span> root</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;前序遍历：根-左-右&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">            self<span class="token punctuation">.</span>preorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">            self<span class="token punctuation">.</span>preorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;中序遍历：左-根-右&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">            self<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">postorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;后序遍历：左-右-根&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>postorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">            self<span class="token punctuation">.</span>postorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">level_order</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;层序遍历&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>root<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">from</span> collections <span class="token keyword">import</span> deque</span>
<span class="line">        queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">while</span> queue<span class="token punctuation">:</span></span>
<span class="line">            node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span></span>
<span class="line">                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span></span>
<span class="line">                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 构建二叉树</span></span>
<span class="line">root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">root<span class="token punctuation">.</span>left <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">root<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">tree <span class="token operator">=</span> BinaryTree<span class="token punctuation">(</span>root<span class="token punctuation">)</span></span>
<span class="line">tree<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment"># 4 2 5 1 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-二叉搜索树" tabindex="-1"><a class="header-anchor" href="#_5-2-二叉搜索树"><span>5.2 二叉搜索树</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">BST</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;二叉搜索树&quot;&quot;&quot;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;插入节点&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>root<span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>_insert_recursive<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> val<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_insert_recursive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> val <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>val<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span></span>
<span class="line">                self<span class="token punctuation">.</span>_insert_recursive<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">                node<span class="token punctuation">.</span>left <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span></span>
<span class="line">                self<span class="token punctuation">.</span>_insert_recursive<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">                node<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;搜索节点&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_search_recursive<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> val<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_search_recursive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> node<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">False</span></span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">True</span></span>
<span class="line">        <span class="token keyword">elif</span> val <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>val<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_search_recursive<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_search_recursive<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用</span></span>
<span class="line">bst <span class="token operator">=</span> BST<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> val <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">    bst<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>val<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>bst<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-堆-heap" tabindex="-1"><a class="header-anchor" href="#_6-堆-heap"><span>6. 堆（Heap）</span></a></h2><h3 id="_6-1-使用-heapq-模块" tabindex="-1"><a class="header-anchor" href="#_6-1-使用-heapq-模块"><span>6.1 使用 heapq 模块</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> heapq</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建最小堆</span></span>
<span class="line">heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1（最小值）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 堆排序</span></span>
<span class="line">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></span>
<span class="line">heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>  <span class="token comment"># 原地转换为堆</span></span>
<span class="line">sorted_nums <span class="token operator">=</span> <span class="token punctuation">[</span>heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sorted_nums<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 获取最大/最小的 n 个元素</span></span>
<span class="line">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>heapq<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># [9, 6, 5]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>heapq<span class="token punctuation">.</span>nsmallest<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [1, 1, 2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📝-练习题" tabindex="-1"><a class="header-anchor" href="#📝-练习题"><span>📝 练习题</span></a></h2><ol><li>实现一个最小栈（支持O(1)时间获取最小值）</li><li>用栈实现队列</li><li>反转链表</li><li>判断链表是否有环</li></ol><hr>`,35)),s("p",null,[n[1]||(n[1]=s("strong",null,"下一节：",-1)),n[2]||(n[2]=a()),c(p,{to:"/tutorials/python-ai/python/%E7%AC%AC04%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/02-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html"},{default:o(()=>[...n[0]||(n[0]=[a("排序算法",-1)])]),_:1})])])}const m=e(k,[["render",r]]),b=JSON.parse('{"path":"/tutorials/python-ai/python/di04zhang-shujujiegouyusuanfa/01-changyongshujujiegou.html","title":"常用数据结构","lang":"zh-CN","frontmatter":{"title":"常用数据结构"},"headers":[{"level":2,"title":"📚 学习目标","slug":"📚-学习目标","link":"#📚-学习目标","children":[]},{"level":2,"title":"1. 栈（Stack）","slug":"_1-栈-stack","link":"#_1-栈-stack","children":[{"level":3,"title":"1.1 栈的实现","slug":"_1-1-栈的实现","link":"#_1-1-栈的实现","children":[]},{"level":3,"title":"1.2 栈的应用","slug":"_1-2-栈的应用","link":"#_1-2-栈的应用","children":[]}]},{"level":2,"title":"2. 队列（Queue）","slug":"_2-队列-queue","link":"#_2-队列-queue","children":[{"level":3,"title":"2.1 队列的实现","slug":"_2-1-队列的实现","link":"#_2-1-队列的实现","children":[]},{"level":3,"title":"2.2 使用 collections.deque","slug":"_2-2-使用-collections-deque","link":"#_2-2-使用-collections-deque","children":[]},{"level":3,"title":"2.3 循环队列","slug":"_2-3-循环队列","link":"#_2-3-循环队列","children":[]}]},{"level":2,"title":"3. 链表（Linked List）","slug":"_3-链表-linked-list","link":"#_3-链表-linked-list","children":[{"level":3,"title":"3.1 单链表","slug":"_3-1-单链表","link":"#_3-1-单链表","children":[]},{"level":3,"title":"3.2 双向链表","slug":"_3-2-双向链表","link":"#_3-2-双向链表","children":[]}]},{"level":2,"title":"4. 哈希表（Hash Table）","slug":"_4-哈希表-hash-table","link":"#_4-哈希表-hash-table","children":[{"level":3,"title":"4.1 简单哈希表实现","slug":"_4-1-简单哈希表实现","link":"#_4-1-简单哈希表实现","children":[]}]},{"level":2,"title":"5. 树（Tree）","slug":"_5-树-tree","link":"#_5-树-tree","children":[{"level":3,"title":"5.1 二叉树","slug":"_5-1-二叉树","link":"#_5-1-二叉树","children":[]},{"level":3,"title":"5.2 二叉搜索树","slug":"_5-2-二叉搜索树","link":"#_5-2-二叉搜索树","children":[]}]},{"level":2,"title":"6. 堆（Heap）","slug":"_6-堆-heap","link":"#_6-堆-heap","children":[{"level":3,"title":"6.1 使用 heapq 模块","slug":"_6-1-使用-heapq-模块","link":"#_6-1-使用-heapq-模块","children":[]}]},{"level":2,"title":"📝 练习题","slug":"📝-练习题","link":"#📝-练习题","children":[]}],"git":{"createdTime":1761052725000,"updatedTime":1761052725000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/python-ai/python/第04章-数据结构与算法/01-常用数据结构.md"}');export{m as comp,b as data};
