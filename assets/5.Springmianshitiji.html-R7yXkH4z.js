import{_ as s,c as a,d as t,o as e}from"./app-QnWV-YHu.js";const p={};function l(i,n){return e(),a("div",null,[...n[0]||(n[0]=[t(`<h1 id="spring面试题集" tabindex="-1"><a class="header-anchor" href="#spring面试题集"><span>Spring面试题集</span></a></h1><h2 id="一、ioc和di" tabindex="-1"><a class="header-anchor" href="#一、ioc和di"><span>一、IoC和DI</span></a></h2><h3 id="_1-什么是spring-ioc" tabindex="-1"><a class="header-anchor" href="#_1-什么是spring-ioc"><span>1. 什么是Spring IoC？</span></a></h3><p><strong>答：</strong></p><p><strong>IoC（Inversion of Control）控制反转</strong>，是一种设计思想。</p><p><strong>传统方式：</strong> 程序员主动创建对象</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">UserService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>IoC方式：</strong> 由Spring容器创建和管理对象</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">UserService</span> service<span class="token punctuation">;</span> <span class="token comment">// Spring注入</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心思想：</strong> 将对象的创建权和控制权交给Spring容器管理。</p><p><strong>优势：</strong></p><ul><li>降低耦合度</li><li>易于测试和维护</li><li>提高代码复用性</li></ul><hr><h3 id="_2-什么是依赖注入-有哪些方式" tabindex="-1"><a class="header-anchor" href="#_2-什么是依赖注入-有哪些方式"><span>2. 什么是依赖注入？有哪些方式？</span></a></h3><p><strong>答：</strong></p><p><strong>DI（Dependency Injection）依赖注入</strong>，是IoC的一种实现方式。</p><p><strong>三种注入方式：</strong></p><p><strong>1. 构造器注入（推荐）</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优点：</strong> 依赖不可变、保证不为null、易于测试</p><p><strong>2. Setter注入</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 字段注入（不推荐）</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点：</strong> 无法注入final字段、难以测试、违反封装</p><hr><h3 id="_3-beanfactory和applicationcontext的区别" tabindex="-1"><a class="header-anchor" href="#_3-beanfactory和applicationcontext的区别"><span>3. BeanFactory和ApplicationContext的区别？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>功能</td><td>基础IoC容器</td><td>高级IoC容器</td></tr><tr><td>加载方式</td><td>延迟加载</td><td>立即加载</td></tr><tr><td>国际化</td><td>不支持</td><td>支持</td></tr><tr><td>事件发布</td><td>不支持</td><td>支持</td></tr><tr><td>AOP</td><td>手动配置</td><td>自动配置</td></tr><tr><td>使用场景</td><td>资源受限环境</td><td>企业级应用</td></tr></tbody></table><p><strong>推荐使用：</strong> ApplicationContext</p><p><strong>常用实现类：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// XML配置</span></span>
<span class="line"><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> </span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注解配置</span></span>
<span class="line"><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> </span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Web应用</span></span>
<span class="line"><span class="token comment">// 自动创建，在web.xml中配置ContextLoaderListener</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-autowired和-resource的区别" tabindex="-1"><a class="header-anchor" href="#_4-autowired和-resource的区别"><span>4. @Autowired和@Resource的区别？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>@Autowired</th><th>@Resource</th></tr></thead><tbody><tr><td>来源</td><td>Spring</td><td>JDK (JSR-250)</td></tr><tr><td>装配方式</td><td>按类型</td><td>按名称</td></tr><tr><td>支持范围</td><td>字段、构造器、方法</td><td>字段、Setter</td></tr><tr><td>必需性</td><td>required属性</td><td>无</td></tr><tr><td>配合使用</td><td>@Qualifier</td><td>name属性</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// @Autowired - 按类型</span></span>
<span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;userDaoImpl&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// @Resource - 按名称</span></span>
<span class="line"><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;userDaoImpl&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>推荐：</strong> 优先使用@Autowired（Spring标准）</p><hr><h2 id="二、bean管理" tabindex="-1"><a class="header-anchor" href="#二、bean管理"><span>二、Bean管理</span></a></h2><h3 id="_5-spring-bean的作用域有哪些" tabindex="-1"><a class="header-anchor" href="#_5-spring-bean的作用域有哪些"><span>5. Spring Bean的作用域有哪些？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>作用域</th><th>说明</th></tr></thead><tbody><tr><td><strong>singleton</strong></td><td>单例，容器中只有一个实例（默认）</td></tr><tr><td><strong>prototype</strong></td><td>原型，每次获取创建新实例</td></tr><tr><td><strong>request</strong></td><td>每个HTTP请求一个实例（Web）</td></tr><tr><td><strong>session</strong></td><td>每个HTTP会话一个实例（Web）</td></tr><tr><td><strong>application</strong></td><td>整个Web应用一个实例（Web）</td></tr></tbody></table><p><strong>配置：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;singleton&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 或 &quot;prototype&quot;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li>singleton是线程不安全的，避免使用成员变量</li><li>prototype每次都创建新对象，注意内存</li></ul><hr><h3 id="_6-spring-bean的生命周期" tabindex="-1"><a class="header-anchor" href="#_6-spring-bean的生命周期"><span>6. Spring Bean的生命周期？</span></a></h3><p><strong>答：</strong></p><p><strong>完整流程：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. 实例化Bean（调用构造器）</span>
<span class="line">2. 设置属性值（依赖注入）</span>
<span class="line">3. 调用BeanNameAware的setBeanName()</span>
<span class="line">4. 调用BeanFactoryAware的setBeanFactory()</span>
<span class="line">5. 调用ApplicationContextAware的setApplicationContext()</span>
<span class="line">6. 调用BeanPostProcessor的postProcessBeforeInitialization()</span>
<span class="line">7. 调用@PostConstruct方法</span>
<span class="line">8. 调用InitializingBean的afterPropertiesSet()</span>
<span class="line">9. 调用自定义init-method</span>
<span class="line">10. 调用BeanPostProcessor的postProcessAfterInitialization()</span>
<span class="line">11. Bean可以使用了</span>
<span class="line">12. 容器关闭</span>
<span class="line">13. 调用@PreDestroy方法</span>
<span class="line">14. 调用DisposableBean的destroy()</span>
<span class="line">15. 调用自定义destroy-method</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>简化版：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">实例化 → 属性赋值 → 初始化 → 使用 → 销毁</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1. 构造器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2. 属性赋值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@PostConstruct</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;3. 初始化&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@PreDestroy</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5. 销毁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7-spring如何解决循环依赖" tabindex="-1"><a class="header-anchor" href="#_7-spring如何解决循环依赖"><span>7. Spring如何解决循环依赖？</span></a></h3><p><strong>答：</strong></p><p><strong>循环依赖：</strong> A依赖B，B又依赖A。</p><p><strong>Spring的解决方案：三级缓存</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 一级缓存：完整的Bean</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 二级缓存：早期Bean（未完成初始化）</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 三级缓存：Bean工厂</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> singletonFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决过程：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. 创建A，放入三级缓存</span>
<span class="line">2. A需要注入B</span>
<span class="line">3. 创建B，放入三级缓存</span>
<span class="line">4. B需要注入A</span>
<span class="line">5. 从三级缓存获取A（早期引用）</span>
<span class="line">6. B创建完成，放入一级缓存</span>
<span class="line">7. A注入B</span>
<span class="line">8. A创建完成，放入一级缓存</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>限制：</strong></p><ul><li>只能解决单例Bean的循环依赖</li><li>构造器注入的循环依赖无法解决</li><li>原型Bean的循环依赖无法解决</li></ul><p><strong>解决构造器循环依赖：</strong></p><ul><li>使用@Lazy延迟注入</li><li>重新设计，避免循环依赖</li></ul><hr><h2 id="三、aop" tabindex="-1"><a class="header-anchor" href="#三、aop"><span>三、AOP</span></a></h2><h3 id="_8-什么是aop-aop的应用场景" tabindex="-1"><a class="header-anchor" href="#_8-什么是aop-aop的应用场景"><span>8. 什么是AOP？AOP的应用场景？</span></a></h3><p><strong>答：</strong></p><p><strong>AOP（Aspect Oriented Programming）面向切面编程。</strong></p><p><strong>核心思想：</strong> 将横切关注点从业务逻辑中分离。</p><p><strong>应用场景：</strong></p><ul><li>✅ 日志记录</li><li>✅ 权限检查</li><li>✅ 事务管理</li><li>✅ 性能监控</li><li>✅ 异常处理</li><li>✅ 缓存管理</li></ul><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Aspect</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.example.service.*.*(..))&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Object</span> result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_9-aop的核心概念" tabindex="-1"><a class="header-anchor" href="#_9-aop的核心概念"><span>9. AOP的核心概念？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td><strong>切面（Aspect）</strong></td><td>横切关注点的模块化</td></tr><tr><td><strong>连接点（Join Point）</strong></td><td>可以被拦截的点</td></tr><tr><td><strong>切点（Pointcut）</strong></td><td>要拦截哪些连接点</td></tr><tr><td><strong>通知（Advice）</strong></td><td>在切点执行的操作</td></tr><tr><td><strong>目标对象（Target）</strong></td><td>被代理的对象</td></tr><tr><td><strong>代理（Proxy）</strong></td><td>AOP创建的代理对象</td></tr><tr><td><strong>织入（Weaving）</strong></td><td>将切面应用到目标对象</td></tr></tbody></table><p><strong>关系：</strong> 切面 = 切点 + 通知</p><hr><h3 id="_10-aop的实现方式" tabindex="-1"><a class="header-anchor" href="#_10-aop的实现方式"><span>10. AOP的实现方式？</span></a></h3><p><strong>答：</strong></p><p><strong>1. JDK动态代理</strong></p><ul><li>基于接口</li><li>目标对象必须实现接口</li><li>代理对象和目标对象实现相同接口</li></ul><p><strong>2. CGLIB代理</strong></p><ul><li>基于继承</li><li>不需要实现接口</li><li>代理对象是目标对象的子类</li><li>不能代理final类和final方法</li></ul><p><strong>Spring的选择：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">有接口 → JDK动态代理</span>
<span class="line">无接口 → CGLIB代理</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>强制使用CGLIB：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="_11-通知的类型和执行顺序" tabindex="-1"><a class="header-anchor" href="#_11-通知的类型和执行顺序"><span>11. 通知的类型和执行顺序？</span></a></h3><p><strong>答：</strong></p><p><strong>通知类型：</strong></p><ul><li>@Before：前置通知</li><li>@After：后置通知</li><li>@AfterReturning：返回通知</li><li>@AfterThrowing：异常通知</li><li>@Around：环绕通知</li></ul><p><strong>执行顺序：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">正常流程：</span>
<span class="line">@Around前置 → @Before → 目标方法 → @AfterReturning → @After → @Around后置</span>
<span class="line"></span>
<span class="line">异常流程：</span>
<span class="line">@Around前置 → @Before → 目标方法 → @AfterThrowing → @After</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Aspect</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.example.service.*.*(..))&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;前置通知&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.example.service.*.*(..))&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;后置通知&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">&quot;execution(...)&quot;</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">&quot;result&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;返回通知: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">&quot;execution(...)&quot;</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">&quot;ex&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异常通知: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.example.service.*.*(..))&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;环绕前置&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Object</span> result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;环绕后置&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、事务管理" tabindex="-1"><a class="header-anchor" href="#四、事务管理"><span>四、事务管理</span></a></h2><h3 id="_12-spring事务的实现方式" tabindex="-1"><a class="header-anchor" href="#_12-spring事务的实现方式"><span>12. Spring事务的实现方式？</span></a></h3><p><strong>答：</strong></p><p><strong>1. 编程式事务</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>status <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 业务操作</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点：</strong> 代码侵入性强</p><p><strong>2. 声明式事务（推荐）</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transactional</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 业务操作</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优点：</strong> 代码简洁，业务逻辑和事务管理分离</p><hr><h3 id="_13-transactional的属性" tabindex="-1"><a class="header-anchor" href="#_13-transactional的属性"><span>13. @Transactional的属性？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><strong>propagation</strong></td><td>事务传播行为</td></tr><tr><td><strong>isolation</strong></td><td>事务隔离级别</td></tr><tr><td><strong>timeout</strong></td><td>超时时间（秒）</td></tr><tr><td><strong>readOnly</strong></td><td>是否只读</td></tr><tr><td><strong>rollbackFor</strong></td><td>回滚的异常类型</td></tr><tr><td><strong>noRollbackFor</strong></td><td>不回滚的异常类型</td></tr></tbody></table><p><strong>完整示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span></span>
<span class="line">    propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">,</span></span>
<span class="line">    isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span><span class="token constant">READ_COMMITTED</span><span class="token punctuation">,</span></span>
<span class="line">    timeout <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    readOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 业务操作</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_14-事务的传播行为有哪些" tabindex="-1"><a class="header-anchor" href="#_14-事务的传播行为有哪些"><span>14. 事务的传播行为有哪些？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>传播行为</th><th>说明</th></tr></thead><tbody><tr><td><strong>REQUIRED</strong></td><td>有事务就加入，没有就创建（默认）</td></tr><tr><td><strong>REQUIRES_NEW</strong></td><td>总是创建新事务，挂起当前事务</td></tr><tr><td><strong>SUPPORTS</strong></td><td>有事务就加入，没有就非事务执行</td></tr><tr><td><strong>NOT_SUPPORTED</strong></td><td>非事务执行，挂起当前事务</td></tr><tr><td><strong>MANDATORY</strong></td><td>必须在事务中执行，否则抛异常</td></tr><tr><td><strong>NEVER</strong></td><td>非事务执行，有事务就抛异常</td></tr><tr><td><strong>NESTED</strong></td><td>嵌套事务</td></tr></tbody></table><p><strong>常用场景：</strong></p><p><strong>REQUIRED（最常用）：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 加入当前事务或创建新事务</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>REQUIRES_NEW：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 日志记录使用独立事务</span></span>
<span class="line"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 独立事务，不受外层事务影响</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_15-事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#_15-事务的隔离级别"><span>15. 事务的隔离级别？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ_UNCOMMITTED</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>READ_COMMITTED</td><td>×</td><td>✓</td><td>✓</td></tr><tr><td>REPEATABLE_READ</td><td>×</td><td>×</td><td>✓</td></tr><tr><td>SERIALIZABLE</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p><strong>并发问题：</strong></p><ul><li><strong>脏读：</strong> 读到未提交的数据</li><li><strong>不可重复读：</strong> 同一事务多次读取数据不一致</li><li><strong>幻读：</strong> 同一事务多次查询记录数不一致</li></ul><p><strong>MySQL默认：</strong> REPEATABLE_READ</p><p><strong>使用：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span><span class="token constant">READ_COMMITTED</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 读已提交</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_16-事务失效的场景" tabindex="-1"><a class="header-anchor" href="#_16-事务失效的场景"><span>16. 事务失效的场景？</span></a></h3><p><strong>答：</strong></p><p><strong>1. 方法内部调用</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事务失效</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Transactional</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因：</strong> 不经过代理 <strong>解决：</strong> 注入自己或从容器获取</p><p><strong>2. 方法非public</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transactional</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 失效</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决：</strong> 改为public</p><p><strong>3. 异常被捕获</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transactional</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 操作</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 异常被捕获，不回滚</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决：</strong> 手动回滚或重新抛出</p><p><strong>4. 异常类型不匹配</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transactional</span> <span class="token comment">// 默认只回滚RuntimeException</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会回滚</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>5. 数据库不支持事务</strong></p><ul><li>MySQL的MyISAM不支持事务</li><li>使用InnoDB引擎</li></ul><hr><h2 id="五、spring-boot" tabindex="-1"><a class="header-anchor" href="#五、spring-boot"><span>五、Spring Boot</span></a></h2><h3 id="_17-spring和spring-boot的区别" tabindex="-1"><a class="header-anchor" href="#_17-spring和spring-boot的区别"><span>17. Spring和Spring Boot的区别？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>Spring</th><th>Spring Boot</th></tr></thead><tbody><tr><td>配置</td><td>大量XML/注解配置</td><td>自动配置</td></tr><tr><td>依赖管理</td><td>手动管理版本</td><td>starter统一管理</td></tr><tr><td>内嵌服务器</td><td>需外部Tomcat</td><td>内置Tomcat</td></tr><tr><td>学习曲线</td><td>陡峭</td><td>平缓</td></tr><tr><td>开发效率</td><td>一般</td><td>高</td></tr></tbody></table><p><strong>Spring Boot的优势：</strong></p><ul><li>✅ 开箱即用</li><li>✅ 约定优于配置</li><li>✅ 快速开发</li><li>✅ 生产就绪（监控、健康检查）</li></ul><hr><h3 id="_18-spring-boot自动配置原理" tabindex="-1"><a class="header-anchor" href="#_18-spring-boot自动配置原理"><span>18. Spring Boot自动配置原理？</span></a></h3><p><strong>答：</strong></p><p><strong>核心注解：</strong> @SpringBootApplication</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token operator">=</span> <span class="token annotation punctuation">@SpringBootConfiguration</span>  <span class="token comment">// 配置类</span></span>
<span class="line"><span class="token operator">+</span> <span class="token annotation punctuation">@EnableAutoConfiguration</span>  <span class="token comment">// 自动配置</span></span>
<span class="line"><span class="token operator">+</span> <span class="token annotation punctuation">@ComponentScan</span>           <span class="token comment">// 组件扫描</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自动配置流程：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. @EnableAutoConfiguration 启用自动配置</span>
<span class="line">2. 加载 spring.factories 文件</span>
<span class="line">3. 读取所有自动配置类</span>
<span class="line">4. 根据条件注解判断是否生效</span>
<span class="line">5. 创建对应的Bean</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>条件注解：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">// 类存在</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">// Bean不存在</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;app.enabled&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 属性匹配</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、综合题" tabindex="-1"><a class="header-anchor" href="#六、综合题"><span>六、综合题</span></a></h2><h3 id="_19-spring中用到了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#_19-spring中用到了哪些设计模式"><span>19. Spring中用到了哪些设计模式？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>设计模式</th><th>应用</th></tr></thead><tbody><tr><td><strong>工厂模式</strong></td><td>BeanFactory</td></tr><tr><td><strong>单例模式</strong></td><td>Bean默认单例</td></tr><tr><td><strong>代理模式</strong></td><td>AOP</td></tr><tr><td><strong>模板方法</strong></td><td>JdbcTemplate</td></tr><tr><td><strong>观察者模式</strong></td><td>ApplicationEvent</td></tr><tr><td><strong>适配器模式</strong></td><td>HandlerAdapter</td></tr><tr><td><strong>装饰器模式</strong></td><td>BeanWrapper</td></tr><tr><td><strong>策略模式</strong></td><td>Resource加载</td></tr></tbody></table><hr><h3 id="_20-如何优化spring应用的启动速度" tabindex="-1"><a class="header-anchor" href="#_20-如何优化spring应用的启动速度"><span>20. 如何优化Spring应用的启动速度？</span></a></h3><p><strong>答：</strong></p><p><strong>1. 使用懒加载</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Lazy</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpensiveBean</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 减少组件扫描范围</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.specific&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3. 排除不需要的自动配置</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 使用索引</strong></p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context-indexer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 调整JVM参数</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token parameter variable">-XX:TieredStopAtLevel</span><span class="token operator">=</span><span class="token number">1</span></span>
<span class="line"><span class="token parameter variable">-noverify</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结"><span>七、总结</span></a></h2><h3 id="高频考点" tabindex="-1"><a class="header-anchor" href="#高频考点"><span>高频考点</span></a></h3><p>✅ <strong>必须掌握：</strong></p><ul><li>IoC和DI的概念</li><li>Bean的生命周期</li><li>AOP的原理和应用</li><li>事务的传播行为和隔离级别</li><li>@Autowired和@Resource的区别</li><li>事务失效场景</li></ul><p>✅ <strong>加分项：</strong></p><ul><li>循环依赖的解决</li><li>Spring Boot自动配置原理</li><li>设计模式的应用</li><li>性能优化经验</li></ul><h3 id="面试技巧" tabindex="-1"><a class="header-anchor" href="#面试技巧"><span>面试技巧</span></a></h3><ol><li><strong>先说原理，再举例子</strong></li><li><strong>对比说明</strong>（如@Autowired vs @Resource）</li><li><strong>结合实际项目经验</strong></li><li><strong>说明遇到的问题和解决方案</strong></li></ol><h3 id="复习建议" tabindex="-1"><a class="header-anchor" href="#复习建议"><span>复习建议</span></a></h3><ul><li>熟记Bean生命周期</li><li>理解事务传播行为</li><li>掌握AOP的应用场景</li><li>了解事务失效原因</li><li>实践编码，加深理解</li></ul>`,201)])])}const c=s(p,[["render",l]]),r=JSON.parse('{"path":"/tutorials/java-backend/spring/5.Springmianshitiji.html","title":"Spring面试题集","lang":"zh-CN","frontmatter":{"title":"Spring面试题集"},"headers":[{"level":2,"title":"一、IoC和DI","slug":"一、ioc和di","link":"#一、ioc和di","children":[{"level":3,"title":"1. 什么是Spring IoC？","slug":"_1-什么是spring-ioc","link":"#_1-什么是spring-ioc","children":[]},{"level":3,"title":"2. 什么是依赖注入？有哪些方式？","slug":"_2-什么是依赖注入-有哪些方式","link":"#_2-什么是依赖注入-有哪些方式","children":[]},{"level":3,"title":"3. BeanFactory和ApplicationContext的区别？","slug":"_3-beanfactory和applicationcontext的区别","link":"#_3-beanfactory和applicationcontext的区别","children":[]},{"level":3,"title":"4. @Autowired和@Resource的区别？","slug":"_4-autowired和-resource的区别","link":"#_4-autowired和-resource的区别","children":[]}]},{"level":2,"title":"二、Bean管理","slug":"二、bean管理","link":"#二、bean管理","children":[{"level":3,"title":"5. Spring Bean的作用域有哪些？","slug":"_5-spring-bean的作用域有哪些","link":"#_5-spring-bean的作用域有哪些","children":[]},{"level":3,"title":"6. Spring Bean的生命周期？","slug":"_6-spring-bean的生命周期","link":"#_6-spring-bean的生命周期","children":[]},{"level":3,"title":"7. Spring如何解决循环依赖？","slug":"_7-spring如何解决循环依赖","link":"#_7-spring如何解决循环依赖","children":[]}]},{"level":2,"title":"三、AOP","slug":"三、aop","link":"#三、aop","children":[{"level":3,"title":"8. 什么是AOP？AOP的应用场景？","slug":"_8-什么是aop-aop的应用场景","link":"#_8-什么是aop-aop的应用场景","children":[]},{"level":3,"title":"9. AOP的核心概念？","slug":"_9-aop的核心概念","link":"#_9-aop的核心概念","children":[]},{"level":3,"title":"10. AOP的实现方式？","slug":"_10-aop的实现方式","link":"#_10-aop的实现方式","children":[]},{"level":3,"title":"11. 通知的类型和执行顺序？","slug":"_11-通知的类型和执行顺序","link":"#_11-通知的类型和执行顺序","children":[]}]},{"level":2,"title":"四、事务管理","slug":"四、事务管理","link":"#四、事务管理","children":[{"level":3,"title":"12. Spring事务的实现方式？","slug":"_12-spring事务的实现方式","link":"#_12-spring事务的实现方式","children":[]},{"level":3,"title":"13. @Transactional的属性？","slug":"_13-transactional的属性","link":"#_13-transactional的属性","children":[]},{"level":3,"title":"14. 事务的传播行为有哪些？","slug":"_14-事务的传播行为有哪些","link":"#_14-事务的传播行为有哪些","children":[]},{"level":3,"title":"15. 事务的隔离级别？","slug":"_15-事务的隔离级别","link":"#_15-事务的隔离级别","children":[]},{"level":3,"title":"16. 事务失效的场景？","slug":"_16-事务失效的场景","link":"#_16-事务失效的场景","children":[]}]},{"level":2,"title":"五、Spring Boot","slug":"五、spring-boot","link":"#五、spring-boot","children":[{"level":3,"title":"17. Spring和Spring Boot的区别？","slug":"_17-spring和spring-boot的区别","link":"#_17-spring和spring-boot的区别","children":[]},{"level":3,"title":"18. Spring Boot自动配置原理？","slug":"_18-spring-boot自动配置原理","link":"#_18-spring-boot自动配置原理","children":[]}]},{"level":2,"title":"六、综合题","slug":"六、综合题","link":"#六、综合题","children":[{"level":3,"title":"19. Spring中用到了哪些设计模式？","slug":"_19-spring中用到了哪些设计模式","link":"#_19-spring中用到了哪些设计模式","children":[]},{"level":3,"title":"20. 如何优化Spring应用的启动速度？","slug":"_20-如何优化spring应用的启动速度","link":"#_20-如何优化spring应用的启动速度","children":[]}]},{"level":2,"title":"七、总结","slug":"七、总结","link":"#七、总结","children":[{"level":3,"title":"高频考点","slug":"高频考点","link":"#高频考点","children":[]},{"level":3,"title":"面试技巧","slug":"面试技巧","link":"#面试技巧","children":[]},{"level":3,"title":"复习建议","slug":"复习建议","link":"#复习建议","children":[]}]}],"git":{"createdTime":1760959407000,"updatedTime":1760959407000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java-backend/spring/5.Spring面试题集.md"}');export{c as comp,r as data};
