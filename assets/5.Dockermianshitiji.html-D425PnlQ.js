import{_ as n,c as a,d as e,o as l}from"./app-BxcHLiku.js";const i={};function p(t,s){return l(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="docker面试题集" tabindex="-1"><a class="header-anchor" href="#docker面试题集"><span>Docker面试题集</span></a></h1><h2 id="一、docker基础概念面试题" tabindex="-1"><a class="header-anchor" href="#一、docker基础概念面试题"><span>一、Docker基础概念面试题</span></a></h2><h3 id="_1-1-什么是docker-它解决了什么问题" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是docker-它解决了什么问题"><span>1.1 什么是Docker？它解决了什么问题？</span></a></h3><p><strong>答案：</strong></p><p>Docker 是一个开源的容器化平台，用于开发、部署和运行应用程序。</p><p><strong>解决的问题：</strong></p><ol><li><strong>环境一致性</strong> - &quot;在我机器上能跑&quot;的问题</li><li><strong>资源隔离</strong> - 应用之间互不影响</li><li><strong>快速部署</strong> - 秒级启动，提高效率</li><li><strong>版本管理</strong> - 镜像版本化，方便回滚</li><li><strong>资源利用</strong> - 相比虚拟机更轻量，资源占用少</li></ol><h3 id="_1-2-docker-与虚拟机有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-2-docker-与虚拟机有什么区别"><span>1.2 Docker 与虚拟机有什么区别？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>Docker 容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动速度</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>MB 级</td><td>GB 级</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于原生</td></tr><tr><td>系统支持量</td><td>单机可支持上千个</td><td>一般几十个</td></tr><tr><td>隔离性</td><td>进程级别</td><td>系统级别</td></tr></tbody></table><p><strong>核心区别：</strong></p><ul><li>虚拟机需要完整的 Guest OS，Docker 共享主机内核</li><li>Docker 是进程级虚拟化，虚拟机是系统级虚拟化</li></ul><h3 id="_1-3-docker-的核心组件有哪些" tabindex="-1"><a class="header-anchor" href="#_1-3-docker-的核心组件有哪些"><span>1.3 Docker 的核心组件有哪些？</span></a></h3><p><strong>答案：</strong></p><ol><li><p><strong>Docker Client（客户端）</strong></p><ul><li>用户与 Docker 交互的主要方式</li><li>发送命令到 Docker Daemon</li></ul></li><li><p><strong>Docker Daemon（守护进程）</strong></p><ul><li>监听 Docker API 请求</li><li>管理镜像、容器、网络、卷</li></ul></li><li><p><strong>Docker Image（镜像）</strong></p><ul><li>只读模板，用于创建容器</li><li>采用分层存储结构</li></ul></li><li><p><strong>Docker Container（容器）</strong></p><ul><li>镜像的运行实例</li><li>可创建、启动、停止、删除</li></ul></li><li><p><strong>Docker Registry（仓库）</strong></p><ul><li>存储和分发镜像</li><li>如 Docker Hub、私有仓库</li></ul></li></ol><h3 id="_1-4-什么是镜像分层-为什么要分层" tabindex="-1"><a class="header-anchor" href="#_1-4-什么是镜像分层-为什么要分层"><span>1.4 什么是镜像分层？为什么要分层？</span></a></h3><p><strong>答案：</strong></p><p>Docker 镜像采用联合文件系统（Union FS），每个镜像由多个只读层组成。</p><p><strong>分层结构示例：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">应用层      ← COPY app.jar</span>
<span class="line">依赖层      ← RUN apt-get install</span>
<span class="line">基础层      ← FROM ubuntu</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分层的优势：</strong></p><ol><li><strong>节省存储空间</strong> - 多个镜像共享相同的基础层</li><li><strong>加快传输速度</strong> - 只传输变化的层</li><li><strong>提高构建效率</strong> - 利用缓存机制</li><li><strong>便于版本管理</strong> - 每层都有唯一 ID</li></ol><h3 id="_1-5-dockerfile-中-copy-和-add-的区别" tabindex="-1"><a class="header-anchor" href="#_1-5-dockerfile-中-copy-和-add-的区别"><span>1.5 Dockerfile 中 COPY 和 ADD 的区别？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>COPY</th><th>ADD</th></tr></thead><tbody><tr><td>基本复制</td><td>✅</td><td>✅</td></tr><tr><td>支持 URL</td><td>❌</td><td>✅</td></tr><tr><td>自动解压 tar</td><td>❌</td><td>✅</td></tr><tr><td>透明性</td><td>高</td><td>低</td></tr><tr><td>推荐使用</td><td>✅</td><td>特定场景</td></tr></tbody></table><p><strong>建议：</strong></p><ul><li>一般情况使用 COPY，语义更清晰</li><li>只在需要自动解压时使用 ADD</li></ul><h3 id="_1-6-cmd-和-entrypoint-的区别" tabindex="-1"><a class="header-anchor" href="#_1-6-cmd-和-entrypoint-的区别"><span>1.6 CMD 和 ENTRYPOINT 的区别？</span></a></h3><p><strong>答案：</strong></p><p><strong>CMD：</strong></p><ul><li>提供容器默认执行的命令</li><li>可被 <code>docker run</code> 命令行参数覆盖</li></ul><p><strong>ENTRYPOINT：</strong></p><ul><li>配置容器启动时运行的命令</li><li>不容易被覆盖（需要 --entrypoint 参数）</li></ul><p><strong>组合使用：</strong></p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>]</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;app.jar&quot;</span>]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 运行: docker run myapp</span></span>
<span class="line"><span class="token comment"># 执行: java -jar app.jar</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 运行: docker run myapp another.jar</span></span>
<span class="line"><span class="token comment"># 执行: java -jar another.jar</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、镜像与容器相关面试题" tabindex="-1"><a class="header-anchor" href="#二、镜像与容器相关面试题"><span>二、镜像与容器相关面试题</span></a></h2><h3 id="_2-1-如何优化-docker-镜像大小" tabindex="-1"><a class="header-anchor" href="#_2-1-如何优化-docker-镜像大小"><span>2.1 如何优化 Docker 镜像大小？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 使用轻量级基础镜像</strong></p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> alpine:latest  # 5MB</span></span>
<span class="line"><span class="token comment"># 而不是 FROM ubuntu:latest  # 80MB</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 多阶段构建</strong></p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> maven:3.8 <span class="token keyword">AS</span> builder</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> mvn package</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> openjdk:8-jre-alpine  # 只包含运行时</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /app/target/*.jar app.jar</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 合并 RUN 指令</strong></p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; <span class="token operator">\\</span></span>
<span class="line">    apt-get install -y curl &amp;&amp; <span class="token operator">\\</span></span>
<span class="line">    apt-get clean &amp;&amp; <span class="token operator">\\</span></span>
<span class="line">    rm -rf /var/lib/apt/lists/*</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 使用 .dockerignore</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">.git</span>
<span class="line">node_modules/</span>
<span class="line">*.md</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 清理缓存和临时文件</strong></p><h3 id="_2-2-docker-容器的生命周期是怎样的" tabindex="-1"><a class="header-anchor" href="#_2-2-docker-容器的生命周期是怎样的"><span>2.2 Docker 容器的生命周期是怎样的？</span></a></h3><p><strong>答案：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">created → running → paused → stopped → deleted</span>
<span class="line">   ↑         ↓                    ↓</span>
<span class="line">   └─────────┴────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>状态说明：</strong></p><ol><li><strong>Created</strong> - 容器已创建但未启动</li><li><strong>Running</strong> - 容器正在运行</li><li><strong>Paused</strong> - 容器被暂停</li><li><strong>Stopped</strong> - 容器已停止</li><li><strong>Deleted</strong> - 容器被删除</li></ol><p><strong>常用命令：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> create   <span class="token comment"># 创建</span></span>
<span class="line"><span class="token function">docker</span> start    <span class="token comment"># 启动</span></span>
<span class="line"><span class="token function">docker</span> pause    <span class="token comment"># 暂停</span></span>
<span class="line"><span class="token function">docker</span> unpause  <span class="token comment"># 恢复</span></span>
<span class="line"><span class="token function">docker</span> stop     <span class="token comment"># 停止</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">rm</span>       <span class="token comment"># 删除</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-如何进入运行中的容器" tabindex="-1"><a class="header-anchor" href="#_2-3-如何进入运行中的容器"><span>2.3 如何进入运行中的容器？</span></a></h3><p><strong>答案：</strong></p><p><strong>方法一：docker exec（推荐）</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> container_name <span class="token function">bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>方法二：docker attach</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> attach container_name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>区别：</strong></p><ul><li><code>exec</code> 创建新进程，退出不影响容器</li><li><code>attach</code> 连接到主进程，退出会停止容器</li></ul><h3 id="_2-4-容器数据如何持久化" tabindex="-1"><a class="header-anchor" href="#_2-4-容器数据如何持久化"><span>2.4 容器数据如何持久化？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. Volume（数据卷）- 推荐</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> volume create my-volume</span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-v</span> my-volume:/data myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. Bind Mount（绑定挂载）</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-v</span> /host/path:/container/path myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3. tmpfs Mount（内存挂载）</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--tmpfs</span> /tmp myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>对比：</strong></p><ul><li>Volume：Docker 管理，生产环境推荐</li><li>Bind Mount：依赖主机路径，开发环境使用</li><li>tmpfs：数据在内存中，容器停止即丢失</li></ul><hr><h2 id="三、网络与存储面试题" tabindex="-1"><a class="header-anchor" href="#三、网络与存储面试题"><span>三、网络与存储面试题</span></a></h2><h3 id="_3-1-docker-有哪些网络模式" tabindex="-1"><a class="header-anchor" href="#_3-1-docker-有哪些网络模式"><span>3.1 Docker 有哪些网络模式？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. bridge（桥接模式）- 默认</strong></p><ul><li>容器连接到虚拟网桥</li><li>可通过端口映射访问</li></ul><p><strong>2. host（主机模式）</strong></p><ul><li>容器使用主机网络栈</li><li>性能最佳，但失去隔离性</li></ul><p><strong>3. none（无网络）</strong></p><ul><li>容器没有网络接口</li><li>完全隔离</li></ul><p><strong>4. container</strong></p><ul><li>与其他容器共享网络</li><li>适合紧密通信的容器</li></ul><p><strong>5. 自定义网络</strong></p><ul><li>用户定义的网络</li><li>支持容器名解析</li></ul><p><strong>示例：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> network create my-network</span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--network</span> my-network nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-容器间如何通信" tabindex="-1"><a class="header-anchor" href="#_3-2-容器间如何通信"><span>3.2 容器间如何通信？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 同一网络中通过容器名</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> network create app-net</span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> db <span class="token parameter variable">--network</span> app-net mysql</span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> app <span class="token parameter variable">--network</span> app-net myapp</span>
<span class="line"></span>
<span class="line"><span class="token comment"># app 中可以通过 db:3306 连接 MySQL</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 通过 link（已废弃）</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--link</span> db:database myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3. 通过主机端口</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 mysql</span>
<span class="line"><span class="token comment"># 其他容器通过 host.docker.internal:3306 访问</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-如何限制容器资源使用" tabindex="-1"><a class="header-anchor" href="#_3-3-如何限制容器资源使用"><span>3.3 如何限制容器资源使用？</span></a></h3><p><strong>答案：</strong></p><p><strong>CPU 限制：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--cpus</span><span class="token operator">=</span><span class="token number">1.5</span> myapp          <span class="token comment"># 限制 CPU</span></span>
<span class="line"><span class="token function">docker</span> run --cpu-shares<span class="token operator">=</span><span class="token number">512</span> myapp    <span class="token comment"># CPU 权重</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>内存限制：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--memory</span><span class="token operator">=</span>512m myapp       <span class="token comment"># 限制内存</span></span>
<span class="line"><span class="token function">docker</span> run --memory-swap<span class="token operator">=</span>1g myapp    <span class="token comment"># 限制 swap</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>磁盘 IO 限制：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run --device-read-bps /dev/sda:1mb myapp</span>
<span class="line"><span class="token function">docker</span> run --device-write-bps /dev/sda:1mb myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在 docker-compose.yml 中：</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">app</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> myapp</span>
<span class="line">    <span class="token key atrule">deploy</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">resources</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">limits</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">cpus</span><span class="token punctuation">:</span> <span class="token string">&#39;1.5&#39;</span></span>
<span class="line">          <span class="token key atrule">memory</span><span class="token punctuation">:</span> 512M</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、实战场景面试题" tabindex="-1"><a class="header-anchor" href="#四、实战场景面试题"><span>四、实战场景面试题</span></a></h2><h3 id="_4-1-如何排查容器无法启动的问题" tabindex="-1"><a class="header-anchor" href="#_4-1-如何排查容器无法启动的问题"><span>4.1 如何排查容器无法启动的问题？</span></a></h3><p><strong>答案：</strong></p><p><strong>步骤 1：查看容器状态</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>步骤 2：查看日志</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> logs container_name</span>
<span class="line"><span class="token function">docker</span> logs <span class="token parameter variable">--tail</span> <span class="token number">100</span> container_name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤 3：查看详细信息</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> inspect container_name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>步骤 4：尝试手动运行</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--entrypoint</span> <span class="token function">sh</span> myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>常见问题：</strong></p><ol><li>端口已被占用</li><li>配置文件错误</li><li>依赖服务未就绪</li><li>权限问题</li><li>资源不足</li></ol><h3 id="_4-2-如何备份和恢复-docker-容器" tabindex="-1"><a class="header-anchor" href="#_4-2-如何备份和恢复-docker-容器"><span>4.2 如何备份和恢复 Docker 容器？</span></a></h3><p><strong>答案：</strong></p><p><strong>备份容器：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 提交容器为镜像</span></span>
<span class="line"><span class="token function">docker</span> commit container_name backup_image:v1</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 导出镜像</span></span>
<span class="line"><span class="token function">docker</span> save <span class="token parameter variable">-o</span> backup.tar backup_image:v1</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 备份数据卷</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-v</span> volume_name:/data <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>:/backup ubuntu <span class="token function">tar</span> czf /backup/data.tar.gz /data</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>恢复容器：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 导入镜像</span></span>
<span class="line"><span class="token function">docker</span> load <span class="token parameter variable">-i</span> backup.tar</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 恢复数据卷</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-v</span> volume_name:/data <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>:/backup ubuntu <span class="token function">tar</span> xzf /backup/data.tar.gz <span class="token parameter variable">-C</span> /</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 运行容器</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> volume_name:/data backup_image:v1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-spring-boot-应用容器化的最佳实践" tabindex="-1"><a class="header-anchor" href="#_4-3-spring-boot-应用容器化的最佳实践"><span>4.3 Spring Boot 应用容器化的最佳实践？</span></a></h3><p><strong>答案：</strong></p><p><strong>Dockerfile 示例：</strong></p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token comment"># 多阶段构建</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> maven:3.8-openjdk-8-slim <span class="token keyword">AS</span> builder</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /build</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> pom.xml .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> mvn dependency:go-offline</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> src ./src</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> mvn package -DskipTests</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 运行阶段</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> openjdk:8-jre-alpine</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> addgroup -S spring &amp;&amp; adduser -S spring -G spring</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">USER</span> spring:spring</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /build/target/*.jar app.jar</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">HEALTHCHECK</span> <span class="token options"><span class="token property">--interval</span><span class="token punctuation">=</span><span class="token string">30s</span> <span class="token property">--timeout</span><span class="token punctuation">=</span><span class="token string">3s</span></span> <span class="token operator">\\</span></span>
<span class="line">  <span class="token keyword">CMD</span> wget -q --spider http://localhost:8080/actuator/health || exit 1</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-Xmx512m&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;app.jar&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最佳实践：</strong></p><ol><li>使用多阶段构建减小镜像</li><li>不以 root 用户运行</li><li>添加健康检查</li><li>设置 JVM 参数</li><li>使用 Alpine 基础镜像</li></ol><h3 id="_4-4-如何实现-docker-的零停机部署" tabindex="-1"><a class="header-anchor" href="#_4-4-如何实现-docker-的零停机部署"><span>4.4 如何实现 Docker 的零停机部署？</span></a></h3><p><strong>答案：</strong></p><p><strong>方式一：使用 Docker Compose 滚动更新</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 更新镜像</span></span>
<span class="line"><span class="token function">docker-compose</span> pull</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 滚动更新（逐个重启）</span></span>
<span class="line"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> --no-deps <span class="token parameter variable">--scale</span> <span class="token assign-left variable">app</span><span class="token operator">=</span><span class="token number">2</span> --no-recreate app</span>
<span class="line"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> --no-deps <span class="token parameter variable">--scale</span> <span class="token assign-left variable">app</span><span class="token operator">=</span><span class="token number">1</span> --force-recreate app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式二：蓝绿部署</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 启动新版本（绿）</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> app-green myapp:v2</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 测试新版本</span></span>
<span class="line"><span class="token function">curl</span> http://app-green:8080/health</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 切换流量（更新 Nginx 配置）</span></span>
<span class="line"><span class="token comment"># 4. 停止旧版本（蓝）</span></span>
<span class="line"><span class="token function">docker</span> stop app-blue</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式三：使用 Kubernetes</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span></span>
<span class="line">  <span class="token key atrule">strategy</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate</span>
<span class="line">    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、高频面试题解析" tabindex="-1"><a class="header-anchor" href="#五、高频面试题解析"><span>五、高频面试题解析</span></a></h2><h3 id="_5-1-docker-镜像是如何构建的" tabindex="-1"><a class="header-anchor" href="#_5-1-docker-镜像是如何构建的"><span>5.1 Docker 镜像是如何构建的？</span></a></h3><p><strong>答案：</strong></p><p><strong>构建过程：</strong></p><ol><li>从 Dockerfile 读取指令</li><li>从基础镜像开始</li><li>每条指令创建一个新层</li><li>最终生成镜像 ID</li></ol><p><strong>示例：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> myapp:v1 <span class="token builtin class-name">.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 构建过程</span></span>
<span class="line">Step <span class="token number">1</span>/5 <span class="token builtin class-name">:</span> FROM openjdk:8</span>
<span class="line">Step <span class="token number">2</span>/5 <span class="token builtin class-name">:</span> WORKDIR /app</span>
<span class="line">Step <span class="token number">3</span>/5 <span class="token builtin class-name">:</span> COPY app.jar <span class="token builtin class-name">.</span></span>
<span class="line">Step <span class="token number">4</span>/5 <span class="token builtin class-name">:</span> EXPOSE <span class="token number">8080</span></span>
<span class="line">Step <span class="token number">5</span>/5 <span class="token builtin class-name">:</span> CMD <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;app.jar&quot;</span><span class="token punctuation">]</span></span>
<span class="line">Successfully built abc123def456</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优化技巧：</strong></p><ul><li>合理安排指令顺序（变化少的在前）</li><li>利用构建缓存</li><li>使用 .dockerignore</li></ul><h3 id="_5-2-什么是-docker-compose-它解决了什么问题" tabindex="-1"><a class="header-anchor" href="#_5-2-什么是-docker-compose-它解决了什么问题"><span>5.2 什么是 Docker Compose？它解决了什么问题？</span></a></h3><p><strong>答案：</strong></p><p>Docker Compose 是用于定义和运行多容器 Docker 应用的工具。</p><p><strong>解决的问题：</strong></p><ol><li><strong>简化多容器管理</strong> - 一个文件定义所有服务</li><li><strong>服务编排</strong> - 管理服务依赖关系</li><li><strong>一键部署</strong> - 单条命令启动整个应用</li><li><strong>环境隔离</strong> - 不同项目互不影响</li></ol><p><strong>示例：</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">web</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span> .</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span></span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> db</span>
<span class="line">  <span class="token key atrule">db</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span></span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> root</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-容器退出后数据会丢失吗-如何保留" tabindex="-1"><a class="header-anchor" href="#_5-3-容器退出后数据会丢失吗-如何保留"><span>5.3 容器退出后数据会丢失吗？如何保留？</span></a></h3><p><strong>答案：</strong></p><p><strong>默认情况：</strong></p><ul><li>容器文件系统的修改会丢失</li><li>容器删除后数据完全丢失</li></ul><p><strong>保留数据的方法：</strong></p><p><strong>1. 使用 Volume（推荐）</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> volume create app-data</span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-v</span> app-data:/data myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 挂载主机目录</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-v</span> /host/data:/container/data myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3. 导出容器</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">export</span> container_name <span class="token operator">&gt;</span> backup.tar</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-4-docker-的安全性如何保障" tabindex="-1"><a class="header-anchor" href="#_5-4-docker-的安全性如何保障"><span>5.4 Docker 的安全性如何保障？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 不以 root 用户运行</strong></p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">RUN</span> adduser -S appuser</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">USER</span> appuser</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 使用只读文件系统</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run --read-only myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3. 限制容器权限</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run --cap-drop ALL --cap-add NET_BIND_SERVICE myapp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>4. 扫描镜像漏洞</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> scan myapp:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>5. 使用私有镜像仓库</strong></p><p><strong>6. 网络隔离</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">internal</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">internal</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 不能访问外网</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-如何监控-docker-容器" tabindex="-1"><a class="header-anchor" href="#_5-5-如何监控-docker-容器"><span>5.5 如何监控 Docker 容器？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. docker stats 命令</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stats</span>
<span class="line"><span class="token function">docker</span> stats --no-stream</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. cAdvisor</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> /:/rootfs:ro <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> /var/run:/var/run:ro <span class="token punctuation">\\</span></span>
<span class="line">  google/cadvisor</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. Prometheus + Grafana</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">prometheus</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> prom/prometheus</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;9090:9090&quot;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token key atrule">grafana</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> grafana/grafana</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;3000:3000&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. ELK Stack（日志监控）</strong></p><p><strong>监控指标：</strong></p><ul><li>CPU 使用率</li><li>内存使用率</li><li>网络 I/O</li><li>磁盘 I/O</li><li>容器数量</li></ul><hr><h2 id="六、综合应用题" tabindex="-1"><a class="header-anchor" href="#六、综合应用题"><span>六、综合应用题</span></a></h2><h3 id="_6-1-设计一个微服务应用的-docker-部署方案" tabindex="-1"><a class="header-anchor" href="#_6-1-设计一个微服务应用的-docker-部署方案"><span>6.1 设计一个微服务应用的 Docker 部署方案</span></a></h3><p><strong>答案：</strong></p><p><strong>架构设计：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Nginx → Gateway → 多个微服务 → MySQL/Redis/RabbitMQ</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>docker-compose.yml：</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">nginx</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>alpine</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;80:80&quot;</span></span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> gateway</span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">gateway</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./gateway</span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> eureka</span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">EUREKA_SERVER</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka<span class="token punctuation">:</span>8761/eureka</span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">eureka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./eureka</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;8761:8761&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">user-service</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./user<span class="token punctuation">-</span>service</span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> mysql</span>
<span class="line">      <span class="token punctuation">-</span> redis</span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">DB_HOST</span><span class="token punctuation">:</span> mysql</span>
<span class="line">      <span class="token key atrule">REDIS_HOST</span><span class="token punctuation">:</span> redis</span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">mysql</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span></span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> root</span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> mysql<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/mysql</span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>alpine</span>
<span class="line">    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server <span class="token punctuation">-</span><span class="token punctuation">-</span>requirepass redis123</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">mysql-data</span><span class="token punctuation">:</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-如何实现-docker-的-ci-cd" tabindex="-1"><a class="header-anchor" href="#_6-2-如何实现-docker-的-ci-cd"><span>6.2 如何实现 Docker 的 CI/CD？</span></a></h3><p><strong>答案：</strong></p><p><strong>GitLab CI/CD 示例：</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">stages</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> build</span>
<span class="line">  <span class="token punctuation">-</span> test</span>
<span class="line">  <span class="token punctuation">-</span> deploy</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">build</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">stage</span><span class="token punctuation">:</span> build</span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> docker build <span class="token punctuation">-</span>t myapp<span class="token punctuation">:</span>$CI_COMMIT_SHA .</span>
<span class="line">    <span class="token punctuation">-</span> docker push myapp<span class="token punctuation">:</span>$CI_COMMIT_SHA</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">test</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test</span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> docker run myapp<span class="token punctuation">:</span>$CI_COMMIT_SHA npm test</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">deploy</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy</span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>compose pull</span>
<span class="line">    <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>compose up <span class="token punctuation">-</span>d</span>
<span class="line">  <span class="token key atrule">only</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> main</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="七、小结" tabindex="-1"><a class="header-anchor" href="#七、小结"><span>七、小结</span></a></h2><p><strong>Docker 面试高频考点：</strong></p><p>✅ <strong>基础概念</strong></p><ul><li>Docker 是什么</li><li>与虚拟机的区别</li><li>核心组件</li></ul><p>✅ <strong>镜像与容器</strong></p><ul><li>分层存储原理</li><li>Dockerfile 编写</li><li>容器生命周期</li></ul><p>✅ <strong>网络与存储</strong></p><ul><li>网络模式</li><li>数据持久化</li><li>容器通信</li></ul><p>✅ <strong>实战应用</strong></p><ul><li>应用容器化</li><li>问题排查</li><li>性能优化</li></ul><p>✅ <strong>进阶内容</strong></p><ul><li>Docker Compose</li><li>微服务部署</li><li>CI/CD 集成</li></ul><p><strong>面试准备建议：</strong></p><ol><li>理解 Docker 核心原理</li><li>熟练掌握常用命令</li><li>有实际项目经验</li><li>了解容器编排（Kubernetes）</li><li>关注安全性和性能优化</li></ol><hr><p><strong>恭喜你完成了 Docker 教程的学习！🎉</strong></p><p><strong>建议：</strong></p><ul><li>多动手实践</li><li>参与开源项目</li><li>关注官方文档更新</li><li>学习 Kubernetes 等容器编排工具</li></ul><p><strong>继续学习路径：</strong></p><ul><li>Kubernetes 容器编排</li><li>Docker Swarm</li><li>服务网格（Service Mesh）</li><li>云原生技术栈</li></ul>`,226)])])}const c=n(i,[["render",p]]),o=JSON.parse('{"path":"/tutorials/java-backend/docker/5.Dockermianshitiji.html","title":"Docker面试题集","lang":"zh-CN","frontmatter":{"title":"Docker面试题集"},"headers":[{"level":2,"title":"一、Docker基础概念面试题","slug":"一、docker基础概念面试题","link":"#一、docker基础概念面试题","children":[{"level":3,"title":"1.1 什么是Docker？它解决了什么问题？","slug":"_1-1-什么是docker-它解决了什么问题","link":"#_1-1-什么是docker-它解决了什么问题","children":[]},{"level":3,"title":"1.2 Docker 与虚拟机有什么区别？","slug":"_1-2-docker-与虚拟机有什么区别","link":"#_1-2-docker-与虚拟机有什么区别","children":[]},{"level":3,"title":"1.3 Docker 的核心组件有哪些？","slug":"_1-3-docker-的核心组件有哪些","link":"#_1-3-docker-的核心组件有哪些","children":[]},{"level":3,"title":"1.4 什么是镜像分层？为什么要分层？","slug":"_1-4-什么是镜像分层-为什么要分层","link":"#_1-4-什么是镜像分层-为什么要分层","children":[]},{"level":3,"title":"1.5 Dockerfile 中 COPY 和 ADD 的区别？","slug":"_1-5-dockerfile-中-copy-和-add-的区别","link":"#_1-5-dockerfile-中-copy-和-add-的区别","children":[]},{"level":3,"title":"1.6 CMD 和 ENTRYPOINT 的区别？","slug":"_1-6-cmd-和-entrypoint-的区别","link":"#_1-6-cmd-和-entrypoint-的区别","children":[]}]},{"level":2,"title":"二、镜像与容器相关面试题","slug":"二、镜像与容器相关面试题","link":"#二、镜像与容器相关面试题","children":[{"level":3,"title":"2.1 如何优化 Docker 镜像大小？","slug":"_2-1-如何优化-docker-镜像大小","link":"#_2-1-如何优化-docker-镜像大小","children":[]},{"level":3,"title":"2.2 Docker 容器的生命周期是怎样的？","slug":"_2-2-docker-容器的生命周期是怎样的","link":"#_2-2-docker-容器的生命周期是怎样的","children":[]},{"level":3,"title":"2.3 如何进入运行中的容器？","slug":"_2-3-如何进入运行中的容器","link":"#_2-3-如何进入运行中的容器","children":[]},{"level":3,"title":"2.4 容器数据如何持久化？","slug":"_2-4-容器数据如何持久化","link":"#_2-4-容器数据如何持久化","children":[]}]},{"level":2,"title":"三、网络与存储面试题","slug":"三、网络与存储面试题","link":"#三、网络与存储面试题","children":[{"level":3,"title":"3.1 Docker 有哪些网络模式？","slug":"_3-1-docker-有哪些网络模式","link":"#_3-1-docker-有哪些网络模式","children":[]},{"level":3,"title":"3.2 容器间如何通信？","slug":"_3-2-容器间如何通信","link":"#_3-2-容器间如何通信","children":[]},{"level":3,"title":"3.3 如何限制容器资源使用？","slug":"_3-3-如何限制容器资源使用","link":"#_3-3-如何限制容器资源使用","children":[]}]},{"level":2,"title":"四、实战场景面试题","slug":"四、实战场景面试题","link":"#四、实战场景面试题","children":[{"level":3,"title":"4.1 如何排查容器无法启动的问题？","slug":"_4-1-如何排查容器无法启动的问题","link":"#_4-1-如何排查容器无法启动的问题","children":[]},{"level":3,"title":"4.2 如何备份和恢复 Docker 容器？","slug":"_4-2-如何备份和恢复-docker-容器","link":"#_4-2-如何备份和恢复-docker-容器","children":[]},{"level":3,"title":"4.3 Spring Boot 应用容器化的最佳实践？","slug":"_4-3-spring-boot-应用容器化的最佳实践","link":"#_4-3-spring-boot-应用容器化的最佳实践","children":[]},{"level":3,"title":"4.4 如何实现 Docker 的零停机部署？","slug":"_4-4-如何实现-docker-的零停机部署","link":"#_4-4-如何实现-docker-的零停机部署","children":[]}]},{"level":2,"title":"五、高频面试题解析","slug":"五、高频面试题解析","link":"#五、高频面试题解析","children":[{"level":3,"title":"5.1 Docker 镜像是如何构建的？","slug":"_5-1-docker-镜像是如何构建的","link":"#_5-1-docker-镜像是如何构建的","children":[]},{"level":3,"title":"5.2 什么是 Docker Compose？它解决了什么问题？","slug":"_5-2-什么是-docker-compose-它解决了什么问题","link":"#_5-2-什么是-docker-compose-它解决了什么问题","children":[]},{"level":3,"title":"5.3 容器退出后数据会丢失吗？如何保留？","slug":"_5-3-容器退出后数据会丢失吗-如何保留","link":"#_5-3-容器退出后数据会丢失吗-如何保留","children":[]},{"level":3,"title":"5.4 Docker 的安全性如何保障？","slug":"_5-4-docker-的安全性如何保障","link":"#_5-4-docker-的安全性如何保障","children":[]},{"level":3,"title":"5.5 如何监控 Docker 容器？","slug":"_5-5-如何监控-docker-容器","link":"#_5-5-如何监控-docker-容器","children":[]}]},{"level":2,"title":"六、综合应用题","slug":"六、综合应用题","link":"#六、综合应用题","children":[{"level":3,"title":"6.1 设计一个微服务应用的 Docker 部署方案","slug":"_6-1-设计一个微服务应用的-docker-部署方案","link":"#_6-1-设计一个微服务应用的-docker-部署方案","children":[]},{"level":3,"title":"6.2 如何实现 Docker 的 CI/CD？","slug":"_6-2-如何实现-docker-的-ci-cd","link":"#_6-2-如何实现-docker-的-ci-cd","children":[]}]},{"level":2,"title":"七、小结","slug":"七、小结","link":"#七、小结","children":[]}],"git":{"createdTime":1761052725000,"updatedTime":1761052725000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java-backend/docker/5.Docker面试题集.md"}');export{c as comp,o as data};
