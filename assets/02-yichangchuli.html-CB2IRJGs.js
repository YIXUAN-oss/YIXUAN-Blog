import{_ as l,c,d as o,e as a,f as s,b as p,w as e,r as i,o as u}from"./app-Djsnn6K7.js";const r={};function d(k,n){const t=i("RouteLink");return u(),c("div",null,[n[7]||(n[7]=o(`<h1 id="java-异常处理" tabindex="-1"><a class="header-anchor" href="#java-异常处理"><span>Java 异常处理</span></a></h1><blockquote><p><strong>本章重点：</strong> 异常体系、try-catch-finally、throws、自定义异常</p><p><strong>面试频率：</strong> ⭐⭐⭐⭐⭐</p></blockquote><hr><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6">一、异常处理机制</a></li><li><a href="#%E4%BA%8C%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB">二、异常体系</a></li><li><a href="#%E4%B8%89%E5%B8%B8%E8%A7%81%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8">三、常见的运行时异常</a></li><li><a href="#%E5%9B%9B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F">四、异常处理方式</a></li><li><a href="#%E4%BA%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8">五、自定义异常</a></li><li><a href="#%E5%85%AD%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">六、面试常见问题</a></li></ul><hr><h2 id="一、异常处理机制" tabindex="-1"><a class="header-anchor" href="#一、异常处理机制"><span>一、异常处理机制</span></a></h2><h3 id="_1-1-为什么需要异常处理" tabindex="-1"><a class="header-anchor" href="#_1-1-为什么需要异常处理"><span>1.1 为什么需要异常处理</span></a></h3><p><strong>没有异常处理：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> res <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>  <span class="token comment">// 程序崩溃：ArithmeticException</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序继续运行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 不会执行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用异常处理：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> res <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出现异常：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序继续运行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 会执行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-异常处理的好处" tabindex="-1"><a class="header-anchor" href="#_1-2-异常处理的好处"><span>1.2 异常处理的好处</span></a></h3><ol><li><strong>保证程序的健壮性</strong>：即使出现异常，程序也能继续执行</li><li><strong>便于调试</strong>：可以获取详细的异常信息</li><li><strong>提高用户体验</strong>：给出友好的错误提示</li></ol><h3 id="_1-3-快速生成-try-catch" tabindex="-1"><a class="header-anchor" href="#_1-3-快速生成-try-catch"><span>1.3 快速生成 try-catch</span></a></h3><p><strong>IDEA 快捷键：</strong></p><ul><li>选中代码块 → <code>Ctrl + Alt + T</code> → 选择 <code>try-catch</code></li></ul><hr><h2 id="二、异常体系" tabindex="-1"><a class="header-anchor" href="#二、异常体系"><span>二、异常体系</span></a></h2><h3 id="_2-1-异常的定义" tabindex="-1"><a class="header-anchor" href="#_2-1-异常的定义"><span>2.1 异常的定义</span></a></h3><p><strong>异常（Exception）：</strong> Java中，将程序执行中发生的不正常情况称为&quot;异常&quot;。</p><h3 id="_2-2-异常体系结构" tabindex="-1"><a class="header-anchor" href="#_2-2-异常体系结构"><span>2.2 异常体系结构</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Throwable (所有异常和错误的父类)</span>
<span class="line">├── Error (错误)</span>
<span class="line">│   ├── OutOfMemoryError (内存溢出)</span>
<span class="line">│   ├── StackOverflowError (栈溢出)</span>
<span class="line">│   └── ...</span>
<span class="line">└── Exception (异常)</span>
<span class="line">    ├── RuntimeException (运行时异常)</span>
<span class="line">    │   ├── NullPointerException (空指针)</span>
<span class="line">    │   ├── ArithmeticException (算术异常)</span>
<span class="line">    │   ├── ArrayIndexOutOfBoundsException (数组越界)</span>
<span class="line">    │   ├── ClassCastException (类型转换异常)</span>
<span class="line">    │   └── NumberFormatException (数字格式异常)</span>
<span class="line">    └── 编译时异常 (Checked Exception)</span>
<span class="line">        ├── IOException (IO异常)</span>
<span class="line">        ├── FileNotFoundException (文件未找到)</span>
<span class="line">        ├── SQLException (SQL异常)</span>
<span class="line">        └── ClassNotFoundException (类未找到)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-error-vs-exception" tabindex="-1"><a class="header-anchor" href="#_2-3-error-vs-exception"><span>2.3 Error vs Exception</span></a></h3><table><thead><tr><th>特性</th><th>Error</th><th>Exception</th></tr></thead><tbody><tr><td><strong>严重程度</strong></td><td>严重错误</td><td>一般性问题</td></tr><tr><td><strong>是否可处理</strong></td><td>不可处理（JVM问题）</td><td>可以处理</td></tr><tr><td><strong>是否应该捕获</strong></td><td>不应该捕获</td><td>应该捕获</td></tr><tr><td><strong>示例</strong></td><td>OutOfMemoryError</td><td>NullPointerException</td></tr></tbody></table><p><strong>Error 示例：</strong></p><ul><li><code>OutOfMemoryError</code>：内存溢出</li><li><code>StackOverflowError</code>：栈溢出（通常是递归调用太深）</li></ul><p><strong>Exception 分类：</strong></p><ol><li><p><strong>运行时异常（RuntimeException）</strong></p><ul><li>编译时不强制处理</li><li>程序运行时发生</li><li>可以通过代码避免</li></ul></li><li><p><strong>编译时异常（Checked Exception）</strong></p><ul><li>编译时必须处理</li><li>否则编译不通过</li><li>通常是外部因素导致</li></ul></li></ol><hr><h2 id="三、常见的运行时异常" tabindex="-1"><a class="header-anchor" href="#三、常见的运行时异常"><span>三、常见的运行时异常</span></a></h2><h3 id="_3-1-nullpointerexception-空指针异常" tabindex="-1"><a class="header-anchor" href="#_3-1-nullpointerexception-空指针异常"><span>3.1 NullPointerException（空指针异常）</span></a></h3><p><strong>发生原因：</strong> 对 null 对象调用方法或访问属性。</p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// NullPointerException</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name 为 null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-2-arithmeticexception-算术异常" tabindex="-1"><a class="header-anchor" href="#_3-2-arithmeticexception-算术异常"><span>3.2 ArithmeticException（算术异常）</span></a></h3><p><strong>发生原因：</strong> 数学运算异常，如除数为0。</p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> res <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>  <span class="token comment">// ArithmeticException: / by zero</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>num2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> res <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;除数不能为0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-3-arrayindexoutofboundsexception-数组越界异常" tabindex="-1"><a class="header-anchor" href="#_3-3-arrayindexoutofboundsexception-数组越界异常"><span>3.3 ArrayIndexOutOfBoundsException（数组越界异常）</span></a></h3><p><strong>发生原因：</strong> 访问数组时索引超出范围。</p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 注意：i &lt;= arr.length</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 当i=3时，ArrayIndexOutOfBoundsException</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 改为 i &lt; arr.length</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-4-classcastexception-类型转换异常" tabindex="-1"><a class="header-anchor" href="#_3-4-classcastexception-类型转换异常"><span>3.4 ClassCastException（类型转换异常）</span></a></h3><p><strong>发生原因：</strong> 强制类型转换时，对象类型不匹配。</p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 向上转型</span></span>
<span class="line">        <span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>       <span class="token comment">// 正确的向下转型</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>       <span class="token comment">// ❌ ClassCastException</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;类型不匹配，无法转换&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-5-numberformatexception-数字格式异常" tabindex="-1"><a class="header-anchor" href="#_3-5-numberformatexception-数字格式异常"><span>3.5 NumberFormatException（数字格式异常）</span></a></h3><p><strong>发生原因：</strong> 将不能转换为数字的字符串转换为数字。</p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// NumberFormatException</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字符串格式不正确：&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、异常处理方式" tabindex="-1"><a class="header-anchor" href="#四、异常处理方式"><span>四、异常处理方式</span></a></h2><h3 id="_4-1-try-catch-finally" tabindex="-1"><a class="header-anchor" href="#_4-1-try-catch-finally"><span>4.1 try-catch-finally</span></a></h3><p><strong>语法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 可能出现异常的代码</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">1</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理异常类型1</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">2</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理异常类型2</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 无论是否发生异常，都会执行</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行流程：</strong></p><ol><li>执行 try 块中的代码</li><li>如果没有异常，跳过 catch 块</li><li>如果有异常，匹配对应的 catch 块</li><li>无论是否有异常，都执行 finally 块</li></ol><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryCatchDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">int</span> res <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>  <span class="token comment">// 会抛出 ArithmeticException</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结果：&quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出现算术异常：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出现其他异常：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无论如何都会执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序继续运行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-catch-块的注意事项" tabindex="-1"><a class="header-anchor" href="#_4-2-catch-块的注意事项"><span>4.2 catch 块的注意事项</span></a></h3><p><strong>1. 可以有多个 catch 块</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理空指针异常</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理算术异常</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理其他所有异常</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 子类异常要放在父类异常前面</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// ✅ 正确：子类在前</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 具体异常</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 父类异常</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ❌ 错误：父类在前，子类永远捕获不到</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 父类异常（会捕获所有异常）</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 编译错误</span></span>
<span class="line">    <span class="token comment">// 子类异常</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. JDK 7 可以一次捕获多个异常</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> <span class="token operator">|</span> <span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;捕获到异常：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-finally-块的特点" tabindex="-1"><a class="header-anchor" href="#_4-3-finally-块的特点"><span>4.3 finally 块的特点</span></a></h3><p><strong>特点：</strong></p><ol><li>无论是否发生异常，finally 块都会执行</li><li>通常用于释放资源（关闭文件、数据库连接等）</li><li>即使 try 或 catch 中有 return，finally 也会执行</li></ol><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinallyDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 不会执行</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 会执行，但在 finally 之后</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;finally 块执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先执行</span></span>
<span class="line">            <span class="token comment">// 如果这里有 return，会覆盖 catch 中的 return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 输出：</span></span>
<span class="line">        <span class="token comment">// finally 块执行</span></span>
<span class="line">        <span class="token comment">// result = 2</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result = &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 只有以下情况 finally 不会执行：</p><ul><li>JVM 退出：<code>System.exit(0);</code></li><li>守护线程结束</li></ul><h3 id="_4-4-throws-抛出异常" tabindex="-1"><a class="header-anchor" href="#_4-4-throws-抛出异常"><span>4.4 throws（抛出异常）</span></a></h3><p><strong>作用：</strong> 将异常抛给调用者处理。</p><p><strong>语法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">访问修饰符 返回类型 方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常类型<span class="token number">1</span><span class="token punctuation">,</span> 异常类型<span class="token number">2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 方法体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowsDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 方法声明抛出异常</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 不在这里处理异常，而是抛给调用者</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 继续往上抛</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在这里处理异常</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件读取失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-throw-手动抛出异常" tabindex="-1"><a class="header-anchor" href="#_4-5-throw-手动抛出异常"><span>4.5 throw（手动抛出异常）</span></a></h3><p><strong>作用：</strong> 手动创建并抛出异常对象。</p><p><strong>语法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类型<span class="token punctuation">(</span><span class="token string">&quot;异常信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> age <span class="token operator">&gt;</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 手动抛出异常</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;年龄必须在0-150之间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;年龄设置为：&quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 会抛出异常</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;参数错误：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-throw-vs-throws" tabindex="-1"><a class="header-anchor" href="#_4-6-throw-vs-throws"><span>4.6 throw vs throws</span></a></h3><table><thead><tr><th>特性</th><th>throw</th><th>throws</th></tr></thead><tbody><tr><td><strong>位置</strong></td><td>方法体内</td><td>方法声明处</td></tr><tr><td><strong>作用</strong></td><td>手动抛出异常对象</td><td>声明方法可能抛出的异常</td></tr><tr><td><strong>后面跟的</strong></td><td>异常对象</td><td>异常类型</td></tr><tr><td><strong>数量</strong></td><td>一次只能抛一个</td><td>可以声明多个</td></tr></tbody></table><p><strong>示例对比：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// throws：在方法声明处</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 方法体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// throw：在方法体内</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、自定义异常" tabindex="-1"><a class="header-anchor" href="#五、自定义异常"><span>五、自定义异常</span></a></h2><h3 id="_5-1-为什么需要自定义异常" tabindex="-1"><a class="header-anchor" href="#_5-1-为什么需要自定义异常"><span>5.1 为什么需要自定义异常</span></a></h3><p><strong>原因：</strong> Java 提供的异常类不能满足所有需求，需要自定义异常来表示特定的业务错误。</p><h3 id="_5-2-自定义异常的步骤" tabindex="-1"><a class="header-anchor" href="#_5-2-自定义异常的步骤"><span>5.2 自定义异常的步骤</span></a></h3><p><strong>步骤：</strong></p><ol><li>创建一个类，继承 <code>Exception</code>（编译时异常）或 <code>RuntimeException</code>（运行时异常）</li><li>提供构造器</li></ol><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 自定义运行时异常</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">AgeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 自定义编译时异常</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">BalanceException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">BalanceException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-使用自定义异常" tabindex="-1"><a class="header-anchor" href="#_5-3-使用自定义异常"><span>5.3 使用自定义异常</span></a></h3><p><strong>示例：完整的自定义异常应用</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 1. 自定义异常类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">AgeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 使用自定义异常</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> age <span class="token operator">&gt;</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 抛出自定义异常</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token string">&quot;年龄必须在0-150之间，当前输入：&quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> age<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 测试</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 会抛出 AgeException</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AgeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;捕获到自定义异常：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、面试常见问题" tabindex="-1"><a class="header-anchor" href="#六、面试常见问题"><span>六、面试常见问题</span></a></h2><h3 id="q1-error-和-exception-的区别" tabindex="-1"><a class="header-anchor" href="#q1-error-和-exception-的区别"><span>Q1: Error 和 Exception 的区别？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>Error</th><th>Exception</th></tr></thead><tbody><tr><td>严重程度</td><td>严重错误</td><td>一般性问题</td></tr><tr><td>可处理性</td><td>不可处理</td><td>可以处理</td></tr><tr><td>是否捕获</td><td>不应该捕获</td><td>应该捕获</td></tr><tr><td>示例</td><td>OutOfMemoryError</td><td>IOException</td></tr></tbody></table><hr><h3 id="q2-运行时异常和编译时异常的区别" tabindex="-1"><a class="header-anchor" href="#q2-运行时异常和编译时异常的区别"><span>Q2: 运行时异常和编译时异常的区别？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>运行时异常</th><th>编译时异常</th></tr></thead><tbody><tr><td>父类</td><td>RuntimeException</td><td>Exception</td></tr><tr><td>是否强制处理</td><td>不强制</td><td>必须处理</td></tr><tr><td>发生时机</td><td>运行时</td><td>编译时检查</td></tr><tr><td>示例</td><td>NullPointerException</td><td>IOException</td></tr></tbody></table><hr><h3 id="q3-finally-块一定会执行吗" tabindex="-1"><a class="header-anchor" href="#q3-finally-块一定会执行吗"><span>Q3: finally 块一定会执行吗？</span></a></h3><p><strong>答案：</strong></p><p>几乎一定会执行，但以下情况不会执行：</p><ol><li>JVM 退出（<code>System.exit(0);</code>）</li><li>守护线程结束</li><li>死循环或死锁</li></ol><hr><h3 id="q4-try-catch-finally-的执行顺序" tabindex="-1"><a class="header-anchor" href="#q4-try-catch-finally-的执行顺序"><span>Q4: try-catch-finally 的执行顺序？</span></a></h3><p><strong>答案：</strong></p><ol><li>执行 try 块</li><li>如果有异常，执行对应的 catch 块</li><li>无论是否有异常，都执行 finally 块</li><li>如果 try 或 catch 中有 return，finally 会在 return 之前执行</li></ol><hr><h3 id="q5-throw-和-throws-的区别" tabindex="-1"><a class="header-anchor" href="#q5-throw-和-throws-的区别"><span>Q5: throw 和 throws 的区别？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>throw</th><th>throws</th></tr></thead><tbody><tr><td>位置</td><td>方法体内</td><td>方法声明处</td></tr><tr><td>作用</td><td>手动抛出异常对象</td><td>声明方法可能抛出的异常</td></tr><tr><td>后面跟</td><td>异常对象</td><td>异常类型</td></tr></tbody></table><hr>`,139)),a("p",null,[n[1]||(n[1]=a("strong",null,"上一章：",-1)),n[2]||(n[2]=s()),p(t,{to:"/tutorials/java-backend/java/%E7%AC%AC03%E7%AB%A0-%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B/01-%E6%9E%9A%E4%B8%BE%E4%B8%8E%E6%B3%A8%E8%A7%A3%EF%BC%88%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89.html"},{default:e(()=>[...n[0]||(n[0]=[s("枚举与注解",-1)])]),_:1})]),a("p",null,[n[4]||(n[4]=a("strong",null,"下一章：",-1)),n[5]||(n[5]=s()),p(t,{to:"/tutorials/java-backend/java/%E7%AC%AC03%E7%AB%A0-%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B/03-%E5%B8%B8%E7%94%A8%E7%B1%BB.html"},{default:e(()=>[...n[3]||(n[3]=[s("常用类",-1)])]),_:1}),n[6]||(n[6]=s(" →",-1))])])}const v=l(r,[["render",d]]),h=JSON.parse('{"path":"/tutorials/java-backend/java/di03zhang-jinjiebiancheng/02-yichangchuli.html","title":"Java 异常处理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"一、异常处理机制","slug":"一、异常处理机制","link":"#一、异常处理机制","children":[{"level":3,"title":"1.1 为什么需要异常处理","slug":"_1-1-为什么需要异常处理","link":"#_1-1-为什么需要异常处理","children":[]},{"level":3,"title":"1.2 异常处理的好处","slug":"_1-2-异常处理的好处","link":"#_1-2-异常处理的好处","children":[]},{"level":3,"title":"1.3 快速生成 try-catch","slug":"_1-3-快速生成-try-catch","link":"#_1-3-快速生成-try-catch","children":[]}]},{"level":2,"title":"二、异常体系","slug":"二、异常体系","link":"#二、异常体系","children":[{"level":3,"title":"2.1 异常的定义","slug":"_2-1-异常的定义","link":"#_2-1-异常的定义","children":[]},{"level":3,"title":"2.2 异常体系结构","slug":"_2-2-异常体系结构","link":"#_2-2-异常体系结构","children":[]},{"level":3,"title":"2.3 Error vs Exception","slug":"_2-3-error-vs-exception","link":"#_2-3-error-vs-exception","children":[]}]},{"level":2,"title":"三、常见的运行时异常","slug":"三、常见的运行时异常","link":"#三、常见的运行时异常","children":[{"level":3,"title":"3.1 NullPointerException（空指针异常）","slug":"_3-1-nullpointerexception-空指针异常","link":"#_3-1-nullpointerexception-空指针异常","children":[]},{"level":3,"title":"3.2 ArithmeticException（算术异常）","slug":"_3-2-arithmeticexception-算术异常","link":"#_3-2-arithmeticexception-算术异常","children":[]},{"level":3,"title":"3.3 ArrayIndexOutOfBoundsException（数组越界异常）","slug":"_3-3-arrayindexoutofboundsexception-数组越界异常","link":"#_3-3-arrayindexoutofboundsexception-数组越界异常","children":[]},{"level":3,"title":"3.4 ClassCastException（类型转换异常）","slug":"_3-4-classcastexception-类型转换异常","link":"#_3-4-classcastexception-类型转换异常","children":[]},{"level":3,"title":"3.5 NumberFormatException（数字格式异常）","slug":"_3-5-numberformatexception-数字格式异常","link":"#_3-5-numberformatexception-数字格式异常","children":[]}]},{"level":2,"title":"四、异常处理方式","slug":"四、异常处理方式","link":"#四、异常处理方式","children":[{"level":3,"title":"4.1 try-catch-finally","slug":"_4-1-try-catch-finally","link":"#_4-1-try-catch-finally","children":[]},{"level":3,"title":"4.2 catch 块的注意事项","slug":"_4-2-catch-块的注意事项","link":"#_4-2-catch-块的注意事项","children":[]},{"level":3,"title":"4.3 finally 块的特点","slug":"_4-3-finally-块的特点","link":"#_4-3-finally-块的特点","children":[]},{"level":3,"title":"4.4 throws（抛出异常）","slug":"_4-4-throws-抛出异常","link":"#_4-4-throws-抛出异常","children":[]},{"level":3,"title":"4.5 throw（手动抛出异常）","slug":"_4-5-throw-手动抛出异常","link":"#_4-5-throw-手动抛出异常","children":[]},{"level":3,"title":"4.6 throw vs throws","slug":"_4-6-throw-vs-throws","link":"#_4-6-throw-vs-throws","children":[]}]},{"level":2,"title":"五、自定义异常","slug":"五、自定义异常","link":"#五、自定义异常","children":[{"level":3,"title":"5.1 为什么需要自定义异常","slug":"_5-1-为什么需要自定义异常","link":"#_5-1-为什么需要自定义异常","children":[]},{"level":3,"title":"5.2 自定义异常的步骤","slug":"_5-2-自定义异常的步骤","link":"#_5-2-自定义异常的步骤","children":[]},{"level":3,"title":"5.3 使用自定义异常","slug":"_5-3-使用自定义异常","link":"#_5-3-使用自定义异常","children":[]}]},{"level":2,"title":"六、面试常见问题","slug":"六、面试常见问题","link":"#六、面试常见问题","children":[{"level":3,"title":"Q1: Error 和 Exception 的区别？","slug":"q1-error-和-exception-的区别","link":"#q1-error-和-exception-的区别","children":[]},{"level":3,"title":"Q2: 运行时异常和编译时异常的区别？","slug":"q2-运行时异常和编译时异常的区别","link":"#q2-运行时异常和编译时异常的区别","children":[]},{"level":3,"title":"Q3: finally 块一定会执行吗？","slug":"q3-finally-块一定会执行吗","link":"#q3-finally-块一定会执行吗","children":[]},{"level":3,"title":"Q4: try-catch-finally 的执行顺序？","slug":"q4-try-catch-finally-的执行顺序","link":"#q4-try-catch-finally-的执行顺序","children":[]},{"level":3,"title":"Q5: throw 和 throws 的区别？","slug":"q5-throw-和-throws-的区别","link":"#q5-throw-和-throws-的区别","children":[]}]}],"git":{"createdTime":1760859744000,"updatedTime":1760959407000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java-backend/java/第03章-进阶编程/02-异常处理.md"}');export{v as comp,h as data};
