import{_ as e,c as t,d as l,e as s,f as a,b as o,w as c,r as i,o as u}from"./app-I6OnLCmc.js";const r={};function d(k,n){const p=i("RouteLink");return u(),t("div",null,[n[3]||(n[3]=l(`<h1 id="文本预处理" tabindex="-1"><a class="header-anchor" href="#文本预处理"><span>文本预处理</span></a></h1><blockquote><p>掌握文本清洗和标准化技术</p></blockquote><h2 id="📚-学习目标" tabindex="-1"><a class="header-anchor" href="#📚-学习目标"><span>📚 学习目标</span></a></h2><ul><li>掌握文本清洗方法</li><li>学会去除停用词</li><li>理解词干提取和词形还原</li><li>掌握文本标准化</li></ul><h2 id="_1-文本清洗" tabindex="-1"><a class="header-anchor" href="#_1-文本清洗"><span>1. 文本清洗</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> re</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">clean_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 转小写</span></span>
<span class="line">    text <span class="token operator">=</span> text<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 去除URL</span></span>
<span class="line">    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;http\\S+|www.\\S+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 去除HTML标签</span></span>
<span class="line">    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;&lt;.*?&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 去除邮箱</span></span>
<span class="line">    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;\\S+@\\S+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 去除特殊字符（保留中英文和数字）</span></span>
<span class="line">    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;[^\\w\\s\\u4e00-\\u9fff]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 去除多余空格</span></span>
<span class="line">    text <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> text</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 示例</span></span>
<span class="line">text <span class="token operator">=</span> <span class="token string">&quot;访问 https://example.com 查看详情！！！&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>clean_text<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-去除停用词" tabindex="-1"><a class="header-anchor" href="#_2-去除停用词"><span>2. 去除停用词</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> jieba</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 中文停用词</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">load_stopwords</span><span class="token punctuation">(</span>file_path<span class="token operator">=</span><span class="token string">&#39;stopwords.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">remove_stopwords</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> stopwords<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>w <span class="token keyword">for</span> w <span class="token keyword">in</span> words <span class="token keyword">if</span> w <span class="token keyword">not</span> <span class="token keyword">in</span> stopwords <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 英文停用词</span></span>
<span class="line"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwords</span>
<span class="line"></span>
<span class="line">stop_words <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token string">&#39;english&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">text <span class="token operator">=</span> <span class="token string">&quot;This is a sample sentence&quot;</span></span>
<span class="line">words <span class="token operator">=</span> <span class="token punctuation">[</span>w <span class="token keyword">for</span> w <span class="token keyword">in</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> w<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-词干提取和词形还原" tabindex="-1"><a class="header-anchor" href="#_3-词干提取和词形还原"><span>3. 词干提取和词形还原</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>stem <span class="token keyword">import</span> PorterStemmer<span class="token punctuation">,</span> WordNetLemmatizer</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 词干提取</span></span>
<span class="line">stemmer <span class="token operator">=</span> PorterStemmer<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;running&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;runs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ran&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;runner&quot;</span><span class="token punctuation">]</span></span>
<span class="line">stems <span class="token operator">=</span> <span class="token punctuation">[</span>stemmer<span class="token punctuation">.</span>stem<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>stems<span class="token punctuation">)</span>  <span class="token comment"># [&#39;run&#39;, &#39;run&#39;, &#39;ran&#39;, &#39;runner&#39;]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 词形还原</span></span>
<span class="line">lemmatizer <span class="token operator">=</span> WordNetLemmatizer<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">lemmas <span class="token operator">=</span> <span class="token punctuation">[</span>lemmatizer<span class="token punctuation">.</span>lemmatize<span class="token punctuation">(</span>w<span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token string">&#39;v&#39;</span><span class="token punctuation">)</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>lemmas<span class="token punctuation">)</span>  <span class="token comment"># [&#39;run&#39;, &#39;run&#39;, &#39;run&#39;, &#39;runner&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-文本标准化" tabindex="-1"><a class="header-anchor" href="#_4-文本标准化"><span>4. 文本标准化</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 繁简转换</span></span>
<span class="line"><span class="token keyword">from</span> opencc <span class="token keyword">import</span> OpenCC</span>
<span class="line"></span>
<span class="line">cc <span class="token operator">=</span> OpenCC<span class="token punctuation">(</span><span class="token string">&#39;t2s&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 繁体转简体</span></span>
<span class="line">text <span class="token operator">=</span> <span class="token string">&quot;繁體中文&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>convert<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 简体中文</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 全角半角转换</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">strQ2B</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    rstring <span class="token operator">=</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">for</span> char <span class="token keyword">in</span> text<span class="token punctuation">:</span></span>
<span class="line">        code <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> code <span class="token operator">==</span> <span class="token number">0x3000</span><span class="token punctuation">:</span></span>
<span class="line">            code <span class="token operator">=</span> <span class="token number">0x0020</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            code <span class="token operator">-=</span> <span class="token number">0xfee0</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token number">0x0021</span> <span class="token operator">&lt;=</span> code <span class="token operator">&lt;=</span> <span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            rstring <span class="token operator">+=</span> char</span>
<span class="line">            <span class="token keyword">continue</span></span>
<span class="line">        rstring <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> rstring</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,13)),s("p",null,[n[1]||(n[1]=s("strong",null,"下一节：",-1)),n[2]||(n[2]=a()),o(p,{to:"/tutorials/python-ai/nlp/03-%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D.html"},{default:c(()=>[...n[0]||(n[0]=[a("中文分词",-1)])]),_:1})])])}const v=e(r,[["render",d]]),b=JSON.parse('{"path":"/tutorials/python-ai/nlp/02-wenbenyuchuli.html","title":"文本预处理","lang":"zh-CN","frontmatter":{"title":"文本预处理"},"headers":[{"level":2,"title":"📚 学习目标","slug":"📚-学习目标","link":"#📚-学习目标","children":[]},{"level":2,"title":"1. 文本清洗","slug":"_1-文本清洗","link":"#_1-文本清洗","children":[]},{"level":2,"title":"2. 去除停用词","slug":"_2-去除停用词","link":"#_2-去除停用词","children":[]},{"level":2,"title":"3. 词干提取和词形还原","slug":"_3-词干提取和词形还原","link":"#_3-词干提取和词形还原","children":[]},{"level":2,"title":"4. 文本标准化","slug":"_4-文本标准化","link":"#_4-文本标准化","children":[]}],"git":{"createdTime":1761052725000,"updatedTime":1761052725000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/python-ai/nlp/02-文本预处理.md"}');export{v as comp,b as data};
