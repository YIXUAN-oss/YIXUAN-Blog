import{_ as i,c,d as o,e as n,f as a,b as e,w as r,r as p,o as u}from"./app-QnWV-YHu.js";const d={},k={href:"https://www.typescriptlang.org/tsconfig#strict",target:"_blank",rel:"noopener noreferrer"};function v(m,s){const t=p("ExternalLinkIcon"),l=p("RouteLink");return u(),c("div",null,[s[4]||(s[4]=o(`<h1 id="类型安全最佳实践" tabindex="-1"><a class="header-anchor" href="#类型安全最佳实践"><span>类型安全最佳实践</span></a></h1><blockquote><p>编写健壮的 TypeScript 代码</p></blockquote><h2 id="🛡️-类型设计原则" tabindex="-1"><a class="header-anchor" href="#🛡️-类型设计原则"><span>🛡️ 类型设计原则</span></a></h2><h3 id="_1-优先使用类型推导" tabindex="-1"><a class="header-anchor" href="#_1-优先使用类型推导"><span>1. 优先使用类型推导</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// ❌ 不必要的类型注解</span></span>
<span class="line"><span class="token keyword">const</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Alice&#39;</span></span>
<span class="line"><span class="token keyword">const</span> count<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 让 TypeScript 推导</span></span>
<span class="line"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Alice&#39;</span></span>
<span class="line"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用严格的类型" tabindex="-1"><a class="header-anchor" href="#_2-使用严格的类型"><span>2. 使用严格的类型</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// ❌ 避免使用 any</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> data</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 使用具体类型</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">process</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> data</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 或使用 unknown</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="✅-null-安全" tabindex="-1"><a class="header-anchor" href="#✅-null-安全"><span>✅ null 安全</span></a></h2><h3 id="可选链操作符" tabindex="-1"><a class="header-anchor" href="#可选链操作符"><span>可选链操作符</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  address<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    city<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">    street<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> user<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 安全访问</span></span>
<span class="line"><span class="token keyword">const</span> city <span class="token operator">=</span> user<span class="token punctuation">.</span>address<span class="token operator">?.</span>city <span class="token operator">??</span> <span class="token string">&#39;未知城市&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ❌ 不安全</span></span>
<span class="line"><span class="token keyword">const</span> city <span class="token operator">=</span> user<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city  <span class="token comment">// 可能报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="空值合并" tabindex="-1"><a class="header-anchor" href="#空值合并"><span>空值合并</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// ✅ 使用 ??</span></span>
<span class="line"><span class="token keyword">const</span> value <span class="token operator">=</span> input <span class="token operator">??</span> defaultValue</span>
<span class="line"></span>
<span class="line"><span class="token comment">// ❌ 使用 ||（会将 0、&#39;&#39; 等视为假值）</span></span>
<span class="line"><span class="token keyword">const</span> value <span class="token operator">=</span> input <span class="token operator">||</span> defaultValue</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎯-类型守卫" tabindex="-1"><a class="header-anchor" href="#🎯-类型守卫"><span>🎯 类型守卫</span></a></h2><h3 id="自定义类型守卫" tabindex="-1"><a class="header-anchor" href="#自定义类型守卫"><span>自定义类型守卫</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span>pet<span class="token operator">:</span> Fish <span class="token operator">|</span> Bird<span class="token punctuation">)</span><span class="token operator">:</span> pet <span class="token keyword">is</span> Fish <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>pet <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">!==</span> <span class="token keyword">undefined</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span>pet<span class="token operator">:</span> Fish <span class="token operator">|</span> Bird<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFish</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    pet<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    pet<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="❌-错误处理" tabindex="-1"><a class="header-anchor" href="#❌-错误处理"><span>❌ 错误处理</span></a></h2><h3 id="result-类型模式" tabindex="-1"><a class="header-anchor" href="#result-类型模式"><span>Result 类型模式</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Result<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">E</span> <span class="token operator">=</span> Error<span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token operator">|</span> <span class="token punctuation">{</span> success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span> value<span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token punctuation">{</span> success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> error<span class="token operator">:</span> <span class="token constant">E</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Result<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">      error<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;除数不能为0&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    value<span class="token operator">:</span> a <span class="token operator">/</span> b</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用</span></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="💡-最佳实践" tabindex="-1"><a class="header-anchor" href="#💡-最佳实践"><span>💡 最佳实践</span></a></h2><h3 id="_1-启用严格模式" tabindex="-1"><a class="header-anchor" href="#_1-启用严格模式"><span>1. 启用严格模式</span></a></h3><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token comment">// tsconfig.json</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-避免类型断言" tabindex="-1"><a class="header-anchor" href="#_2-避免类型断言"><span>2. 避免类型断言</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// ❌ 避免</span></span>
<span class="line"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 使用类型守卫</span></span>
<span class="line"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用-const-断言" tabindex="-1"><a class="header-anchor" href="#_3-使用-const-断言"><span>3. 使用 const 断言</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// const 断言</span></span>
<span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  apiUrl<span class="token operator">:</span> <span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  timeout<span class="token operator">:</span> <span class="token number">3000</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// config.apiUrl = &#39;other&#39;  // ❌ 只读</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📚-参考资源" tabindex="-1"><a class="header-anchor" href="#📚-参考资源"><span>📚 参考资源</span></a></h2>`,26)),n("ul",null,[n("li",null,[n("a",k,[s[0]||(s[0]=a("TypeScript 严格模式",-1)),e(t)])])]),s[5]||(s[5]=n("hr",null,null,-1)),n("p",null,[s[2]||(s[2]=n("strong",null,"下一节",-1)),s[3]||(s[3]=a(" → ",-1)),e(l,{to:"/tutorials/harmonyos-dev/02-arkts-advanced/06-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7.html"},{default:r(()=>[...s[1]||(s[1]=[a("性能优化技巧",-1)])]),_:1})])])}const h=i(d,[["render",v]]),y=JSON.parse('{"path":"/tutorials/harmonyos-dev/02-arkts-advanced/05-leixinganquanzuijiashijian.html","title":"类型安全最佳实践","lang":"zh-CN","frontmatter":{"title":"类型安全最佳实践","date":"2025-01-22T00:00:00.000Z"},"headers":[{"level":2,"title":"🛡️ 类型设计原则","slug":"🛡️-类型设计原则","link":"#🛡️-类型设计原则","children":[{"level":3,"title":"1. 优先使用类型推导","slug":"_1-优先使用类型推导","link":"#_1-优先使用类型推导","children":[]},{"level":3,"title":"2. 使用严格的类型","slug":"_2-使用严格的类型","link":"#_2-使用严格的类型","children":[]}]},{"level":2,"title":"✅ null 安全","slug":"✅-null-安全","link":"#✅-null-安全","children":[{"level":3,"title":"可选链操作符","slug":"可选链操作符","link":"#可选链操作符","children":[]},{"level":3,"title":"空值合并","slug":"空值合并","link":"#空值合并","children":[]}]},{"level":2,"title":"🎯 类型守卫","slug":"🎯-类型守卫","link":"#🎯-类型守卫","children":[{"level":3,"title":"自定义类型守卫","slug":"自定义类型守卫","link":"#自定义类型守卫","children":[]}]},{"level":2,"title":"❌ 错误处理","slug":"❌-错误处理","link":"#❌-错误处理","children":[{"level":3,"title":"Result 类型模式","slug":"result-类型模式","link":"#result-类型模式","children":[]}]},{"level":2,"title":"💡 最佳实践","slug":"💡-最佳实践","link":"#💡-最佳实践","children":[{"level":3,"title":"1. 启用严格模式","slug":"_1-启用严格模式","link":"#_1-启用严格模式","children":[]},{"level":3,"title":"2. 避免类型断言","slug":"_2-避免类型断言","link":"#_2-避免类型断言","children":[]},{"level":3,"title":"3. 使用 const 断言","slug":"_3-使用-const-断言","link":"#_3-使用-const-断言","children":[]}]},{"level":2,"title":"📚 参考资源","slug":"📚-参考资源","link":"#📚-参考资源","children":[]}],"git":{"createdTime":1761123387000,"updatedTime":1761123387000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/harmonyos-dev/02-arkts-advanced/05-类型安全最佳实践.md"}');export{h as comp,y as data};
