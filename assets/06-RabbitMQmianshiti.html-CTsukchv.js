import{_ as i,c,d as e,e as a,f as s,b as p,w as l,r as o,o as u}from"./app-DnBTedau.js";const r={};function d(k,n){const t=o("RouteLink");return u(),c("div",null,[n[5]||(n[5]=e(`<h1 id="_06-rabbitmq面试题" tabindex="-1"><a class="header-anchor" href="#_06-rabbitmq面试题"><span>06 - RabbitMQ面试题</span></a></h1><h2 id="🎯-基础知识" tabindex="-1"><a class="header-anchor" href="#🎯-基础知识"><span>🎯 基础知识</span></a></h2><h3 id="_1-什么是rabbitmq-有什么特点" tabindex="-1"><a class="header-anchor" href="#_1-什么是rabbitmq-有什么特点"><span>1. 什么是RabbitMQ？有什么特点？</span></a></h3><p><strong>答案：</strong> RabbitMQ是基于AMQP协议的开源消息队列中间件，使用Erlang语言开发。</p><p><strong>特点：</strong></p><ul><li>可靠性：持久化、确认机制、镜像队列</li><li>灵活路由：多种交换机类型</li><li>高可用：集群、镜像队列</li><li>多语言支持：Java、Python、Go等</li><li>管理界面：Web控制台</li><li>插件系统：丰富的插件生态</li></ul><h3 id="_2-rabbitmq的核心概念有哪些" tabindex="-1"><a class="header-anchor" href="#_2-rabbitmq的核心概念有哪些"><span>2. RabbitMQ的核心概念有哪些？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>Producer</td><td>消息生产者</td></tr><tr><td>Consumer</td><td>消息消费者</td></tr><tr><td>Exchange</td><td>交换机，负责路由消息</td></tr><tr><td>Queue</td><td>队列，存储消息</td></tr><tr><td>Binding</td><td>绑定，Exchange和Queue的关系</td></tr><tr><td>Routing Key</td><td>路由键</td></tr><tr><td>Virtual Host</td><td>虚拟主机，隔离</td></tr><tr><td>Connection</td><td>TCP连接</td></tr><tr><td>Channel</td><td>信道，复用连接</td></tr></tbody></table><h3 id="_3-rabbitmq的交换机类型有哪些" tabindex="-1"><a class="header-anchor" href="#_3-rabbitmq的交换机类型有哪些"><span>3. RabbitMQ的交换机类型有哪些？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. Direct（直连）</strong></p><ul><li>精确匹配routing key</li><li>适用场景：错误日志路由</li></ul><p><strong>2. Fanout（广播）</strong></p><ul><li>发送到所有绑定的队列</li><li>适用场景：群发通知</li></ul><p><strong>3. Topic（主题）</strong></p><ul><li>模式匹配（<code>*</code>匹配一个单词，<code>#</code>匹配多个）</li><li>适用场景：复杂路由规则</li></ul><p><strong>4. Headers（头部）</strong></p><ul><li>根据消息头属性匹配</li><li>使用较少</li></ul><h3 id="_4-如何保证消息不丢失" tabindex="-1"><a class="header-anchor" href="#_4-如何保证消息不丢失"><span>4. 如何保证消息不丢失？</span></a></h3><p><strong>答案：三个阶段保证</strong></p><p><strong>1. 生产者到Exchange</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 开启发送方确认</span></span>
<span class="line">channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. Exchange到Queue</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 消息持久化</span></span>
<span class="line">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> queue<span class="token punctuation">,</span> </span>
<span class="line">    <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT_TEXT_PLAIN</span><span class="token punctuation">,</span> </span>
<span class="line">    message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. Queue到Consumer</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 手动ACK</span></span>
<span class="line">channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-如何保证消息不被重复消费" tabindex="-1"><a class="header-anchor" href="#_5-如何保证消息不被重复消费"><span>5. 如何保证消息不被重复消费？</span></a></h3><p><strong>答案：实现幂等性</strong></p><p><strong>方式1：使用唯一ID</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;order.queue&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> messageId <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Redis去重</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>messageId<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 处理消息</span></span>
<span class="line">        <span class="token function">processMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2：数据库唯一索引</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> idx_order_id <span class="token keyword">ON</span> orders<span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_6-什么是死信队列-有什么用" tabindex="-1"><a class="header-anchor" href="#_6-什么是死信队列-有什么用"><span>6. 什么是死信队列？有什么用？</span></a></h3><p><strong>答案：</strong></p><p><strong>死信（Dead Letter）产生原因：</strong></p><ul><li>消息被拒绝（basic.reject/basic.nack）且requeue=false</li><li>消息TTL过期</li><li>队列达到最大长度</li></ul><p><strong>用途：</strong></p><ul><li>异常消息处理</li><li>延迟队列实现</li><li>消息重试</li></ul><p><strong>配置示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dlx.exchange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dlx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;normal.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔥-进阶问题" tabindex="-1"><a class="header-anchor" href="#🔥-进阶问题"><span>🔥 进阶问题</span></a></h2><h3 id="_7-rabbitmq如何实现延迟队列" tabindex="-1"><a class="header-anchor" href="#_7-rabbitmq如何实现延迟队列"><span>7. RabbitMQ如何实现延迟队列？</span></a></h3><p><strong>答案：两种方式</strong></p><p><strong>方式1：TTL + 死信队列</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 延迟队列（无消费者）</span></span>
<span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;order.exchange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;order.cancel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">1800000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30分钟</span></span>
<span class="line"></span>
<span class="line">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;delay.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2：延迟插件（推荐）</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_delayed_message_exchange</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-delayed-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;delayed.exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x-delayed-message&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 发送时设置延迟时间</span></span>
<span class="line"><span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">&quot;x-delay&quot;</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-rabbitmq集群模式有哪些" tabindex="-1"><a class="header-anchor" href="#_8-rabbitmq集群模式有哪些"><span>8. RabbitMQ集群模式有哪些？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 普通集群</strong></p><ul><li>队列只在一个节点存储</li><li>其他节点只有元数据</li><li>消费时从存储节点拉取</li></ul><p><strong>2. 镜像队列</strong></p><ul><li>队列在所有节点同步</li><li>高可用，节点故障不影响</li><li>性能有所下降</li></ul><p><strong>3. 仲裁队列（Quorum Queue）</strong></p><ul><li>基于Raft协议</li><li>更高的数据一致性</li><li>RabbitMQ 3.8+</li></ul><h3 id="_9-如何处理消息堆积" tabindex="-1"><a class="header-anchor" href="#_9-如何处理消息堆积"><span>9. 如何处理消息堆积？</span></a></h3><p><strong>答案：</strong></p><p><strong>原因分析：</strong></p><ul><li>生产速度 &gt; 消费速度</li><li>消费者处理慢</li><li>消费者宕机</li></ul><p><strong>解决方案：</strong></p><p><strong>1. 增加消费者</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span></span>
<span class="line">    queues <span class="token operator">=</span> <span class="token string">&quot;order.queue&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    concurrency <span class="token operator">=</span> <span class="token string">&quot;5-10&quot;</span>  <span class="token comment">// 5-10个消费者</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 提高消费速度</strong></p><ul><li>优化业务逻辑</li><li>批量处理</li><li>异步处理</li></ul><p><strong>3. 限流</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 预取100条</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>4. 临时扩容</strong></p><ul><li>启动多个消费者实例</li><li>处理完毕后下线</li></ul><h3 id="_10-rabbitmq如何保证顺序消费" tabindex="-1"><a class="header-anchor" href="#_10-rabbitmq如何保证顺序消费"><span>10. RabbitMQ如何保证顺序消费？</span></a></h3><p><strong>答案：</strong></p><p><strong>方式1：单队列 + 单消费者</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span></span>
<span class="line">    queues <span class="token operator">=</span> <span class="token string">&quot;order.queue&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    concurrency <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span>  <span class="token comment">// 只有1个消费者</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2：分区</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 相同订单ID发到同一队列</span></span>
<span class="line"><span class="token keyword">int</span> queueIndex <span class="token operator">=</span> orderId<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> queueCount<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;order.queue.&quot;</span> <span class="token operator">+</span> queueIndex<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 保证顺序会降低并发性能</p><h3 id="_11-rabbitmq和kafka的区别" tabindex="-1"><a class="header-anchor" href="#_11-rabbitmq和kafka的区别"><span>11. RabbitMQ和Kafka的区别？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>定位</td><td>消息队列</td><td>流处理平台</td></tr><tr><td>吞吐量</td><td>万级</td><td>百万级</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td></tr><tr><td>消息顺序</td><td>一般</td><td>高</td></tr><tr><td>路由功能</td><td>丰富</td><td>简单</td></tr><tr><td>适用场景</td><td>企业应用、RPC</td><td>大数据、日志</td></tr></tbody></table><p><strong>选择建议：</strong></p><ul><li>高吞吐量、日志收集 → Kafka</li><li>复杂路由、可靠性高 → RabbitMQ</li></ul><h2 id="💼-实战问题" tabindex="-1"><a class="header-anchor" href="#💼-实战问题"><span>💼 实战问题</span></a></h2><h3 id="_12-秒杀系统如何使用rabbitmq削峰" tabindex="-1"><a class="header-anchor" href="#_12-秒杀系统如何使用rabbitmq削峰"><span>12. 秒杀系统如何使用RabbitMQ削峰？</span></a></h3><p><strong>答案：</strong></p><p><strong>流程：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">用户请求 → Redis预减库存 → MQ队列 → 异步处理订单</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>实现：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// Controller</span></span>
<span class="line"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/seckill&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">seckill</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. Redis预减库存</span></span>
<span class="line">    <span class="token class-name">Long</span> stock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token string">&quot;stock:&quot;</span> <span class="token operator">+</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&quot;库存不足&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 2. 发送MQ</span></span>
<span class="line">    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;seckill.queue&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">SeckillMessage</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&quot;请求已提交&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Consumer</span></span>
<span class="line"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;seckill.queue&quot;</span><span class="token punctuation">,</span> concurrency <span class="token operator">=</span> <span class="token string">&quot;5-10&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleSeckill</span><span class="token punctuation">(</span><span class="token class-name">SeckillMessage</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 扣减数据库库存</span></span>
<span class="line">    <span class="token comment">// 创建订单</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-如何实现分布式事务" tabindex="-1"><a class="header-anchor" href="#_13-如何实现分布式事务"><span>13. 如何实现分布式事务？</span></a></h3><p><strong>答案：可靠消息最终一致性</strong></p><p><strong>步骤：</strong></p><ol><li>执行本地事务</li><li>记录消息表（同一事务）</li><li>发送MQ消息</li><li>消费者处理（幂等性）</li><li>定时任务补偿失败消息</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transactional</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. 更新订单状态</span></span>
<span class="line">    orderMapper<span class="token punctuation">.</span><span class="token function">updateStatus</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> <span class="token string">&quot;PAID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 2. 记录消息表</span></span>
<span class="line">    <span class="token class-name">TransactionMessage</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    msg<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    msg<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">&quot;SENDING&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    messageMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 3. 发送MQ</span></span>
<span class="line">    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;order.paid&quot;</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 4. 更新消息状态</span></span>
<span class="line">    msg<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">&quot;SENT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    messageMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-如何监控rabbitmq" tabindex="-1"><a class="header-anchor" href="#_14-如何监控rabbitmq"><span>14. 如何监控RabbitMQ？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 管理界面</strong></p><ul><li>队列消息数</li><li>消费速度</li><li>内存使用</li></ul><p><strong>2. HTTP API</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token constant">GET</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">15672</span><span class="token operator">/</span>api<span class="token operator">/</span>queues</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3. Prometheus + Grafana</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_prometheus</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>4. 告警指标</strong></p><ul><li>队列积压 &gt; 10000</li><li>消费速度 &lt; 阈值</li><li>内存使用 &gt; 80%</li></ul><h3 id="_15-rabbitmq性能优化建议" tabindex="-1"><a class="header-anchor" href="#_15-rabbitmq性能优化建议"><span>15. RabbitMQ性能优化建议？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 生产者</strong></p><ul><li>批量发送</li><li>开启发送确认</li><li>使用连接池</li></ul><p><strong>2. 消费者</strong></p><ul><li>合理设置prefetch</li><li>批量ACK</li><li>增加并发数</li></ul><p><strong>3. 队列</strong></p><ul><li>使用惰性队列（大量消息）</li><li>设置TTL</li><li>限制队列长度</li></ul><p><strong>4. 集群</strong></p><ul><li>镜像队列</li><li>负载均衡</li><li>分片存储</li></ul><p><strong>5. 配置优化</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">cache</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">channel</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">50</span></span>
<span class="line">    <span class="token key atrule">listener</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">simple</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">prefetch</span><span class="token punctuation">:</span> <span class="token number">100</span></span>
<span class="line">        <span class="token key atrule">concurrency</span><span class="token punctuation">:</span> 5<span class="token punctuation">-</span><span class="token number">10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎯-高频场景题" tabindex="-1"><a class="header-anchor" href="#🎯-高频场景题"><span>🎯 高频场景题</span></a></h2><h3 id="_16-如何实现订单30分钟自动取消" tabindex="-1"><a class="header-anchor" href="#_16-如何实现订单30分钟自动取消"><span>16. 如何实现订单30分钟自动取消？</span></a></h3>`,118)),a("p",null,[n[1]||(n[1]=a("strong",null,"答案：",-1)),n[2]||(n[2]=s(" 见",-1)),p(t,{to:"/tutorials/java-backend/rabbitmq/04-RabbitMQ%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B.html#%E6%A1%88%E4%BE%8B%E4%B8%80%E8%AE%A2%E5%8D%95%E5%BB%B6%E6%97%B6%E5%8F%96%E6%B6%88"},{default:l(()=>[...n[0]||(n[0]=[s("实战案例-订单延时取消",-1)])]),_:1})]),n[6]||(n[6]=e(`<h3 id="_17-如何保证消费者接收到消息后一定处理成功" tabindex="-1"><a class="header-anchor" href="#_17-如何保证消费者接收到消息后一定处理成功"><span>17. 如何保证消费者接收到消息后一定处理成功？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 手动ACK</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>2. 异常时拒绝消息</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">processMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新入队</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 重试机制</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">listener</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">simple</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">retry</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">          <span class="token key atrule">max-attempts</span><span class="token punctuation">:</span> <span class="token number">3</span></span>
<span class="line">          <span class="token key atrule">initial-interval</span><span class="token punctuation">:</span> <span class="token number">2000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 死信队列兜底</strong></p><h3 id="_18-消息发送失败怎么办" tabindex="-1"><a class="header-anchor" href="#_18-消息发送失败怎么办"><span>18. 消息发送失败怎么办？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 发送方确认</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>correlationData<span class="token punctuation">,</span> ack<span class="token punctuation">,</span> cause<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 重新发送或记录日志</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送失败: {}&quot;</span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 持久化到数据库</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 发送前记录</span></span>
<span class="line">messageMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 发送后更新状态</span></span>
<span class="line">message<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">&quot;SENT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">messageMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 定时补偿</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">60000</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retryFailedMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> failedMessages <span class="token operator">=</span> messageMapper<span class="token punctuation">.</span><span class="token function">selectFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Message</span> msg <span class="token operator">:</span> failedMessages<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="💡-总结" tabindex="-1"><a class="header-anchor" href="#💡-总结"><span>💡 总结</span></a></h2><p><strong>掌握要点：</strong></p><ul><li>✅ 消息可靠性保证（确认机制、持久化、ACK）</li><li>✅ 消息幂等性（唯一ID、数据库索引）</li><li>✅ 死信队列和延迟队列</li><li>✅ 集群和高可用</li><li>✅ 性能优化策略</li><li>✅ 实战应用场景</li></ul><hr><p><strong>RabbitMQ教程完结！</strong> 🎉</p>`,22)),a("p",null,[n[4]||(n[4]=s("继续学习其他技术栈 → ",-1)),p(t,{to:"/tutorials/java-backend/"},{default:l(()=>[...n[3]||(n[3]=[s("返回MQ目录",-1)])]),_:1})])])}const m=i(r,[["render",d]]),v=JSON.parse('{"path":"/tutorials/java-backend/rabbitmq/06-RabbitMQmianshiti.html","title":"RabbitMQ面试题","lang":"zh-CN","frontmatter":{"title":"RabbitMQ面试题"},"headers":[{"level":2,"title":"🎯 基础知识","slug":"🎯-基础知识","link":"#🎯-基础知识","children":[{"level":3,"title":"1. 什么是RabbitMQ？有什么特点？","slug":"_1-什么是rabbitmq-有什么特点","link":"#_1-什么是rabbitmq-有什么特点","children":[]},{"level":3,"title":"2. RabbitMQ的核心概念有哪些？","slug":"_2-rabbitmq的核心概念有哪些","link":"#_2-rabbitmq的核心概念有哪些","children":[]},{"level":3,"title":"3. RabbitMQ的交换机类型有哪些？","slug":"_3-rabbitmq的交换机类型有哪些","link":"#_3-rabbitmq的交换机类型有哪些","children":[]},{"level":3,"title":"4. 如何保证消息不丢失？","slug":"_4-如何保证消息不丢失","link":"#_4-如何保证消息不丢失","children":[]},{"level":3,"title":"5. 如何保证消息不被重复消费？","slug":"_5-如何保证消息不被重复消费","link":"#_5-如何保证消息不被重复消费","children":[]},{"level":3,"title":"6. 什么是死信队列？有什么用？","slug":"_6-什么是死信队列-有什么用","link":"#_6-什么是死信队列-有什么用","children":[]}]},{"level":2,"title":"🔥 进阶问题","slug":"🔥-进阶问题","link":"#🔥-进阶问题","children":[{"level":3,"title":"7. RabbitMQ如何实现延迟队列？","slug":"_7-rabbitmq如何实现延迟队列","link":"#_7-rabbitmq如何实现延迟队列","children":[]},{"level":3,"title":"8. RabbitMQ集群模式有哪些？","slug":"_8-rabbitmq集群模式有哪些","link":"#_8-rabbitmq集群模式有哪些","children":[]},{"level":3,"title":"9. 如何处理消息堆积？","slug":"_9-如何处理消息堆积","link":"#_9-如何处理消息堆积","children":[]},{"level":3,"title":"10. RabbitMQ如何保证顺序消费？","slug":"_10-rabbitmq如何保证顺序消费","link":"#_10-rabbitmq如何保证顺序消费","children":[]},{"level":3,"title":"11. RabbitMQ和Kafka的区别？","slug":"_11-rabbitmq和kafka的区别","link":"#_11-rabbitmq和kafka的区别","children":[]}]},{"level":2,"title":"💼 实战问题","slug":"💼-实战问题","link":"#💼-实战问题","children":[{"level":3,"title":"12. 秒杀系统如何使用RabbitMQ削峰？","slug":"_12-秒杀系统如何使用rabbitmq削峰","link":"#_12-秒杀系统如何使用rabbitmq削峰","children":[]},{"level":3,"title":"13. 如何实现分布式事务？","slug":"_13-如何实现分布式事务","link":"#_13-如何实现分布式事务","children":[]},{"level":3,"title":"14. 如何监控RabbitMQ？","slug":"_14-如何监控rabbitmq","link":"#_14-如何监控rabbitmq","children":[]},{"level":3,"title":"15. RabbitMQ性能优化建议？","slug":"_15-rabbitmq性能优化建议","link":"#_15-rabbitmq性能优化建议","children":[]}]},{"level":2,"title":"🎯 高频场景题","slug":"🎯-高频场景题","link":"#🎯-高频场景题","children":[{"level":3,"title":"16. 如何实现订单30分钟自动取消？","slug":"_16-如何实现订单30分钟自动取消","link":"#_16-如何实现订单30分钟自动取消","children":[]},{"level":3,"title":"17. 如何保证消费者接收到消息后一定处理成功？","slug":"_17-如何保证消费者接收到消息后一定处理成功","link":"#_17-如何保证消费者接收到消息后一定处理成功","children":[]},{"level":3,"title":"18. 消息发送失败怎么办？","slug":"_18-消息发送失败怎么办","link":"#_18-消息发送失败怎么办","children":[]}]},{"level":2,"title":"💡 总结","slug":"💡-总结","link":"#💡-总结","children":[]}],"git":{"createdTime":1760959407000,"updatedTime":1760959407000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java-backend/rabbitmq/06-RabbitMQ面试题.md"}');export{m as comp,v as data};
