import{_ as e,c as t,d as l,e as s,f as a,b as o,w as i,r as c,o as u}from"./app-BxcHLiku.js";const r={};function d(k,n){const p=c("RouteLink");return u(),t("div",null,[n[3]||(n[3]=l(`<h1 id="文本生成" tabindex="-1"><a class="header-anchor" href="#文本生成"><span>文本生成</span></a></h1><blockquote><p>掌握文本生成技术和应用</p></blockquote><h2 id="📚-学习目标" tabindex="-1"><a class="header-anchor" href="#📚-学习目标"><span>📚 学习目标</span></a></h2><ul><li>理解语言模型</li><li>掌握文本生成方法</li><li>学会文本摘要</li><li>了解对话系统</li></ul><h2 id="_1-语言模型" tabindex="-1"><a class="header-anchor" href="#_1-语言模型"><span>1. 语言模型</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">LanguageModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> embed_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> embed_dim<span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>lstm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>embed_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> hidden<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        embedded <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">        output<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>lstm<span class="token punctuation">(</span>embedded<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span></span>
<span class="line">        logits <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>output<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> logits<span class="token punctuation">,</span> hidden</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 生成文本</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">generate_text</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> start_text<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 初始化</span></span>
<span class="line">        input_ids <span class="token operator">=</span> tokenize<span class="token punctuation">(</span>start_text<span class="token punctuation">)</span></span>
<span class="line">        generated <span class="token operator">=</span> input_ids<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>generated<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            output<span class="token punctuation">,</span> _ <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">            next_token <span class="token operator">=</span> output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            generated<span class="token punctuation">.</span>append<span class="token punctuation">(</span>next_token<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> decode<span class="token punctuation">(</span>generated<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-使用-gpt-生成" tabindex="-1"><a class="header-anchor" href="#_2-使用-gpt-生成"><span>2. 使用 GPT 生成</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> GPT2LMHeadModel<span class="token punctuation">,</span> GPT2Tokenizer</span>
<span class="line"></span>
<span class="line">tokenizer <span class="token operator">=</span> GPT2Tokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">&#39;gpt2&#39;</span><span class="token punctuation">)</span></span>
<span class="line">model <span class="token operator">=</span> GPT2LMHeadModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">&#39;gpt2&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    input_ids <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> return_tensors<span class="token operator">=</span><span class="token string">&#39;pt&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    output <span class="token operator">=</span> model<span class="token punctuation">.</span>generate<span class="token punctuation">(</span></span>
<span class="line">        input_ids<span class="token punctuation">,</span></span>
<span class="line">        max_length<span class="token operator">=</span>max_length<span class="token punctuation">,</span></span>
<span class="line">        num_beams<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>              <span class="token comment"># beam search</span></span>
<span class="line">        no_repeat_ngram_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token comment"># 避免重复</span></span>
<span class="line">        early_stopping<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">        temperature<span class="token operator">=</span><span class="token number">0.8</span>           <span class="token comment"># 控制随机性</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    text <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> skip_special_tokens<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> text</span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> generate<span class="token punctuation">(</span><span class="token string">&quot;The future of AI is&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-文本摘要" tabindex="-1"><a class="header-anchor" href="#_3-文本摘要"><span>3. 文本摘要</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用预训练模型</span></span>
<span class="line">summarizer <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">&quot;summarization&quot;</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">&quot;facebook/bart-large-cnn&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">text <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">Long article text here...</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">summary <span class="token operator">=</span> summarizer<span class="token punctuation">(</span>text<span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">130</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> do_sample<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>summary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;summary_text&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-序列到序列" tabindex="-1"><a class="header-anchor" href="#_4-序列到序列"><span>4. 序列到序列</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Seq2Seq</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>encoder <span class="token operator">=</span> encoder</span>
<span class="line">        self<span class="token punctuation">.</span>decoder <span class="token operator">=</span> decoder</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> src<span class="token punctuation">,</span> trg<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 编码</span></span>
<span class="line">        encoder_outputs<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder<span class="token punctuation">(</span>src<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 解码</span></span>
<span class="line">        outputs<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>trg<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> outputs</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 用于机器翻译</span></span>
<span class="line"><span class="token comment"># src: &quot;I love you&quot;</span></span>
<span class="line"><span class="token comment"># trg: &quot;我爱你&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-对话生成" tabindex="-1"><a class="header-anchor" href="#_5-对话生成"><span>5. 对话生成</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModelForCausalLM<span class="token punctuation">,</span> AutoTokenizer</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 加载对话模型</span></span>
<span class="line">model <span class="token operator">=</span> AutoModelForCausalLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">&quot;microsoft/DialoGPT-medium&quot;</span><span class="token punctuation">)</span></span>
<span class="line">tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">&quot;microsoft/DialoGPT-medium&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 多轮对话</span></span>
<span class="line">chat_history_ids <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">    user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;You: &quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> user_input<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;quit&#39;</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 编码用户输入</span></span>
<span class="line">    new_input_ids <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>user_input <span class="token operator">+</span> tokenizer<span class="token punctuation">.</span>eos_token<span class="token punctuation">,</span></span>
<span class="line">                                     return_tensors<span class="token operator">=</span><span class="token string">&#39;pt&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 拼接历史</span></span>
<span class="line">    <span class="token keyword">if</span> chat_history_ids <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span></span>
<span class="line">        bot_input_ids <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>chat_history_ids<span class="token punctuation">,</span> new_input_ids<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        bot_input_ids <span class="token operator">=</span> new_input_ids</span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 生成回复</span></span>
<span class="line">    chat_history_ids <span class="token operator">=</span> model<span class="token punctuation">.</span>generate<span class="token punctuation">(</span></span>
<span class="line">        bot_input_ids<span class="token punctuation">,</span></span>
<span class="line">        max_length<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span></span>
<span class="line">        pad_token_id<span class="token operator">=</span>tokenizer<span class="token punctuation">.</span>eos_token_id</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 解码</span></span>
<span class="line">    response <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>decode<span class="token punctuation">(</span></span>
<span class="line">        chat_history_ids<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> bot_input_ids<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        skip_special_tokens<span class="token operator">=</span><span class="token boolean">True</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Bot: </span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,15)),s("p",null,[n[1]||(n[1]=s("strong",null,"下一节：",-1)),n[2]||(n[2]=a()),o(p,{to:"/tutorials/python-ai/nlp/12-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B.html"},{default:i(()=>[...n[0]||(n[0]=[a("实战案例",-1)])]),_:1})])])}const v=e(r,[["render",d]]),b=JSON.parse('{"path":"/tutorials/python-ai/nlp/11-wenbenshengcheng.html","title":"文本生成","lang":"zh-CN","frontmatter":{"title":"文本生成"},"headers":[{"level":2,"title":"📚 学习目标","slug":"📚-学习目标","link":"#📚-学习目标","children":[]},{"level":2,"title":"1. 语言模型","slug":"_1-语言模型","link":"#_1-语言模型","children":[]},{"level":2,"title":"2. 使用 GPT 生成","slug":"_2-使用-gpt-生成","link":"#_2-使用-gpt-生成","children":[]},{"level":2,"title":"3. 文本摘要","slug":"_3-文本摘要","link":"#_3-文本摘要","children":[]},{"level":2,"title":"4. 序列到序列","slug":"_4-序列到序列","link":"#_4-序列到序列","children":[]},{"level":2,"title":"5. 对话生成","slug":"_5-对话生成","link":"#_5-对话生成","children":[]}],"git":{"createdTime":1761052725000,"updatedTime":1761052725000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/python-ai/nlp/11-文本生成.md"}');export{v as comp,b as data};
