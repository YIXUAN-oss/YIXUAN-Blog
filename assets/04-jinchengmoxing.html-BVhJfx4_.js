import{_ as i,c,d as o,e as s,f as a,b as e,w as u,r as p,o as r}from"./app-DOpRTEVU.js";const d={},k={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/process-model-stage-0000001428061460-V3",target:"_blank",rel:"noopener noreferrer"};function v(m,n){const t=p("ExternalLinkIcon"),l=p("RouteLink");return r(),c("div",null,[n[4]||(n[4]=o(`<h1 id="进程模型" tabindex="-1"><a class="header-anchor" href="#进程模型"><span>进程模型</span></a></h1><blockquote><p>理解 HarmonyOS 的进程架构</p></blockquote><h2 id="🏗️-进程架构" tabindex="-1"><a class="header-anchor" href="#🏗️-进程架构"><span>🏗️ 进程架构</span></a></h2><h3 id="进程类型" tabindex="-1"><a class="header-anchor" href="#进程类型"><span>进程类型</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">HarmonyOS 进程模型</span>
<span class="line">├─ 主进程（Main Process）</span>
<span class="line">│   └─ 运行 UIAbility</span>
<span class="line">├─ 渲染进程（Render Process）</span>
<span class="line">│   └─ UI 渲染</span>
<span class="line">└─ Extension 进程</span>
<span class="line">    ├─ FormExtension</span>
<span class="line">    └─ ServiceExtension</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进程配置" tabindex="-1"><a class="header-anchor" href="#进程配置"><span>进程配置</span></a></h3><div class="language-json5 line-numbers-mode" data-highlighter="prismjs" data-ext="json5" data-title="json5"><pre><code><span class="line"><span class="token comment">// module.json5</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;process&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.example.myapp:main&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 进程名</span></span>
<span class="line">    <span class="token property">&quot;abilities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MainAbility&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;process&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>  <span class="token comment">// 使用默认进程</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;IsolatedAbility&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;process&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.example.myapp:isolated&quot;</span>  <span class="token comment">// 独立进程</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔄-进程间通信-ipc" tabindex="-1"><a class="header-anchor" href="#🔄-进程间通信-ipc"><span>🔄 进程间通信（IPC）</span></a></h2><h3 id="使用-rpc" tabindex="-1"><a class="header-anchor" href="#使用-rpc"><span>使用 RPC</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> rpc <span class="token keyword">from</span> <span class="token string">&#39;@ohos.rpc&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 服务端</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyStub</span> <span class="token keyword">extends</span> <span class="token class-name">rpc</span><span class="token punctuation">.</span>RemoteObject <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>descriptor<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">onRemoteRequest</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> data<span class="token operator">:</span> rpc<span class="token punctuation">.</span>MessageParcel<span class="token punctuation">,</span> </span>
<span class="line">                  reply<span class="token operator">:</span> rpc<span class="token punctuation">.</span>MessageParcel<span class="token punctuation">,</span> option<span class="token operator">:</span> rpc<span class="token punctuation">.</span>MessageOption<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;收到请求, code:&#39;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 读取数据</span></span>
<span class="line">      <span class="token keyword">const</span> value <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;接收到:&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// 写入返回值</span></span>
<span class="line">      reply<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 客户端</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">callRemoteService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token comment">/* 获取远程对象代理 */</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> rpc<span class="token punctuation">.</span>MessageParcel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> reply <span class="token operator">=</span> rpc<span class="token punctuation">.</span>MessageParcel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> option <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">rpc</span><span class="token punctuation">.</span><span class="token function">MessageOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 写入数据</span></span>
<span class="line">  data<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 发送请求</span></span>
<span class="line">  <span class="token keyword">await</span> proxy<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> option<span class="token punctuation">)</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 读取结果</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> reply<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;结果:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>  <span class="token comment">// 20</span></span>
<span class="line">  </span>
<span class="line">  data<span class="token punctuation">.</span><span class="token function">reclaim</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  reply<span class="token punctuation">.</span><span class="token function">reclaim</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔐-进程隔离" tabindex="-1"><a class="header-anchor" href="#🔐-进程隔离"><span>🔐 进程隔离</span></a></h2><h3 id="数据隔离" tabindex="-1"><a class="header-anchor" href="#数据隔离"><span>数据隔离</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 进程 A</span></span>
<span class="line">AppStorage<span class="token punctuation">.</span><span class="token function">SetOrCreate</span><span class="token punctuation">(</span><span class="token string">&#39;processA_data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Data from Process A&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 进程 B（无法访问进程 A 的数据）</span></span>
<span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;processA_data&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安全隔离" tabindex="-1"><a class="header-anchor" href="#安全隔离"><span>安全隔离</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">安全沙箱</span>
<span class="line">├─ 进程 A</span>
<span class="line">│   └─ 独立的文件系统</span>
<span class="line">│   └─ 独立的内存空间</span>
<span class="line">└─ 进程 B</span>
<span class="line">    └─ 独立的文件系统</span>
<span class="line">    └─ 独立的内存空间</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="⚡-性能优化" tabindex="-1"><a class="header-anchor" href="#⚡-性能优化"><span>⚡ 性能优化</span></a></h2><h3 id="_1-进程复用" tabindex="-1"><a class="header-anchor" href="#_1-进程复用"><span>1. 进程复用</span></a></h3><div class="language-json5 line-numbers-mode" data-highlighter="prismjs" data-ext="json5" data-title="json5"><pre><code><span class="line"><span class="token comment">// 多个 Ability 共享同一进程</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;abilities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MainAbility&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;process&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.example.myapp:main&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DetailAbility&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;process&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.example.myapp:main&quot;</span>  <span class="token comment">// 共享进程</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-按需创建" tabindex="-1"><a class="header-anchor" href="#_2-按需创建"><span>2. 按需创建</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 延迟加载重进程服务</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadHeavyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>heavyServiceLoaded<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">startServiceExtensionAbility</span><span class="token punctuation">(</span>want<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>heavyServiceLoaded <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-资源限制" tabindex="-1"><a class="header-anchor" href="#_3-资源限制"><span>3. 资源限制</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 监控进程内存</span></span>
<span class="line"><span class="token keyword">import</span> process <span class="token keyword">from</span> <span class="token string">&#39;@ohos.process&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">checkMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> memInfo <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">getMemoryInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;内存使用:&#39;</span><span class="token punctuation">,</span> memInfo<span class="token punctuation">.</span>rss <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">&#39;MB&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>memInfo<span class="token punctuation">.</span>rss <span class="token operator">&gt;</span> <span class="token number">200</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 超过200MB，清理资源</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="💡-最佳实践" tabindex="-1"><a class="header-anchor" href="#💡-最佳实践"><span>💡 最佳实践</span></a></h2><h3 id="_1-合理划分进程" tabindex="-1"><a class="header-anchor" href="#_1-合理划分进程"><span>1. 合理划分进程</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// ✅ 主进程 - 轻量级 UI</span></span>
<span class="line">MainAbility → main process</span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 独立进程 - 重量级服务</span></span>
<span class="line">DataProcessService → isolated process</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-避免过度通信" tabindex="-1"><a class="header-anchor" href="#_2-避免过度通信"><span>2. 避免过度通信</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// ❌ 频繁IPC</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">sendIPC</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 批量处理</span></span>
<span class="line"><span class="token keyword">const</span> batch <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">sendBatchIPC</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📚-参考资源" tabindex="-1"><a class="header-anchor" href="#📚-参考资源"><span>📚 参考资源</span></a></h2>`,28)),s("ul",null,[s("li",null,[s("a",k,[n[0]||(n[0]=a("进程模型官方文档",-1)),e(t)])])]),n[5]||(n[5]=s("hr",null,null,-1)),s("p",null,[n[2]||(n[2]=s("strong",null,"第5章完成！",-1)),n[3]||(n[3]=a(" 继续学习 → ",-1)),e(l,{to:"/tutorials/harmonyos-dev/06-navigation-router/"},{default:u(()=>[...n[1]||(n[1]=[a("第6章：导航与路由",-1)])]),_:1})])])}const h=i(d,[["render",v]]),g=JSON.parse('{"path":"/tutorials/harmonyos-dev/05-ability-framework/04-jinchengmoxing.html","title":"进程模型","lang":"zh-CN","frontmatter":{"title":"进程模型","date":"2025-01-22T00:00:00.000Z"},"headers":[{"level":2,"title":"🏗️ 进程架构","slug":"🏗️-进程架构","link":"#🏗️-进程架构","children":[{"level":3,"title":"进程类型","slug":"进程类型","link":"#进程类型","children":[]},{"level":3,"title":"进程配置","slug":"进程配置","link":"#进程配置","children":[]}]},{"level":2,"title":"🔄 进程间通信（IPC）","slug":"🔄-进程间通信-ipc","link":"#🔄-进程间通信-ipc","children":[{"level":3,"title":"使用 RPC","slug":"使用-rpc","link":"#使用-rpc","children":[]}]},{"level":2,"title":"🔐 进程隔离","slug":"🔐-进程隔离","link":"#🔐-进程隔离","children":[{"level":3,"title":"数据隔离","slug":"数据隔离","link":"#数据隔离","children":[]},{"level":3,"title":"安全隔离","slug":"安全隔离","link":"#安全隔离","children":[]}]},{"level":2,"title":"⚡ 性能优化","slug":"⚡-性能优化","link":"#⚡-性能优化","children":[{"level":3,"title":"1. 进程复用","slug":"_1-进程复用","link":"#_1-进程复用","children":[]},{"level":3,"title":"2. 按需创建","slug":"_2-按需创建","link":"#_2-按需创建","children":[]},{"level":3,"title":"3. 资源限制","slug":"_3-资源限制","link":"#_3-资源限制","children":[]}]},{"level":2,"title":"💡 最佳实践","slug":"💡-最佳实践","link":"#💡-最佳实践","children":[{"level":3,"title":"1. 合理划分进程","slug":"_1-合理划分进程","link":"#_1-合理划分进程","children":[]},{"level":3,"title":"2. 避免过度通信","slug":"_2-避免过度通信","link":"#_2-避免过度通信","children":[]}]},{"level":2,"title":"📚 参考资源","slug":"📚-参考资源","link":"#📚-参考资源","children":[]}],"git":{"createdTime":1761123387000,"updatedTime":1761123387000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/harmonyos-dev/05-ability-framework/04-进程模型.md"}');export{h as comp,g as data};
