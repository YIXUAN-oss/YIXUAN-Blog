import{_ as s,c as a,d as p,o as t}from"./app-Cq7MJLHQ.js";const e={};function l(c,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="java-枚举与注解" tabindex="-1"><a class="header-anchor" href="#java-枚举与注解"><span>Java 枚举与注解</span></a></h1><blockquote><p><strong>本章重点：</strong> 掌握枚举的使用方法、注解的基本概念和常用注解</p><p><strong>面试频率：</strong> ⭐⭐⭐⭐</p></blockquote><hr><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#%E4%B8%80%E6%9E%9A%E4%B8%BEenum">一、枚举（Enum）</a><ul><li><a href="#11-%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%BC%95%E5%85%A5">1.1 枚举的引入</a></li><li><a href="#12-%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F">1.2 枚举的实现方式</a></li><li><a href="#13-%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">1.3 枚举的常用方法</a></li><li><a href="#14-%E6%9E%9A%E4%B8%BE%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3">1.4 枚举实现接口</a></li></ul></li><li><a href="#%E4%BA%8C%E6%B3%A8%E8%A7%A3annotation">二、注解（Annotation）</a><ul><li><a href="#21-%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%90%86%E8%A7%A3">2.1 注解的理解</a></li><li><a href="#22-%E5%9F%BA%E6%9C%AC%E6%B3%A8%E8%A7%A3">2.2 基本注解</a></li></ul></li><li><a href="#%E4%B8%89%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">三、面试常见问题</a></li></ul><hr><h2 id="一、枚举-enum" tabindex="-1"><a class="header-anchor" href="#一、枚举-enum"><span>一、枚举（Enum）</span></a></h2><h3 id="_1-1-枚举的引入" tabindex="-1"><a class="header-anchor" href="#_1-1-枚举的引入"><span>1.1 枚举的引入</span></a></h3><h4 id="需求场景" tabindex="-1"><a class="header-anchor" href="#需求场景"><span>需求场景</span></a></h4><p>要求创建季节(Season) 对象，请设计并完成。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span> <span class="token comment">// 描述</span></span>
<span class="line">    <span class="token comment">// 构造器</span></span>
<span class="line">    <span class="token comment">// getXX</span></span>
<span class="line">    <span class="token comment">// setXX</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="问题分析" tabindex="-1"><a class="header-anchor" href="#问题分析"><span>问题分析</span></a></h4><p>创建 Season 对象有如下特点：</p><ol><li>季节的值是有限的几个值(spring, summer, autumn, winter)</li><li>只读，不需要修改</li><li>需要避免创建无效的季节对象</li></ol><h4 id="解决方案-枚举" tabindex="-1"><a class="header-anchor" href="#解决方案-枚举"><span>解决方案 - 枚举</span></a></h4><ol><li><p>枚举对应英文(enumeration, 简写 enum)</p></li><li><p>枚举是一组常量的集合。</p></li><li><p>可以这里理解：枚举属于一种特殊的类，里面只包含一组有限的特定的对象</p></li></ol><p><strong>枚举的优点：</strong></p><ul><li>类型安全：编译时检查，避免传入无效值</li><li>代码清晰：见名知义，提高可读性</li><li>易于维护：统一管理常量</li></ul><hr><h3 id="_1-2-枚举的实现方式" tabindex="-1"><a class="header-anchor" href="#_1-2-枚举的实现方式"><span>1.2 枚举的实现方式</span></a></h3><p>Java中有两种实现枚举的方式：</p><ol><li>自定义类实现枚举（JDK 1.5之前）</li><li>使用 <code>enum</code> 关键字实现枚举（JDK 1.5及之后，推荐）</li></ol><h4 id="方式一-自定义类实现枚举" tabindex="-1"><a class="header-anchor" href="#方式一-自定义类实现枚举"><span>方式一：自定义类实现枚举</span></a></h4><p><strong>实现步骤：</strong></p><ol><li>构造器私有化，防止外部创建对象</li><li>类内部创建固定的对象实例</li><li>对外暴露对象（使用 <code>public static final</code> 修饰）</li><li>提供 <code>get</code> 方法，但不提供 <code>set</code> 方法</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enumeration02</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token constant">AUTUMN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token constant">SPRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 演示自定义枚举实现  </span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span> <span class="token comment">// 描述  </span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 定义了四个对象, 固定   </span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">SPRING</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;春天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;温暖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">WINTER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;冬天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;寒冷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">AUTUMN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;秋天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;凉爽&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">SUMMER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;夏天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;炎热&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 1. 将构造器私有化,目的防止 直接 new</span></span>
<span class="line">    <span class="token comment">// 2. 去掉 setXxx 方法, 防止属性被修改  </span></span>
<span class="line">    <span class="token comment">// 3. 在 Season 内部，直接创建固定的对象  </span></span>
<span class="line">    <span class="token comment">// 4. 优化，可以加入 final 修饰符  </span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> name<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Season{&quot;</span> <span class="token operator">+</span>  </span>
<span class="line">                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>  </span>
<span class="line">                <span class="token string">&quot;, desc=&#39;&quot;</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>  </span>
<span class="line">                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点总结：</strong></p><ul><li>✅ 构造器私有化</li><li>✅ 本类内部创建一组对象（四个：春夏秋冬）</li><li>✅ 对外暴露对象（通过 <code>public static final</code> 修饰符）</li><li>✅ 提供 <code>get</code> 方法，但不提供 <code>set</code> 方法</li></ul><p><strong>缺点：</strong> 代码冗长，需要手动控制</p><hr><h4 id="方式二-enum-关键字实现枚举-推荐" tabindex="-1"><a class="header-anchor" href="#方式二-enum-关键字实现枚举-推荐"><span>方式二：<code>enum</code> 关键字实现枚举（推荐）</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enumeration03</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token constant">AUTUMN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token constant">SUMMER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 演示使用 enum 关键字来实现枚举类  </span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">Season2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果使用了 enum 来实现枚举类  </span></span>
<span class="line">    <span class="token comment">// 1. 使用关键字 enum 替代 class</span></span>
<span class="line">    <span class="token comment">// 2. public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;) 直接使用  </span></span>
<span class="line">    <span class="token comment">//    SPRING(&quot;春天&quot;, &quot;温暖&quot;) 解读 常量名(实参列表)  </span></span>
<span class="line">    <span class="token comment">// 3. 如果有多个常量(对象)， 使用 ,号间隔即可  </span></span>
<span class="line">    <span class="token comment">// 4. 如果使用 enum 来实现枚举，要求将定义常量对象，写在前面  </span></span>
<span class="line">    <span class="token comment">// 5. 如果我们使用的是无参构造器，创建常量对象，则可以省略 ()    </span></span>
<span class="line">    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">&quot;春天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;温暖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">&quot;冬天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;寒冷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">&quot;秋天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;凉爽&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">&quot;夏天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;炎热&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span> <span class="token comment">// 描述  </span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Season2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 无参构造器  </span></span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Season2</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> name<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Season{&quot;</span> <span class="token operator">+</span>  </span>
<span class="line">                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>  </span>
<span class="line">                <span class="token string">&quot;, desc=&#39;&quot;</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>  </span>
<span class="line">                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>enum 关键字实现枚举的注意事项：</strong></p><table><thead><tr><th>注意点</th><th>说明</th></tr></thead><tbody><tr><td>① 继承关系</td><td>使用 <code>enum</code> 关键字开发的枚举类，默认继承 <code>Enum</code> 类，而且是 <code>final</code> 类（可用 <code>javap</code> 工具验证）</td></tr><tr><td>② 简化语法</td><td>传统的 <code>public static final Season2 SPRING = new Season2(&quot;春天&quot;, &quot;温暖&quot;);</code> 简化为 <code>SPRING(&quot;春天&quot;, &quot;温暖&quot;)</code></td></tr><tr><td>③ 无参构造</td><td>如果使用无参构造器创建枚举对象，实参列表和小括号都可以省略</td></tr><tr><td>④ 多个对象</td><td>当有多个枚举对象时，使用 <code>,</code> 间隔，最后有一个分号结尾</td></tr><tr><td>⑤ 对象位置</td><td>枚举对象必须放在枚举类的行首</td></tr><tr><td>⑥ 单继承限制</td><td>枚举类不能再继承其他类（已继承 <code>Enum</code>），但可以实现接口</td></tr></tbody></table><hr><h3 id="_1-3-枚举的常用方法" tabindex="-1"><a class="header-anchor" href="#_1-3-枚举的常用方法"><span>1.3 枚举的常用方法</span></a></h3><p><code>enum</code> 关键字定义的枚举类继承自 <code>java.lang.Enum</code>，提供了以下常用方法：</p><table><thead><tr><th>方法</th><th>返回类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>toString()</code></td><td>String</td><td>返回枚举常量的名称（可重写）</td><td><code>Season.SPRING.toString()</code> → &quot;SPRING&quot;</td></tr><tr><td><code>name()</code></td><td>String</td><td>返回枚举常量的名称（不可重写）</td><td><code>Season.SPRING.name()</code> → &quot;SPRING&quot;</td></tr><tr><td><code>ordinal()</code></td><td>int</td><td>返回枚举常量的序号（从0开始）</td><td><code>Season.SPRING.ordinal()</code> → 0</td></tr><tr><td><code>values()</code></td><td>枚举数组</td><td>返回所有枚举常量</td><td><code>Season.values()</code> → [SPRING, SUMMER, AUTUMN, WINTER]</td></tr><tr><td><code>valueOf(String)</code></td><td>枚举对象</td><td>将字符串转为枚举对象</td><td><code>Season.valueOf(&quot;SPRING&quot;)</code> → SPRING</td></tr><tr><td><code>compareTo(E)</code></td><td>int</td><td>比较两个枚举常量的序号</td><td><code>Season.SPRING.compareTo(Season.SUMMER)</code> → -1</td></tr></tbody></table><p><strong>代码示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumMethodTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. toString()</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token constant">SPRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Season{name=&#39;春天&#39;, desc=&#39;温暖&#39;}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 2. name()</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token constant">SPRING</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: SPRING</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 3. ordinal()</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token constant">SUMMER</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 4. values()</span></span>
<span class="line">        <span class="token class-name">Season</span><span class="token punctuation">[</span><span class="token punctuation">]</span> seasons <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Season</span> season <span class="token operator">:</span> seasons<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 5. valueOf()</span></span>
<span class="line">        <span class="token class-name">Season</span> autumn <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;AUTUMN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>autumn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: AUTUMN</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 6. compareTo()</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token constant">SPRING</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token constant">WINTER</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: -3</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1-4-枚举实现接口" tabindex="-1"><a class="header-anchor" href="#_1-4-枚举实现接口"><span>1.4 枚举实现接口</span></a></h3><p><strong>重要说明：</strong></p><ol><li>使用 <code>enum</code> 关键字后，就不能再继承其它类了（因为已隐式继承 <code>Enum</code>，Java是单继承）</li><li>枚举类和普通类一样，<strong>可以实现接口</strong></li></ol><p><strong>语法格式：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">enum</span> 类名 <span class="token keyword">implements</span> 接口<span class="token number">1</span><span class="token punctuation">,</span> 接口<span class="token number">2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 枚举常量</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumDetail</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token class-name">Music</span><span class="token punctuation">.</span><span class="token constant">CLASSICMUSIC</span><span class="token punctuation">.</span><span class="token function">playing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">IPlaying</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">Music</span> <span class="token keyword">implements</span> <span class="token class-name">IPlaying</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token constant">CLASSICMUSIC</span><span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token annotation punctuation">@Override</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;播放好听的音乐...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、注解-annotation" tabindex="-1"><a class="header-anchor" href="#二、注解-annotation"><span>二、注解（Annotation）</span></a></h2><h3 id="_2-1-注解的理解" tabindex="-1"><a class="header-anchor" href="#_2-1-注解的理解"><span>2.1 注解的理解</span></a></h3><h4 id="什么是注解" tabindex="-1"><a class="header-anchor" href="#什么是注解"><span>什么是注解？</span></a></h4><p>注解（Annotation）也被称为<strong>元数据（Metadata）</strong>，是JDK 5.0引入的一个特性。</p><p><strong>作用：</strong> 用于修饰解释包、类、方法、属性、构造器、局部变量等数据信息。</p><p><strong>特点：</strong></p><ul><li>和注释一样，注解不影响程序逻辑</li><li>但注解可以被编译器或运行时读取，相当于嵌入在代码中的补充信息</li><li>在 JavaSE 中：标记过时功能、忽略警告等</li><li>在 JavaEE 中：配置应用程序、代替繁冗的 XML 配置等</li></ul><hr><h3 id="_2-2-基本注解" tabindex="-1"><a class="header-anchor" href="#_2-2-基本注解"><span>2.2 基本注解</span></a></h3><p>使用注解时要在其前面增加 <code>@</code> 符号，并把该注解当成一个修饰符使用。</p><h4 id="三个基本的-annotation" tabindex="-1"><a class="header-anchor" href="#三个基本的-annotation"><span>三个基本的 Annotation：</span></a></h4><h5 id="_1-override" tabindex="-1"><a class="header-anchor" href="#_1-override"><span>① @Override</span></a></h5><p><strong>作用：</strong> 限定某个方法是重写父类方法，该注解只能用于方法</p><p><strong>特点：</strong></p><ul><li>编译器会检查该方法是否确实重写了父类方法</li><li>如果父类没有该方法，编译器会报错</li><li>提高代码可读性和安全性</li></ul><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;父类方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子类重写父类方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 编译错误：父类中没有 show2() 方法</span></span>
<span class="line">    <span class="token comment">// @Override</span></span>
<span class="line">    <span class="token comment">// public void show2() { }</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="_2-deprecated" tabindex="-1"><a class="header-anchor" href="#_2-deprecated"><span>② @Deprecated</span></a></h5><p><strong>作用：</strong> 表示某个程序元素（类、方法等）已过时，不推荐使用</p><p><strong>特点：</strong></p><ul><li>标记为过时的元素仍可使用，但编译器会给出警告</li><li>用于向开发者传达&quot;该功能已被替代&quot;的信息</li></ul><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Deprecated</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是一个过时的方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">newMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请使用新方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">MyClass</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        obj<span class="token punctuation">.</span><span class="token function">oldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译器会显示删除线警告</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="_3-suppresswarnings" tabindex="-1"><a class="header-anchor" href="#_3-suppresswarnings"><span>③ @SuppressWarnings</span></a></h5><p><strong>作用：</strong> 抑制编译器警告</p><p><strong>常用参数：</strong></p><ul><li><code>&quot;all&quot;</code> - 抑制所有警告</li><li><code>&quot;unchecked&quot;</code> - 抑制未检查的警告（如泛型）</li><li><code>&quot;deprecation&quot;</code> - 抑制过时警告</li><li><code>&quot;rawtypes&quot;</code> - 抑制原始类型警告</li></ul><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuppressWarningsTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有泛型，但不会有警告</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;deprecation&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 抑制多个类型的警告</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、面试常见问题" tabindex="-1"><a class="header-anchor" href="#三、面试常见问题"><span>三、面试常见问题</span></a></h2><h3 id="📝-枚举相关面试题" tabindex="-1"><a class="header-anchor" href="#📝-枚举相关面试题"><span>📝 枚举相关面试题</span></a></h3><h4 id="q1-什么是枚举-为什么要使用枚举" tabindex="-1"><a class="header-anchor" href="#q1-什么是枚举-为什么要使用枚举"><span>Q1: 什么是枚举？为什么要使用枚举？</span></a></h4><p><strong>答案：</strong></p><p>枚举是一种特殊的类，用于定义一组固定的常量。</p><p><strong>使用枚举的优点：</strong></p><ol><li><strong>类型安全</strong>：编译时检查，避免传入无效值</li><li><strong>代码清晰</strong>：见名知义，提高可读性</li><li><strong>易于维护</strong>：集中管理常量，避免魔法数字</li><li><strong>可以添加方法和属性</strong>：比普通常量更强大</li></ol><hr><h4 id="q2-enum-和-class-的区别是什么" tabindex="-1"><a class="header-anchor" href="#q2-enum-和-class-的区别是什么"><span>Q2: enum 和 class 的区别是什么？</span></a></h4><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>enum</th><th>class</th></tr></thead><tbody><tr><td>继承</td><td>默认继承 <code>java.lang.Enum</code>，不能继承其他类</td><td>可以继承其他类</td></tr><tr><td>实例化</td><td>不能使用 <code>new</code> 创建实例</td><td>可以使用 <code>new</code> 创建实例</td></tr><tr><td>实例数量</td><td>实例数量固定（枚举常量）</td><td>可以创建任意数量的实例</td></tr><tr><td>修饰符</td><td>默认是 <code>public static final</code></td><td>需要手动指定</td></tr><tr><td>序列化</td><td>自动支持序列化，且保证单例</td><td>需要实现 <code>Serializable</code> 接口</td></tr><tr><td>比较</td><td>可以用 <code>==</code> 比较</td><td>推荐用 <code>equals()</code> 比较</td></tr></tbody></table><hr><h4 id="q3-枚举的底层实现原理是什么" tabindex="-1"><a class="header-anchor" href="#q3-枚举的底层实现原理是什么"><span>Q3: 枚举的底层实现原理是什么？</span></a></h4><p><strong>答案：</strong></p><p>使用 <code>enum</code> 定义的枚举类，编译器会自动生成以下内容：</p><ol><li><strong>继承 <code>Enum</code> 类</strong></li><li><strong>添加 <code>final</code> 修饰符</strong>（枚举类不能被继承）</li><li><strong>将枚举常量转换为 <code>public static final</code> 的实例</strong></li><li><strong>自动生成 <code>values()</code> 和 <code>valueOf()</code> 方法</strong></li></ol><p><strong>验证方式：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 编译枚举类</span></span>
<span class="line">javac Season.java</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 反编译查看字节码</span></span>
<span class="line">javap <span class="token parameter variable">-c</span> Season.class</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="q4-枚举能否实现接口-能否继承类" tabindex="-1"><a class="header-anchor" href="#q4-枚举能否实现接口-能否继承类"><span>Q4: 枚举能否实现接口？能否继承类？</span></a></h4><p><strong>答案：</strong></p><ul><li>✅ <strong>能实现接口</strong>：枚举可以实现多个接口</li><li>❌ <strong>不能继承类</strong>：枚举已经隐式继承 <code>java.lang.Enum</code>，Java是单继承</li></ul><hr><h3 id="📝-注解相关面试题" tabindex="-1"><a class="header-anchor" href="#📝-注解相关面试题"><span>📝 注解相关面试题</span></a></h3><h4 id="q5-override-注解有什么作用-不加会怎样" tabindex="-1"><a class="header-anchor" href="#q5-override-注解有什么作用-不加会怎样"><span>Q5: @Override 注解有什么作用？不加会怎样？</span></a></h4><p><strong>答案：</strong></p><p><strong>作用：</strong></p><ol><li>告诉编译器这是一个重写方法</li><li>编译器会检查父类是否有该方法</li><li>提高代码可读性</li></ol><p><strong>不加 @Override 的影响：</strong></p><ul><li>代码仍能正常运行</li><li>但如果方法名拼写错误，编译器不会报错，导致没有真正重写父类方法</li></ul><hr><h4 id="q6-deprecated-和直接删除过时代码的区别" tabindex="-1"><a class="header-anchor" href="#q6-deprecated-和直接删除过时代码的区别"><span>Q6: @Deprecated 和直接删除过时代码的区别？</span></a></h4><p><strong>答案：</strong></p><table><thead><tr><th>方式</th><th>优点</th><th>缺点</th><th>使用场景</th></tr></thead><tbody><tr><td>直接删除</td><td>代码简洁</td><td>可能导致旧代码编译失败</td><td>内部项目，确定无人使用</td></tr><tr><td>@Deprecated</td><td>保持兼容性</td><td>代码冗余</td><td>开源库、公共API</td></tr></tbody></table><hr><h4 id="q7-如何自定义注解" tabindex="-1"><a class="header-anchor" href="#q7-如何自定义注解"><span>Q7: 如何自定义注解？</span></a></h4><p><strong>答案：</strong></p><p>使用 <code>@interface</code> 关键字定义注解。</p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 自定义注解</span></span>
<span class="line"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span> <span class="token comment">// 作用于方法</span></span>
<span class="line"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span> <span class="token comment">// 运行时有效</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 注解参数</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用自定义注解</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;测试方法&quot;</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="📚-本章总结" tabindex="-1"><a class="header-anchor" href="#📚-本章总结"><span>📚 本章总结</span></a></h2><ol><li><strong>枚举</strong>是一种特殊的类，用于定义一组固定的常量</li><li>推荐使用 <code>enum</code> 关键字实现枚举（JDK 1.5+）</li><li>枚举可以添加属性、方法，可以实现接口，但不能继承类</li><li><strong>注解</strong>是一种元数据，用于修饰代码元素</li><li>常用注解：<code>@Override</code>（重写检查）、<code>@Deprecated</code>（过时标记）、<code>@SuppressWarnings</code>（抑制警告）</li><li>注解不影响程序逻辑，但可以被编译器或运行时读取</li></ol><hr><p><strong>下一章预告：</strong> 异常处理机制</p>`,126)])])}const i=s(e,[["render",l]]),u=JSON.parse('{"path":"/tutorials/java/di03zhang-jinjiebiancheng/01-meijuyuzhujie.html","title":"Java 枚举与注解","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"一、枚举（Enum）","slug":"一、枚举-enum","link":"#一、枚举-enum","children":[{"level":3,"title":"1.1 枚举的引入","slug":"_1-1-枚举的引入","link":"#_1-1-枚举的引入","children":[]},{"level":3,"title":"1.2 枚举的实现方式","slug":"_1-2-枚举的实现方式","link":"#_1-2-枚举的实现方式","children":[]},{"level":3,"title":"1.3 枚举的常用方法","slug":"_1-3-枚举的常用方法","link":"#_1-3-枚举的常用方法","children":[]},{"level":3,"title":"1.4 枚举实现接口","slug":"_1-4-枚举实现接口","link":"#_1-4-枚举实现接口","children":[]}]},{"level":2,"title":"二、注解（Annotation）","slug":"二、注解-annotation","link":"#二、注解-annotation","children":[{"level":3,"title":"2.1 注解的理解","slug":"_2-1-注解的理解","link":"#_2-1-注解的理解","children":[]},{"level":3,"title":"2.2 基本注解","slug":"_2-2-基本注解","link":"#_2-2-基本注解","children":[]}]},{"level":2,"title":"三、面试常见问题","slug":"三、面试常见问题","link":"#三、面试常见问题","children":[{"level":3,"title":"📝 枚举相关面试题","slug":"📝-枚举相关面试题","link":"#📝-枚举相关面试题","children":[]},{"level":3,"title":"📝 注解相关面试题","slug":"📝-注解相关面试题","link":"#📝-注解相关面试题","children":[]}]},{"level":2,"title":"📚 本章总结","slug":"📚-本章总结","link":"#📚-本章总结","children":[]}],"git":{"createdTime":1760859744000,"updatedTime":1760859744000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java/第03章-进阶编程/01-枚举与注解.md"}');export{i as comp,u as data};
