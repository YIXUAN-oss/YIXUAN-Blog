import{_ as r,c as p,d as l,e as a,f as n,b as i,w as t,r as d,o}from"./app-sriCtWWE.js";const c={};function u(h,s){const e=d("RouteLink");return o(),p("div",null,[s[6]||(s[6]=l(`<h1 id="数据库概念与介绍" tabindex="-1"><a class="header-anchor" href="#数据库概念与介绍"><span>数据库概念与介绍</span></a></h1><blockquote><p>本章将介绍数据库的基本概念、分类以及数据库设计的理论基础，为后续学习打下坚实的基础。</p></blockquote><h2 id="📋-本章目录" tabindex="-1"><a class="header-anchor" href="#📋-本章目录"><span>📋 本章目录</span></a></h2><ul><li><a href="#%E4%B8%80%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">一、数据库基础概念</a></li><li><a href="#%E4%BA%8C%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-vs-%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93">二、关系型数据库 vs 非关系型数据库</a></li><li><a href="#%E4%B8%89mysql%E7%AE%80%E4%BB%8B">三、MySQL简介</a></li><li><a href="#%E5%9B%9B%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A0%B8%E5%BF%83%E6%9C%AF%E8%AF%AD">四、数据库核心术语</a></li><li><a href="#%E4%BA%94%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83">五、数据库设计规范</a></li><li><a href="#%E5%85%AD%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96%E7%90%86%E8%AE%BA">六、函数依赖理论</a></li><li><a href="#%E4%B8%83%E5%85%B3%E7%B3%BB%E8%BF%9E%E6%8E%A5">七、关系连接</a></li><li><a href="#%E5%85%AB%E6%9C%AC%E7%AB%A0%E6%80%BB%E7%BB%93">八、本章总结</a></li></ul><hr><h2 id="一、数据库基础概念" tabindex="-1"><a class="header-anchor" href="#一、数据库基础概念"><span>一、数据库基础概念</span></a></h2><h3 id="_1-1-什么是数据库" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是数据库"><span>1.1 什么是数据库？</span></a></h3><p><strong>数据库（Database）</strong> 是组织、存储、管理和访问数据的系统。它提供了一种结构化的方式来保存和检索信息，确保数据的安全性、一致性和完整性。</p><p><strong>数据库管理系统（DBMS）</strong> 是用于创建和管理数据库的软件系统，如MySQL、Oracle、PostgreSQL等。</p><h3 id="_1-2-为什么需要数据库" tabindex="-1"><a class="header-anchor" href="#_1-2-为什么需要数据库"><span>1.2 为什么需要数据库？</span></a></h3><p>在没有数据库之前，数据通常存储在文件中，存在以下问题：</p><ul><li>❌ <strong>数据冗余</strong>：同一数据在多个文件中重复存储</li><li>❌ <strong>数据不一致</strong>：多处存储的同一数据可能不同步</li><li>❌ <strong>访问困难</strong>：查询数据需要编写复杂的程序</li><li>❌ <strong>并发控制难</strong>：多用户同时访问容易出错</li><li>❌ <strong>安全性差</strong>：难以控制数据访问权限</li></ul><p>数据库系统很好地解决了这些问题：</p><ul><li>✅ <strong>数据集中管理</strong>：统一存储，减少冗余</li><li>✅ <strong>数据一致性</strong>：通过约束和事务保证数据准确</li><li>✅ <strong>方便查询</strong>：使用SQL语言简化数据操作</li><li>✅ <strong>并发控制</strong>：通过锁机制处理多用户访问</li><li>✅ <strong>安全可靠</strong>：提供权限控制和备份恢复机制</li></ul><hr><h2 id="二、关系型数据库-vs-非关系型数据库" tabindex="-1"><a class="header-anchor" href="#二、关系型数据库-vs-非关系型数据库"><span>二、关系型数据库 vs 非关系型数据库</span></a></h2><p>数据库主要分为两大类：<strong>关系型数据库</strong>和<strong>非关系型数据库</strong>。</p><h3 id="_2-1-关系型数据库-rdbms" tabindex="-1"><a class="header-anchor" href="#_2-1-关系型数据库-rdbms"><span>2.1 关系型数据库（RDBMS）</span></a></h3><p><strong>特点：</strong></p><ul><li><p>📊 <strong>表格存储</strong>：使用表格形式存储数据，每个表由行和列组成</p><ul><li>行（Row）：代表一条数据记录</li><li>列（Column）：代表数据的属性</li></ul></li><li><p>🔗 <strong>关系模型</strong>：表与表之间通过外键建立关系</p></li><li><p>🛡️ <strong>ACID特性</strong>：支持事务，确保数据的一致性和完整性</p><ul><li><strong>A</strong>tomicity（原子性）</li><li><strong>C</strong>onsistency（一致性）</li><li><strong>I</strong>solation（隔离性）</li><li><strong>D</strong>urability（持久性）</li></ul></li><li><p>📝 <strong>SQL标准</strong>：使用结构化查询语言（SQL）进行数据操作</p></li></ul><p><strong>代表产品：</strong></p><ul><li>MySQL</li><li>PostgreSQL</li><li>Oracle Database</li><li>Microsoft SQL Server</li><li>SQLite</li></ul><p><strong>适用场景：</strong></p><ul><li>✅ 需要复杂查询和事务管理</li><li>✅ 数据结构相对固定</li><li>✅ 需要强一致性保证</li><li>✅ 财务系统、订单系统、用户管理系统</li></ul><h3 id="_2-2-非关系型数据库-nosql" tabindex="-1"><a class="header-anchor" href="#_2-2-非关系型数据库-nosql"><span>2.2 非关系型数据库（NoSQL）</span></a></h3><p><strong>特点：</strong></p><ul><li><p>🗂️ <strong>灵活存储</strong>：采用键值对、文档、列族、图等多种存储方式</p></li><li><p>📈 <strong>高扩展性</strong>：易于水平扩展，适合分布式部署</p></li><li><p>⚡ <strong>高性能</strong>：针对大规模数据和高并发优化</p></li><li><p>🔄 <strong>最终一致性</strong>：通常采用最终一致性模型</p></li></ul><p><strong>主要类型：</strong></p><ol><li><strong>键值存储</strong>：Redis、Memcached</li><li><strong>文档数据库</strong>：MongoDB、CouchDB</li><li><strong>列族数据库</strong>：Cassandra、HBase</li><li><strong>图数据库</strong>：Neo4j、JanusGraph</li></ol><p><strong>适用场景：</strong></p><ul><li>✅ 大规模数据存储</li><li>✅ 高并发读写</li><li>✅ 数据结构灵活多变</li><li>✅ 缓存系统、日志系统、实时分析</li></ul><h3 id="_2-3-如何选择" tabindex="-1"><a class="header-anchor" href="#_2-3-如何选择"><span>2.3 如何选择？</span></a></h3><table><thead><tr><th>对比项</th><th>关系型数据库</th><th>非关系型数据库</th></tr></thead><tbody><tr><td><strong>数据结构</strong></td><td>结构化，固定schema</td><td>灵活，动态schema</td></tr><tr><td><strong>扩展方式</strong></td><td>垂直扩展（升级硬件）</td><td>水平扩展（增加服务器）</td></tr><tr><td><strong>事务支持</strong></td><td>完整的ACID支持</td><td>通常不支持或部分支持</td></tr><tr><td><strong>查询能力</strong></td><td>强大的SQL查询</td><td>查询能力相对较弱</td></tr><tr><td><strong>一致性</strong></td><td>强一致性</td><td>最终一致性</td></tr><tr><td><strong>适用场景</strong></td><td>传统业务系统</td><td>大数据、高并发场景</td></tr></tbody></table><hr><h2 id="三、mysql简介" tabindex="-1"><a class="header-anchor" href="#三、mysql简介"><span>三、MySQL简介</span></a></h2><h3 id="_3-1-什么是mysql" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是mysql"><span>3.1 什么是MySQL？</span></a></h3><p><strong>MySQL</strong> 是目前最流行的开源关系型数据库管理系统之一，由瑞典MySQL AB公司开发，现属于Oracle公司。</p><h3 id="_3-2-mysql的特点" tabindex="-1"><a class="header-anchor" href="#_3-2-mysql的特点"><span>3.2 MySQL的特点</span></a></h3><ul><li>🆓 <strong>开源免费</strong>：社区版完全免费</li><li>⚡ <strong>性能优秀</strong>：查询速度快，适合高并发场景</li><li>🔧 <strong>易于使用</strong>：安装配置简单，学习曲线平缓</li><li>🌐 <strong>跨平台</strong>：支持Windows、Linux、macOS等多种操作系统</li><li>🔌 <strong>丰富支持</strong>：支持多种编程语言（PHP、Java、Python、C++等）</li><li>📦 <strong>多种存储引擎</strong>：InnoDB、MyISAM等，满足不同需求</li></ul><h3 id="_3-3-mysql版本" tabindex="-1"><a class="header-anchor" href="#_3-3-mysql版本"><span>3.3 MySQL版本</span></a></h3><ul><li><strong>MySQL 5.7</strong>：经典稳定版本，广泛应用</li><li><strong>MySQL 8.0</strong>：最新版本，性能提升，新增功能 <ul><li>支持窗口函数</li><li>支持通用表表达式（CTE）</li><li>JSON功能增强</li><li>更好的性能和安全性</li></ul></li></ul><h3 id="_3-4-mysql应用场景" tabindex="-1"><a class="header-anchor" href="#_3-4-mysql应用场景"><span>3.4 MySQL应用场景</span></a></h3><ul><li>🌐 Web应用程序（博客、电商、社交网络）</li><li>📱 移动应用后端</li><li>🎮 游戏服务器</li><li>📊 数据分析和报表系统</li><li>💼 企业管理系统（ERP、CRM）</li></ul><hr><h2 id="四、数据库核心术语" tabindex="-1"><a class="header-anchor" href="#四、数据库核心术语"><span>四、数据库核心术语</span></a></h2><p>理解这些核心术语是学习数据库的基础：</p><h3 id="_4-1-表-table" tabindex="-1"><a class="header-anchor" href="#_4-1-表-table"><span>4.1 表（Table）</span></a></h3><p>表是数据库中存储数据的基本单位，由行和列组成。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">员工表（employees）示例：</span>
<span class="line">+----+--------+-----+------------+</span>
<span class="line">| id | name   | age | department |</span>
<span class="line">+----+--------+-----+------------+</span>
<span class="line">|  1 | 张三   |  28 | 技术部     |</span>
<span class="line">|  2 | 李四   |  32 | 销售部     |</span>
<span class="line">|  3 | 王五   |  25 | 技术部     |</span>
<span class="line">+----+--------+-----+------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-字段-列-field-column" tabindex="-1"><a class="header-anchor" href="#_4-2-字段-列-field-column"><span>4.2 字段/列（Field/Column）</span></a></h3><p>字段是表中的一列，代表一种属性。例如：<code>id</code>、<code>name</code>、<code>age</code>都是字段。</p><h3 id="_4-3-记录-行-record-row" tabindex="-1"><a class="header-anchor" href="#_4-3-记录-行-record-row"><span>4.3 记录/行（Record/Row）</span></a></h3><p>记录是表中的一行，包含一个实体的完整信息。例如：<code>1, 张三, 28, 技术部</code> 是一条记录。</p><h3 id="_4-4-主键-primary-key" tabindex="-1"><a class="header-anchor" href="#_4-4-主键-primary-key"><span>4.4 主键（Primary Key）</span></a></h3><p>主键用来唯一标识表中的每条记录，具有以下特点：</p><ul><li>✅ 唯一性：每条记录的主键值必须唯一</li><li>✅ 非空性：主键值不能为NULL</li><li>✅ 不可变性：主键值一旦设定，通常不应修改</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 定义主键</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> students <span class="token punctuation">(</span></span>
<span class="line">    student_id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  <span class="token comment">-- 主键</span></span>
<span class="line">    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    age <span class="token keyword">INT</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-外键-foreign-key" tabindex="-1"><a class="header-anchor" href="#_4-5-外键-foreign-key"><span>4.5 外键（Foreign Key）</span></a></h3><p>外键是一个表中的字段，它引用另一个表的主键，用于建立表之间的关系。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 订单表引用客户表</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders <span class="token punctuation">(</span></span>
<span class="line">    order_id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span></span>
<span class="line">    customer_id <span class="token keyword">INT</span><span class="token punctuation">,</span></span>
<span class="line">    order_date <span class="token keyword">DATE</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>customer_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> customers<span class="token punctuation">(</span>customer_id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-索引-index" tabindex="-1"><a class="header-anchor" href="#_4-6-索引-index"><span>4.6 索引（Index）</span></a></h3><p>索引是一种特殊的数据结构，用于加快数据检索速度，就像书籍的目录。</p><ul><li>📈 提高查询效率</li><li>📉 增加写入开销</li><li>💾 占用额外存储空间</li></ul><h3 id="_4-7-视图-view" tabindex="-1"><a class="header-anchor" href="#_4-7-视图-view"><span>4.7 视图（View）</span></a></h3><p>视图是从一个或多个表中导出的虚拟表，不存储实际数据，只保存查询逻辑。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 创建视图</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> employee_summary <span class="token keyword">AS</span></span>
<span class="line"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> department </span>
<span class="line"><span class="token keyword">FROM</span> employees </span>
<span class="line"><span class="token keyword">WHERE</span> age <span class="token operator">&gt;</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8-触发器-trigger" tabindex="-1"><a class="header-anchor" href="#_4-8-触发器-trigger"><span>4.8 触发器（Trigger）</span></a></h3><p>触发器是在特定事件（INSERT、UPDATE、DELETE）发生时自动执行的SQL语句集合。</p><h3 id="_4-9-事务-transaction" tabindex="-1"><a class="header-anchor" href="#_4-9-事务-transaction"><span>4.9 事务（Transaction）</span></a></h3><p>事务是一组作为整体执行的数据库操作，要么全部成功，要么全部失败。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">COMMIT</span><span class="token punctuation">;</span>  <span class="token comment">-- 提交事务</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-10-存储过程-stored-procedure" tabindex="-1"><a class="header-anchor" href="#_4-10-存储过程-stored-procedure"><span>4.10 存储过程（Stored Procedure）</span></a></h3><p>存储过程是预编译的SQL语句集合，可以接受参数，执行复杂的业务逻辑。</p><hr><h2 id="五、数据库设计规范" tabindex="-1"><a class="header-anchor" href="#五、数据库设计规范"><span>五、数据库设计规范</span></a></h2><h3 id="_5-1-数据库范式" tabindex="-1"><a class="header-anchor" href="#_5-1-数据库范式"><span>5.1 数据库范式</span></a></h3><p>数据库范式是设计关系型数据库时应遵循的规则，目的是减少数据冗余，提高数据一致性。</p><h4 id="第一范式-1nf" tabindex="-1"><a class="header-anchor" href="#第一范式-1nf"><span>第一范式（1NF）</span></a></h4><p><strong>定义</strong>：每个字段都不可再分，是原子性的。</p><p>❌ <strong>不符合1NF的表</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">| 学号 | 姓名 | 联系方式              |</span>
<span class="line">|------|------|-----------------------|</span>
<span class="line">| 001  | 张三 | 13800138000, 北京市   |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>符合1NF的表</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">| 学号 | 姓名 | 电话        | 地址   |</span>
<span class="line">|------|------|-------------|--------|</span>
<span class="line">| 001  | 张三 | 13800138000 | 北京市 |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第二范式-2nf" tabindex="-1"><a class="header-anchor" href="#第二范式-2nf"><span>第二范式（2NF）</span></a></h4><p><strong>定义</strong>：在1NF基础上，非主属性完全依赖于主键（消除部分依赖）。</p><p>❌ <strong>不符合2NF的表</strong>（学号和课程号是联合主键）：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">| 学号 | 课程号 | 姓名 | 课程名 | 成绩 |</span>
<span class="line">|------|--------|------|--------|------|</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：姓名只依赖于学号，课程名只依赖于课程号</p><p>✅ <strong>符合2NF的设计</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">学生表：| 学号 | 姓名 |</span>
<span class="line">课程表：| 课程号 | 课程名 |</span>
<span class="line">成绩表：| 学号 | 课程号 | 成绩 |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第三范式-3nf" tabindex="-1"><a class="header-anchor" href="#第三范式-3nf"><span>第三范式（3NF）</span></a></h4><p><strong>定义</strong>：在2NF基础上，非主属性不依赖于其他非主属性（消除传递依赖）。</p><p>❌ <strong>不符合3NF的表</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">| 学号 | 姓名 | 系号 | 系名   |</span>
<span class="line">|------|------|------|--------|</span>
<span class="line">| 001  | 张三 | 01   | 计算机 |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：系名依赖于系号，而系号不是主键</p><p>✅ <strong>符合3NF的设计</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">学生表：| 学号 | 姓名 | 系号 |</span>
<span class="line">院系表：| 系号 | 系名 |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bcnf-boyce-codd范式" tabindex="-1"><a class="header-anchor" href="#bcnf-boyce-codd范式"><span>BCNF（Boyce-Codd范式）</span></a></h4><p><strong>定义</strong>：在3NF基础上，每个函数依赖的决定因素都包含键。</p><h3 id="_5-2-关系模式术语" tabindex="-1"><a class="header-anchor" href="#_5-2-关系模式术语"><span>5.2 关系模式术语</span></a></h3><ul><li><strong>关系模式</strong>：对关系的逻辑结构和特征的描述</li><li><strong>关系代数</strong>：以关系作为运算对象的代数系统</li><li><strong>元组</strong>：关系中的一行（一条记录）</li><li><strong>属性</strong>：关系中的一列（一个字段）</li><li><strong>主属性</strong>：能唯一标识元组的属性</li><li><strong>数据冗余</strong>：同一数据在多处重复存储</li></ul><hr><h2 id="六、函数依赖理论" tabindex="-1"><a class="header-anchor" href="#六、函数依赖理论"><span>六、函数依赖理论</span></a></h2><h3 id="_6-1-什么是函数依赖" tabindex="-1"><a class="header-anchor" href="#_6-1-什么是函数依赖"><span>6.1 什么是函数依赖？</span></a></h3><p>在关系模式R中，如果属性X的值能唯一确定属性Y的值，则称Y函数依赖于X，记作：<strong>X → Y</strong></p><p><strong>举例</strong>：</p><ul><li><code>学号 → 姓名</code>（学号确定，姓名就确定）</li><li><code>学号 → 专业</code>（学号确定，专业就确定）</li><li><code>(学号, 课程号) → 成绩</code>（学号和课程号共同确定成绩）</li></ul><h3 id="_6-2-函数依赖的类型" tabindex="-1"><a class="header-anchor" href="#_6-2-函数依赖的类型"><span>6.2 函数依赖的类型</span></a></h3><h4 id="完全函数依赖" tabindex="-1"><a class="header-anchor" href="#完全函数依赖"><span>完全函数依赖</span></a></h4><p>如果 X → Y，且不存在X的真子集X&#39;使得X&#39; → Y，则Y完全函数依赖于X。</p><p><strong>示例</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">(学号, 课程号) → 成绩  ✅ 完全依赖</span>
<span class="line">不能通过单独的学号或课程号确定成绩</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="部分函数依赖" tabindex="-1"><a class="header-anchor" href="#部分函数依赖"><span>部分函数依赖</span></a></h4><p>如果 X → Y，但存在X的真子集X&#39;使得X&#39; → Y，则Y部分函数依赖于X。</p><p><strong>示例</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">(学号, 课程号) → 姓名  ❌ 部分依赖</span>
<span class="line">因为：学号 → 姓名（只需学号就能确定姓名）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="传递函数依赖" tabindex="-1"><a class="header-anchor" href="#传递函数依赖"><span>传递函数依赖</span></a></h4><p>如果 X → Y，Y → Z，则Z传递函数依赖于X。</p><p><strong>示例</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">学号 → 系号</span>
<span class="line">系号 → 系主任</span>
<span class="line">因此：学号 → 系主任（传递依赖）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-函数依赖的性质-armstrong公理" tabindex="-1"><a class="header-anchor" href="#_6-3-函数依赖的性质-armstrong公理"><span>6.3 函数依赖的性质（Armstrong公理）</span></a></h3><ol><li><strong>自反律</strong>：如果 Y ⊆ X，则 X → Y</li><li><strong>增广律</strong>：如果 X → Y，则 XZ → YZ</li><li><strong>传递律</strong>：如果 X → Y 且 Y → Z，则 X → Z</li></ol><hr><h2 id="七、关系连接" tabindex="-1"><a class="header-anchor" href="#七、关系连接"><span>七、关系连接</span></a></h2><h3 id="_7-1-自然连接-natural-join" tabindex="-1"><a class="header-anchor" href="#_7-1-自然连接-natural-join"><span>7.1 自然连接（Natural Join）</span></a></h3><p>自然连接会自动根据两个表中的同名列进行匹配。</p><p><strong>示例</strong>：</p><p>员工表（employees）：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">| emp_id | name | dept_id |</span>
<span class="line">|--------|------|---------|</span>
<span class="line">| 1      | 张三 | 101     |</span>
<span class="line">| 2      | 李四 | 102     |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部门表（departments）：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">| dept_id | dept_name |</span>
<span class="line">|---------|-----------|</span>
<span class="line">| 101     | 技术部    |</span>
<span class="line">| 102     | 销售部    |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自然连接结果：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> departments<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">| emp_id | name | dept_id | dept_name |</span>
<span class="line">|--------|------|---------|-----------|</span>
<span class="line">| 1      | 张三 | 101     | 技术部    |</span>
<span class="line">| 2      | 李四 | 102     | 销售部    |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点</strong>：</p><ul><li>✅ 自动匹配同名列</li><li>✅ 简化查询语句</li><li>⚠️ 需确保同名列含义相同</li></ul><h3 id="_7-2-引用完整性" tabindex="-1"><a class="header-anchor" href="#_7-2-引用完整性"><span>7.2 引用完整性</span></a></h3><p>引用完整性通过外键约束实现，确保表之间关系的一致性。</p><p><strong>示例</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders <span class="token punctuation">(</span></span>
<span class="line">    order_id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span></span>
<span class="line">    customer_id <span class="token keyword">INT</span><span class="token punctuation">,</span></span>
<span class="line">    order_date <span class="token keyword">DATE</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>customer_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> customers<span class="token punctuation">(</span>customer_id<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span>      <span class="token comment">-- 删除客户时，级联删除订单</span></span>
<span class="line">        <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span>      <span class="token comment">-- 更新客户ID时，级联更新订单</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>约束选项</strong>：</p><ul><li><code>CASCADE</code>：级联操作</li><li><code>SET NULL</code>：设置为NULL</li><li><code>RESTRICT</code>：限制删除/更新</li><li><code>NO ACTION</code>：不执行操作</li></ul><hr><h2 id="八、本章总结" tabindex="-1"><a class="header-anchor" href="#八、本章总结"><span>八、本章总结</span></a></h2><h3 id="核心要点" tabindex="-1"><a class="header-anchor" href="#核心要点"><span>核心要点</span></a></h3><ol><li><p><strong>数据库分类</strong></p><ul><li>关系型数据库：结构化，ACID，适合传统业务</li><li>非关系型数据库：灵活，高性能，适合大数据</li></ul></li><li><p><strong>MySQL特点</strong></p><ul><li>开源免费、性能优秀、易于使用</li><li>广泛应用于Web开发和企业系统</li></ul></li><li><p><strong>核心术语</strong></p><ul><li>表、字段、记录</li><li>主键、外键、索引</li><li>视图、触发器、事务</li></ul></li><li><p><strong>设计规范</strong></p><ul><li>遵循范式理论（1NF、2NF、3NF）</li><li>理解函数依赖关系</li><li>合理使用外键约束</li></ul></li></ol><h3 id="学习建议" tabindex="-1"><a class="header-anchor" href="#学习建议"><span>学习建议</span></a></h3><ol><li>✅ 理解数据库的基本概念和作用</li><li>✅ 掌握关系型数据库的特点</li><li>✅ 熟悉数据库核心术语</li><li>✅ 学习数据库设计规范</li></ol><h3 id="下一步" tabindex="-1"><a class="header-anchor" href="#下一步"><span>下一步</span></a></h3>`,150)),a("p",null,[s[1]||(s[1]=n("在掌握了数据库的基础概念后，我们将在 ",-1)),a("strong",null,[i(e,{to:"/tutorials/database/mysql/%E7%AC%AC01%E7%AB%A0-%E5%9F%BA%E7%A1%80%E7%AF%87/02-SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"},{default:t(()=>[...s[0]||(s[0]=[n("第02章 - SQL基础语法",-1)])]),_:1})]),s[2]||(s[2]=n(" 中学习如何使用SQL语句来操作数据库。",-1))]),s[7]||(s[7]=l('<hr><h2 id="练习题" tabindex="-1"><a class="header-anchor" href="#练习题"><span>练习题</span></a></h2><h3 id="选择题" tabindex="-1"><a class="header-anchor" href="#选择题"><span>选择题</span></a></h3><ol><li><p>以下哪个不是关系型数据库？</p><ul><li>A. MySQL</li><li>B. MongoDB ✅</li><li>C. PostgreSQL</li><li>D. Oracle</li></ul></li><li><p>ACID中的A代表什么？</p><ul><li>A. Atomicity（原子性）✅</li><li>B. Availability（可用性）</li><li>C. Authentication（认证）</li><li>D. Authorization（授权）</li></ul></li></ol><h3 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h3><ol><li><p>请解释为什么需要数据库范式？数据库范式的目的是什么？</p></li><li><p>设计一个简单的图书管理系统，需要包含：图书、读者、借阅记录。请画出ER图并说明表之间的关系。</p></li><li><p>什么情况下应该使用关系型数据库？什么情况下应该使用非关系型数据库？</p></li></ol><hr>',7)),a("p",null,[a("strong",null,[s[4]||(s[4]=n("继续学习：",-1)),i(e,{to:"/tutorials/database/mysql/%E7%AC%AC01%E7%AB%A0-%E5%9F%BA%E7%A1%80%E7%AF%87/02-SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"},{default:t(()=>[...s[3]||(s[3]=[n("第02章 - SQL基础语法",-1)])]),_:1})]),s[5]||(s[5]=n(" →",-1))])])}const m=r(c,[["render",u]]),v=JSON.parse('{"path":"/tutorials/database/mysql/di01zhang-jichupian/01-shujukugainianyujieshao.html","title":"数据库概念与介绍","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"📋 本章目录","slug":"📋-本章目录","link":"#📋-本章目录","children":[]},{"level":2,"title":"一、数据库基础概念","slug":"一、数据库基础概念","link":"#一、数据库基础概念","children":[{"level":3,"title":"1.1 什么是数据库？","slug":"_1-1-什么是数据库","link":"#_1-1-什么是数据库","children":[]},{"level":3,"title":"1.2 为什么需要数据库？","slug":"_1-2-为什么需要数据库","link":"#_1-2-为什么需要数据库","children":[]}]},{"level":2,"title":"二、关系型数据库 vs 非关系型数据库","slug":"二、关系型数据库-vs-非关系型数据库","link":"#二、关系型数据库-vs-非关系型数据库","children":[{"level":3,"title":"2.1 关系型数据库（RDBMS）","slug":"_2-1-关系型数据库-rdbms","link":"#_2-1-关系型数据库-rdbms","children":[]},{"level":3,"title":"2.2 非关系型数据库（NoSQL）","slug":"_2-2-非关系型数据库-nosql","link":"#_2-2-非关系型数据库-nosql","children":[]},{"level":3,"title":"2.3 如何选择？","slug":"_2-3-如何选择","link":"#_2-3-如何选择","children":[]}]},{"level":2,"title":"三、MySQL简介","slug":"三、mysql简介","link":"#三、mysql简介","children":[{"level":3,"title":"3.1 什么是MySQL？","slug":"_3-1-什么是mysql","link":"#_3-1-什么是mysql","children":[]},{"level":3,"title":"3.2 MySQL的特点","slug":"_3-2-mysql的特点","link":"#_3-2-mysql的特点","children":[]},{"level":3,"title":"3.3 MySQL版本","slug":"_3-3-mysql版本","link":"#_3-3-mysql版本","children":[]},{"level":3,"title":"3.4 MySQL应用场景","slug":"_3-4-mysql应用场景","link":"#_3-4-mysql应用场景","children":[]}]},{"level":2,"title":"四、数据库核心术语","slug":"四、数据库核心术语","link":"#四、数据库核心术语","children":[{"level":3,"title":"4.1 表（Table）","slug":"_4-1-表-table","link":"#_4-1-表-table","children":[]},{"level":3,"title":"4.2 字段/列（Field/Column）","slug":"_4-2-字段-列-field-column","link":"#_4-2-字段-列-field-column","children":[]},{"level":3,"title":"4.3 记录/行（Record/Row）","slug":"_4-3-记录-行-record-row","link":"#_4-3-记录-行-record-row","children":[]},{"level":3,"title":"4.4 主键（Primary Key）","slug":"_4-4-主键-primary-key","link":"#_4-4-主键-primary-key","children":[]},{"level":3,"title":"4.5 外键（Foreign Key）","slug":"_4-5-外键-foreign-key","link":"#_4-5-外键-foreign-key","children":[]},{"level":3,"title":"4.6 索引（Index）","slug":"_4-6-索引-index","link":"#_4-6-索引-index","children":[]},{"level":3,"title":"4.7 视图（View）","slug":"_4-7-视图-view","link":"#_4-7-视图-view","children":[]},{"level":3,"title":"4.8 触发器（Trigger）","slug":"_4-8-触发器-trigger","link":"#_4-8-触发器-trigger","children":[]},{"level":3,"title":"4.9 事务（Transaction）","slug":"_4-9-事务-transaction","link":"#_4-9-事务-transaction","children":[]},{"level":3,"title":"4.10 存储过程（Stored Procedure）","slug":"_4-10-存储过程-stored-procedure","link":"#_4-10-存储过程-stored-procedure","children":[]}]},{"level":2,"title":"五、数据库设计规范","slug":"五、数据库设计规范","link":"#五、数据库设计规范","children":[{"level":3,"title":"5.1 数据库范式","slug":"_5-1-数据库范式","link":"#_5-1-数据库范式","children":[]},{"level":3,"title":"5.2 关系模式术语","slug":"_5-2-关系模式术语","link":"#_5-2-关系模式术语","children":[]}]},{"level":2,"title":"六、函数依赖理论","slug":"六、函数依赖理论","link":"#六、函数依赖理论","children":[{"level":3,"title":"6.1 什么是函数依赖？","slug":"_6-1-什么是函数依赖","link":"#_6-1-什么是函数依赖","children":[]},{"level":3,"title":"6.2 函数依赖的类型","slug":"_6-2-函数依赖的类型","link":"#_6-2-函数依赖的类型","children":[]},{"level":3,"title":"6.3 函数依赖的性质（Armstrong公理）","slug":"_6-3-函数依赖的性质-armstrong公理","link":"#_6-3-函数依赖的性质-armstrong公理","children":[]}]},{"level":2,"title":"七、关系连接","slug":"七、关系连接","link":"#七、关系连接","children":[{"level":3,"title":"7.1 自然连接（Natural Join）","slug":"_7-1-自然连接-natural-join","link":"#_7-1-自然连接-natural-join","children":[]},{"level":3,"title":"7.2 引用完整性","slug":"_7-2-引用完整性","link":"#_7-2-引用完整性","children":[]}]},{"level":2,"title":"八、本章总结","slug":"八、本章总结","link":"#八、本章总结","children":[{"level":3,"title":"核心要点","slug":"核心要点","link":"#核心要点","children":[]},{"level":3,"title":"学习建议","slug":"学习建议","link":"#学习建议","children":[]},{"level":3,"title":"下一步","slug":"下一步","link":"#下一步","children":[]}]},{"level":2,"title":"练习题","slug":"练习题","link":"#练习题","children":[{"level":3,"title":"选择题","slug":"选择题","link":"#选择题","children":[]},{"level":3,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}]}],"git":{"createdTime":1760859744000,"updatedTime":1760959407000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/database/mysql/第01章-基础篇/01-数据库概念与介绍.md"}');export{m as comp,v as data};
