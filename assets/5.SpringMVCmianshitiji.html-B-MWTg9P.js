import{_ as s,c as a,d as t,o as e}from"./app-DeqJ5waz.js";const p={};function l(i,n){return e(),a("div",null,[...n[0]||(n[0]=[t(`<h1 id="springmvc面试题集" tabindex="-1"><a class="header-anchor" href="#springmvc面试题集"><span>SpringMVC面试题集</span></a></h1><h2 id="一、基础概念" tabindex="-1"><a class="header-anchor" href="#一、基础概念"><span>一、基础概念</span></a></h2><h3 id="_1-什么是spring-mvc" tabindex="-1"><a class="header-anchor" href="#_1-什么是spring-mvc"><span>1. 什么是Spring MVC？</span></a></h3><p><strong>答：</strong></p><p>Spring MVC 是 Spring 框架提供的一个基于 MVC 设计模式的 Web 框架。</p><p><strong>核心特点：</strong></p><ul><li>基于 MVC 设计模式</li><li>与 Spring 无缝集成</li><li>灵活的请求映射</li><li>强大的数据绑定</li><li>支持多种视图技术</li></ul><hr><h3 id="_2-spring-mvc的执行流程" tabindex="-1"><a class="header-anchor" href="#_2-spring-mvc的执行流程"><span>2. Spring MVC的执行流程？</span></a></h3><p><strong>答：</strong></p><p><strong>完整流程：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. 用户发送请求到 DispatcherServlet</span>
<span class="line">2. DispatcherServlet 调用 HandlerMapping 查找处理器</span>
<span class="line">3. HandlerMapping 返回 HandlerExecutionChain（Handler + 拦截器）</span>
<span class="line">4. DispatcherServlet 调用 HandlerAdapter 执行处理器</span>
<span class="line">5. HandlerAdapter 执行 Handler，返回 ModelAndView</span>
<span class="line">6. DispatcherServlet 调用 ViewResolver 解析视图</span>
<span class="line">7. ViewResolver 返回具体的 View</span>
<span class="line">8. View 渲染响应</span>
<span class="line">9. DispatcherServlet 返回响应给用户</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-spring-mvc的核心组件" tabindex="-1"><a class="header-anchor" href="#_3-spring-mvc的核心组件"><span>3. Spring MVC的核心组件？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>组件</th><th>说明</th></tr></thead><tbody><tr><td><strong>DispatcherServlet</strong></td><td>前端控制器，统一处理请求</td></tr><tr><td><strong>HandlerMapping</strong></td><td>处理器映射器，找到对应的 Handler</td></tr><tr><td><strong>HandlerAdapter</strong></td><td>处理器适配器，执行 Handler</td></tr><tr><td><strong>Handler</strong></td><td>处理器（Controller）</td></tr><tr><td><strong>ViewResolver</strong></td><td>视图解析器</td></tr><tr><td><strong>View</strong></td><td>视图</td></tr></tbody></table><hr><h2 id="二、注解相关" tabindex="-1"><a class="header-anchor" href="#二、注解相关"><span>二、注解相关</span></a></h2><h3 id="_4-controller和-restcontroller的区别" tabindex="-1"><a class="header-anchor" href="#_4-controller和-restcontroller的区别"><span>4. @Controller和@RestController的区别？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>@Controller</th><th>@RestController</th></tr></thead><tbody><tr><td>返回值</td><td>返回视图名称</td><td>返回 JSON/XML</td></tr><tr><td>注解组成</td><td>@Controller</td><td>@Controller + @ResponseBody</td></tr><tr><td>使用场景</td><td>传统Web应用</td><td>RESTful API</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// @Controller - 返回视图</span></span>
<span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 视图名称</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// @RestController - 返回 JSON</span></span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 JSON</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-requestmapping的属性有哪些" tabindex="-1"><a class="header-anchor" href="#_5-requestmapping的属性有哪些"><span>5. @RequestMapping的属性有哪些？</span></a></h3><p><strong>答：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span></span>
<span class="line">    value <span class="token operator">=</span> <span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span>              <span class="token comment">// URL 路径</span></span>
<span class="line">    method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span>   <span class="token comment">// 请求方法</span></span>
<span class="line">    params <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>              <span class="token comment">// 必需参数</span></span>
<span class="line">    headers <span class="token operator">=</span> <span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span>     <span class="token comment">// 必需请求头</span></span>
<span class="line">    consumes <span class="token operator">=</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 接受的内容类型</span></span>
<span class="line">    produces <span class="token operator">=</span> <span class="token string">&quot;application/json&quot;</span>  <span class="token comment">// 返回的内容类型</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6-requestparam和-pathvariable的区别" tabindex="-1"><a class="header-anchor" href="#_6-requestparam和-pathvariable的区别"><span>6. @RequestParam和@PathVariable的区别？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>@RequestParam</th><th>@PathVariable</th></tr></thead><tbody><tr><td>位置</td><td>查询参数</td><td>路径变量</td></tr><tr><td>示例</td><td>/user?id=1</td><td>/user/1</td></tr><tr><td>可选</td><td>可以设置required=false</td><td>不可选</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// @RequestParam</span></span>
<span class="line"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// /user?id=1</span></span>
<span class="line">    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// @PathVariable</span></span>
<span class="line"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// /user/1</span></span>
<span class="line">    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、拦截器" tabindex="-1"><a class="header-anchor" href="#三、拦截器"><span>三、拦截器</span></a></h2><h3 id="_7-拦截器和过滤器的区别" tabindex="-1"><a class="header-anchor" href="#_7-拦截器和过滤器的区别"><span>7. 拦截器和过滤器的区别？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>过滤器（Filter）</th><th>拦截器（Interceptor）</th></tr></thead><tbody><tr><td>规范</td><td>Servlet 规范</td><td>Spring MVC</td></tr><tr><td>拦截范围</td><td>所有请求</td><td>只拦截 Controller</td></tr><tr><td>依赖注入</td><td>不支持</td><td>支持</td></tr><tr><td>执行时机</td><td>DispatcherServlet 之前</td><td>Handler 之前</td></tr></tbody></table><hr><h3 id="_8-拦截器的执行顺序" tabindex="-1"><a class="header-anchor" href="#_8-拦截器的执行顺序"><span>8. 拦截器的执行顺序？</span></a></h3><p><strong>答：</strong></p><p><strong>单个拦截器：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">preHandle → Handler → postHandle → 视图渲染 → afterCompletion</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>多个拦截器：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Interceptor1.preHandle</span>
<span class="line">Interceptor2.preHandle</span>
<span class="line">Handler 执行</span>
<span class="line">Interceptor2.postHandle</span>
<span class="line">Interceptor1.postHandle</span>
<span class="line">视图渲染</span>
<span class="line">Interceptor2.afterCompletion</span>
<span class="line">Interceptor1.afterCompletion</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、数据处理" tabindex="-1"><a class="header-anchor" href="#四、数据处理"><span>四、数据处理</span></a></h2><h3 id="_9-spring-mvc如何接收json数据" tabindex="-1"><a class="header-anchor" href="#_9-spring-mvc如何接收json数据"><span>9. Spring MVC如何接收JSON数据？</span></a></h3><p><strong>答：</strong></p><p><strong>使用 @RequestBody：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 请求：</span></span>
<span class="line"><span class="token comment">// POST /user</span></span>
<span class="line"><span class="token comment">// Content-Type: application/json</span></span>
<span class="line"><span class="token comment">// {&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:20}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置：</strong></p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!-- 添加 Jackson 依赖 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">&lt;!-- 启用注解驱动 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_10-spring-mvc如何进行数据验证" tabindex="-1"><a class="header-anchor" href="#_10-spring-mvc如何进行数据验证"><span>10. Spring MVC如何进行数据验证？</span></a></h3><p><strong>答：</strong></p><p><strong>使用 JSR-303 验证：</strong></p><p><strong>1. 添加依赖</strong></p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 实体类添加注解</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;用户名不能为空&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;年龄最小为1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;年龄最大为150&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. Controller 使用 @Valid</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、restful" tabindex="-1"><a class="header-anchor" href="#五、restful"><span>五、RESTful</span></a></h2><h3 id="_11-什么是restful" tabindex="-1"><a class="header-anchor" href="#_11-什么是restful"><span>11. 什么是RESTful？</span></a></h3><p><strong>答：</strong></p><p>REST 是一种软件架构风格，核心思想是使用 HTTP 方法操作资源。</p><p><strong>设计规范：</strong></p><ul><li>使用名词表示资源：<code>/users</code></li><li>HTTP 方法表示操作：GET、POST、PUT、DELETE</li><li>使用 HTTP 状态码</li></ul><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET    /users     - 查询列表</span>
<span class="line">GET    /users/1   - 查询详情</span>
<span class="line">POST   /users     - 创建</span>
<span class="line">PUT    /users/1   - 更新</span>
<span class="line">DELETE /users/1   - 删除</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_12-如何实现统一异常处理" tabindex="-1"><a class="header-anchor" href="#_12-如何实现统一异常处理"><span>12. 如何实现统一异常处理？</span></a></h3><p><strong>答：</strong></p><p><strong>使用 @ControllerAdvice：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RestControllerAdvice</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleBusinessException</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、综合题" tabindex="-1"><a class="header-anchor" href="#六、综合题"><span>六、综合题</span></a></h2><h3 id="_13-如何解决跨域问题" tabindex="-1"><a class="header-anchor" href="#_13-如何解决跨域问题"><span>13. 如何解决跨域问题？</span></a></h3><p><strong>答：</strong></p><p><strong>方式1：@CrossOrigin</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">&quot;http://localhost:3000&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2：全局配置</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/**&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_14-转发和重定向的区别" tabindex="-1"><a class="header-anchor" href="#_14-转发和重定向的区别"><span>14. 转发和重定向的区别？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>转发</th><th>重定向</th></tr></thead><tbody><tr><td>关键字</td><td>forward</td><td>redirect</td></tr><tr><td>地址栏</td><td>不变</td><td>改变</td></tr><tr><td>请求次数</td><td>1次</td><td>2次</td></tr><tr><td>数据共享</td><td>可以</td><td>不可以</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 转发</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token string">&quot;forward:/user/list&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 重定向</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token string">&quot;redirect:/user/list&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_15-spring-mvc和spring-boot的区别" tabindex="-1"><a class="header-anchor" href="#_15-spring-mvc和spring-boot的区别"><span>15. Spring MVC和Spring Boot的区别？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>Spring MVC</th><th>Spring Boot</th></tr></thead><tbody><tr><td>配置</td><td>复杂（XML + Java）</td><td>简单（自动配置）</td></tr><tr><td>内嵌服务器</td><td>需外部 Tomcat</td><td>内置 Tomcat</td></tr><tr><td>开发效率</td><td>一般</td><td>高</td></tr><tr><td>学习曲线</td><td>陡峭</td><td>平缓</td></tr></tbody></table><p><strong>关系：</strong> Spring Boot 整合了 Spring MVC，简化了配置。</p><hr><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结"><span>七、总结</span></a></h2><h3 id="高频考点" tabindex="-1"><a class="header-anchor" href="#高频考点"><span>高频考点</span></a></h3><p>✅ <strong>必须掌握：</strong></p><ul><li>Spring MVC 执行流程</li><li>@Controller vs @RestController</li><li>@RequestParam vs @PathVariable</li><li>拦截器的使用和执行顺序</li><li>数据验证</li><li>RESTful 设计</li></ul><p>✅ <strong>加分项：</strong></p><ul><li>源码理解</li><li>性能优化</li><li>分布式场景处理</li></ul><h3 id="面试技巧" tabindex="-1"><a class="header-anchor" href="#面试技巧"><span>面试技巧</span></a></h3><ol><li><strong>先说原理，再举例子</strong></li><li><strong>画图说明执行流程</strong></li><li><strong>对比说明差异</strong></li><li><strong>结合项目经验</strong></li></ol>`,105)])])}const o=s(p,[["render",l]]),r=JSON.parse('{"path":"/tutorials/java-backend/springmvc/5.SpringMVCmianshitiji.html","title":"SpringMVC面试题集","lang":"zh-CN","frontmatter":{"title":"SpringMVC面试题集"},"headers":[{"level":2,"title":"一、基础概念","slug":"一、基础概念","link":"#一、基础概念","children":[{"level":3,"title":"1. 什么是Spring MVC？","slug":"_1-什么是spring-mvc","link":"#_1-什么是spring-mvc","children":[]},{"level":3,"title":"2. Spring MVC的执行流程？","slug":"_2-spring-mvc的执行流程","link":"#_2-spring-mvc的执行流程","children":[]},{"level":3,"title":"3. Spring MVC的核心组件？","slug":"_3-spring-mvc的核心组件","link":"#_3-spring-mvc的核心组件","children":[]}]},{"level":2,"title":"二、注解相关","slug":"二、注解相关","link":"#二、注解相关","children":[{"level":3,"title":"4. @Controller和@RestController的区别？","slug":"_4-controller和-restcontroller的区别","link":"#_4-controller和-restcontroller的区别","children":[]},{"level":3,"title":"5. @RequestMapping的属性有哪些？","slug":"_5-requestmapping的属性有哪些","link":"#_5-requestmapping的属性有哪些","children":[]},{"level":3,"title":"6. @RequestParam和@PathVariable的区别？","slug":"_6-requestparam和-pathvariable的区别","link":"#_6-requestparam和-pathvariable的区别","children":[]}]},{"level":2,"title":"三、拦截器","slug":"三、拦截器","link":"#三、拦截器","children":[{"level":3,"title":"7. 拦截器和过滤器的区别？","slug":"_7-拦截器和过滤器的区别","link":"#_7-拦截器和过滤器的区别","children":[]},{"level":3,"title":"8. 拦截器的执行顺序？","slug":"_8-拦截器的执行顺序","link":"#_8-拦截器的执行顺序","children":[]}]},{"level":2,"title":"四、数据处理","slug":"四、数据处理","link":"#四、数据处理","children":[{"level":3,"title":"9. Spring MVC如何接收JSON数据？","slug":"_9-spring-mvc如何接收json数据","link":"#_9-spring-mvc如何接收json数据","children":[]},{"level":3,"title":"10. Spring MVC如何进行数据验证？","slug":"_10-spring-mvc如何进行数据验证","link":"#_10-spring-mvc如何进行数据验证","children":[]}]},{"level":2,"title":"五、RESTful","slug":"五、restful","link":"#五、restful","children":[{"level":3,"title":"11. 什么是RESTful？","slug":"_11-什么是restful","link":"#_11-什么是restful","children":[]},{"level":3,"title":"12. 如何实现统一异常处理？","slug":"_12-如何实现统一异常处理","link":"#_12-如何实现统一异常处理","children":[]}]},{"level":2,"title":"六、综合题","slug":"六、综合题","link":"#六、综合题","children":[{"level":3,"title":"13. 如何解决跨域问题？","slug":"_13-如何解决跨域问题","link":"#_13-如何解决跨域问题","children":[]},{"level":3,"title":"14. 转发和重定向的区别？","slug":"_14-转发和重定向的区别","link":"#_14-转发和重定向的区别","children":[]},{"level":3,"title":"15. Spring MVC和Spring Boot的区别？","slug":"_15-spring-mvc和spring-boot的区别","link":"#_15-spring-mvc和spring-boot的区别","children":[]}]},{"level":2,"title":"七、总结","slug":"七、总结","link":"#七、总结","children":[{"level":3,"title":"高频考点","slug":"高频考点","link":"#高频考点","children":[]},{"level":3,"title":"面试技巧","slug":"面试技巧","link":"#面试技巧","children":[]}]}],"git":{"createdTime":1760959407000,"updatedTime":1760959407000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java-backend/springmvc/5.SpringMVC面试题集.md"}');export{o as comp,r as data};
