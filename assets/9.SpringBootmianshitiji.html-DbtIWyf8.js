import{_ as s,c as a,d as e,o as t}from"./app-I6OnLCmc.js";const p={};function l(i,n){return t(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="springboot面试题集" tabindex="-1"><a class="header-anchor" href="#springboot面试题集"><span>SpringBoot面试题集</span></a></h1><h2 id="一、基础概念" tabindex="-1"><a class="header-anchor" href="#一、基础概念"><span>一、基础概念</span></a></h2><h3 id="_1-什么是spring-boot" tabindex="-1"><a class="header-anchor" href="#_1-什么是spring-boot"><span>1. 什么是Spring Boot？</span></a></h3><p><strong>答：</strong></p><p>Spring Boot 是 Spring 框架的扩展，用于简化 Spring 应用的初始搭建和开发过程。</p><p><strong>核心特性：</strong></p><ul><li><strong>约定优于配置</strong> - 减少配置文件</li><li><strong>自动配置</strong> - 根据依赖自动配置</li><li><strong>独立运行</strong> - 内嵌服务器，jar 包即可运行</li><li><strong>生产就绪</strong> - 内置监控、健康检查</li><li><strong>无代码生成</strong> - 不生成代码，不需要XML配置</li></ul><hr><h3 id="_2-spring-boot的优势" tabindex="-1"><a class="header-anchor" href="#_2-spring-boot的优势"><span>2. Spring Boot的优势？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>Spring</th><th>Spring Boot</th></tr></thead><tbody><tr><td>配置</td><td>繁琐的 XML</td><td>简洁的 yml</td></tr><tr><td>依赖管理</td><td>手动管理版本</td><td>Starter 自动管理</td></tr><tr><td>服务器</td><td>需要外部 Tomcat</td><td>内嵌 Tomcat</td></tr><tr><td>部署</td><td>war 包</td><td>jar 包直接运行</td></tr><tr><td>开发效率</td><td>低</td><td>高</td></tr></tbody></table><p><strong>核心优势：</strong></p><ul><li>快速开发</li><li>简化配置</li><li>独立运行</li><li>生产就绪</li></ul><hr><h3 id="_3-spring-boot核心注解" tabindex="-1"><a class="header-anchor" href="#_3-spring-boot核心注解"><span>3. Spring Boot核心注解？</span></a></h3><p><strong>答：</strong></p><p><strong>@SpringBootApplication</strong> 是核心注解，由三个注解组成：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token operator">=</span> <span class="token annotation punctuation">@SpringBootConfiguration</span>     <span class="token comment">// 配置类</span></span>
<span class="line"><span class="token operator">+</span> <span class="token annotation punctuation">@EnableAutoConfiguration</span>    <span class="token comment">// 自动配置</span></span>
<span class="line"><span class="token operator">+</span> <span class="token annotation punctuation">@ComponentScan</span>             <span class="token comment">// 组件扫描</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><ul><li><code>@SpringBootConfiguration</code>：等价于 @Configuration</li><li><code>@EnableAutoConfiguration</code>：开启自动配置</li><li><code>@ComponentScan</code>：扫描当前包及子包</li></ul><hr><h2 id="二、自动配置" tabindex="-1"><a class="header-anchor" href="#二、自动配置"><span>二、自动配置</span></a></h2><h3 id="_4-spring-boot自动配置原理" tabindex="-1"><a class="header-anchor" href="#_4-spring-boot自动配置原理"><span>4. Spring Boot自动配置原理？</span></a></h3><p><strong>答：</strong></p><p><strong>执行流程：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. @SpringBootApplication 启动</span>
<span class="line">2. @EnableAutoConfiguration 生效</span>
<span class="line">3. AutoConfigurationImportSelector 执行</span>
<span class="line">4. 读取 META-INF/spring.factories</span>
<span class="line">5. 加载所有自动配置类</span>
<span class="line">6. 根据 @Conditional 条件过滤</span>
<span class="line">7. 生效的配置类注册到容器</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心机制：</strong></p><ul><li><strong>SPI 机制</strong>：通过 spring.factories 加载配置类</li><li><strong>条件注解</strong>：根据条件决定是否生效</li><li><strong>自动装配</strong>：自动创建和配置 Bean</li></ul><hr><h3 id="_5-常用的条件注解" tabindex="-1"><a class="header-anchor" href="#_5-常用的条件注解"><span>5. 常用的条件注解？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@ConditionalOnClass</td><td>类路径存在指定类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>类路径不存在指定类</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定 Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定 Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>配置文件存在指定属性</td></tr><tr><td>@ConditionalOnWebApplication</td><td>Web 应用</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceAutoConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token annotation punctuation">@ConditionalOnMissingBean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 只有容器中不存在 DataSource 才创建</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6-如何自定义starter" tabindex="-1"><a class="header-anchor" href="#_6-如何自定义starter"><span>6. 如何自定义Starter？</span></a></h3><p><strong>答：</strong></p><p><strong>步骤：</strong></p><ol><li><p><strong>创建 Maven 项目</strong></p><ul><li>命名：<code>xxx-spring-boot-starter</code></li></ul></li><li><p><strong>创建配置属性类</strong></p></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Data</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxProperties</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>创建服务类</strong></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxService</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">XxxProperties</span> properties<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">XxxService</span><span class="token punctuation">(</span><span class="token class-name">XxxProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>创建自动配置类</strong></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">XxxProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxAutoConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token annotation punctuation">@ConditionalOnMissingBean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">XxxService</span> <span class="token function">xxxService</span><span class="token punctuation">(</span><span class="token class-name">XxxProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XxxService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>创建 spring.factories</strong></li></ol><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\</span>
<span class="line">com.example.XxxAutoConfiguration</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、配置相关" tabindex="-1"><a class="header-anchor" href="#三、配置相关"><span>三、配置相关</span></a></h2><h3 id="_7-spring-boot配置文件加载顺序" tabindex="-1"><a class="header-anchor" href="#_7-spring-boot配置文件加载顺序"><span>7. Spring Boot配置文件加载顺序？</span></a></h3><p><strong>答：</strong></p><p><strong>优先级（从高到低）：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. 命令行参数</span>
<span class="line">2. Java 系统属性</span>
<span class="line">3. 操作系统环境变量</span>
<span class="line">4. jar 包外部的 application-{profile}.yml</span>
<span class="line">5. jar 包内部的 application-{profile}.yml</span>
<span class="line">6. jar 包外部的 application.yml</span>
<span class="line">7. jar 包内部的 application.yml</span>
<span class="line">8. @PropertySource</span>
<span class="line">9. 默认属性</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_8-如何实现多环境配置" tabindex="-1"><a class="header-anchor" href="#_8-如何实现多环境配置"><span>8. 如何实现多环境配置？</span></a></h3><p><strong>答：</strong></p><p><strong>方式1：多文件</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">application.yml              # 主配置</span>
<span class="line">application-dev.yml          # 开发环境</span>
<span class="line">application-test.yml         # 测试环境</span>
<span class="line">application-prod.yml         # 生产环境</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>主配置文件：</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">profiles</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev  <span class="token comment"># 激活开发环境</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2：单文件（不推荐）</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">profiles</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">---</span></span>
<span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev</span>
<span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">---</span></span>
<span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod</span>
<span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>激活方式：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 命令行</span></span>
<span class="line"><span class="token function">java</span> <span class="token parameter variable">-jar</span> app.jar <span class="token parameter variable">--spring.profiles.active</span><span class="token operator">=</span>prod</span>
<span class="line"></span>
<span class="line"><span class="token comment"># JVM参数</span></span>
<span class="line"><span class="token function">java</span> <span class="token parameter variable">-Dspring.profiles.active</span><span class="token operator">=</span>prod <span class="token parameter variable">-jar</span> app.jar</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_9-value和-configurationproperties的区别" tabindex="-1"><a class="header-anchor" href="#_9-value和-configurationproperties的区别"><span>9. @Value和@ConfigurationProperties的区别？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>@Value</th><th>@ConfigurationProperties</th></tr></thead><tbody><tr><td>功能</td><td>单个属性注入</td><td>批量属性注入</td></tr><tr><td>松散绑定</td><td>不支持</td><td>支持</td></tr><tr><td>SpEL</td><td>支持</td><td>不支持</td></tr><tr><td>JSR-303验证</td><td>不支持</td><td>支持</td></tr><tr><td>复杂类型</td><td>不支持</td><td>支持</td></tr><tr><td>推荐场景</td><td>简单配置</td><td>复杂配置</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// @Value</span></span>
<span class="line"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${server.port}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// @ConfigurationProperties</span></span>
<span class="line"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Data</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> version<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、整合框架" tabindex="-1"><a class="header-anchor" href="#四、整合框架"><span>四、整合框架</span></a></h2><h3 id="_10-spring-boot如何整合mybatis" tabindex="-1"><a class="header-anchor" href="#_10-spring-boot如何整合mybatis"><span>10. Spring Boot如何整合MyBatis？</span></a></h3><p><strong>答：</strong></p><p><strong>步骤：</strong></p><ol><li><strong>添加依赖</strong></li></ol><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>配置数据源</strong></li></ol><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">datasource</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test</span>
<span class="line">    <span class="token key atrule">username</span><span class="token punctuation">:</span> root</span>
<span class="line">    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span></span>
<span class="line">  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.example.entity</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>创建 Mapper</strong></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Mapper</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_11-spring-boot如何整合redis" tabindex="-1"><a class="header-anchor" href="#_11-spring-boot如何整合redis"><span>11. Spring Boot如何整合Redis？</span></a></h3><p><strong>答：</strong></p><p><strong>步骤：</strong></p><ol><li><strong>添加依赖</strong></li></ol><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>配置</strong></li></ol><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost</span>
<span class="line">    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span></span>
<span class="line">    <span class="token key atrule">password</span><span class="token punctuation">:</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>使用</strong></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、实战经验" tabindex="-1"><a class="header-anchor" href="#五、实战经验"><span>五、实战经验</span></a></h2><h3 id="_12-spring-boot项目如何优化启动速度" tabindex="-1"><a class="header-anchor" href="#_12-spring-boot项目如何优化启动速度"><span>12. Spring Boot项目如何优化启动速度？</span></a></h3><p><strong>答：</strong></p><p><strong>优化方法：</strong></p><ol><li><strong>减少自动配置</strong></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">RedisAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>懒加载</strong></li></ol><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">main</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">lazy-initialization</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p><strong>减少依赖</strong></p><ul><li>移除不必要的 starter</li><li>使用按需加载</li></ul></li><li><p><strong>JVM 参数优化</strong></p></li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">java</span> <span class="token parameter variable">-Xms512m</span> <span class="token parameter variable">-Xmx512m</span> <span class="token parameter variable">-jar</span> app.jar</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="_13-如何实现接口幂等性" tabindex="-1"><a class="header-anchor" href="#_13-如何实现接口幂等性"><span>13. 如何实现接口幂等性？</span></a></h3><p><strong>答：</strong></p><p><strong>方案1：唯一索引</strong></p><ul><li>数据库设置唯一索引</li><li>重复插入会报错</li></ul><p><strong>方案2：Token机制</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 获取Token</span></span>
<span class="line"><span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;token:&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 提交时验证Token</span></span>
<span class="line"><span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;token:&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Boolean</span> deleted <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deleted<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;请勿重复提交&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方案3：分布式锁</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">&quot;lock:order:&quot;</span> <span class="token operator">+</span> orderId<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>redisLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理业务</span></span>
<span class="line">    redisLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_14-如何实现分布式session" tabindex="-1"><a class="header-anchor" href="#_14-如何实现分布式session"><span>14. 如何实现分布式Session？</span></a></h3><p><strong>答：</strong></p><p><strong>方案1：Spring Session + Redis</strong></p><p><strong>添加依赖：</strong></p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-session-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置：</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">session</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">store-type</span><span class="token punctuation">:</span> redis</span>
<span class="line">    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">1800</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 自动将 Session 存储到 Redis</span></span>
<span class="line">request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_15-spring-boot如何实现优雅停机" tabindex="-1"><a class="header-anchor" href="#_15-spring-boot如何实现优雅停机"><span>15. Spring Boot如何实现优雅停机？</span></a></h3><p><strong>答：</strong></p><p><strong>配置：</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">shutdown</span><span class="token punctuation">:</span> graceful  <span class="token comment"># 优雅停机</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">timeout-per-shutdown-phase</span><span class="token punctuation">:</span> 30s  <span class="token comment"># 超时时间</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果：</strong></p><ul><li>停止接收新请求</li><li>等待正在处理的请求完成</li><li>超时后强制关闭</li></ul><hr><h2 id="六、综合题" tabindex="-1"><a class="header-anchor" href="#六、综合题"><span>六、综合题</span></a></h2><h3 id="_16-spring-boot和spring-cloud的关系" tabindex="-1"><a class="header-anchor" href="#_16-spring-boot和spring-cloud的关系"><span>16. Spring Boot和Spring Cloud的关系？</span></a></h3><p><strong>答：</strong></p><table><thead><tr><th>特性</th><th>Spring Boot</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>定位</td><td>单体应用开发</td><td>微服务架构</td></tr><tr><td>功能</td><td>简化配置</td><td>服务治理</td></tr><tr><td>依赖</td><td>独立</td><td>基于 Spring Boot</td></tr><tr><td>使用场景</td><td>快速开发</td><td>分布式系统</td></tr></tbody></table><p><strong>关系：</strong></p><ul><li>Spring Cloud 基于 Spring Boot 构建</li><li>Spring Boot 是基础，Spring Cloud 是扩展</li></ul><hr><h3 id="_17-生产环境部署注意事项" tabindex="-1"><a class="header-anchor" href="#_17-生产环境部署注意事项"><span>17. 生产环境部署注意事项？</span></a></h3><p><strong>答：</strong></p><p><strong>1. 配置优化</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">max-threads</span><span class="token punctuation">:</span> <span class="token number">200</span></span>
<span class="line">    <span class="token key atrule">accept-count</span><span class="token punctuation">:</span> <span class="token number">100</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">logging</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">level</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">root</span><span class="token punctuation">:</span> WARN</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 打包优化</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">mvn clean package <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3. JVM 参数</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">java</span> <span class="token parameter variable">-Xms2g</span> <span class="token parameter variable">-Xmx2g</span> <span class="token parameter variable">-XX:+UseG1GC</span> <span class="token parameter variable">-jar</span> app.jar</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>4. 监控</strong></p><ul><li>使用 Actuator 监控</li><li>使用 Prometheus + Grafana</li></ul><p><strong>5. 日志管理</strong></p><ul><li>按天滚动</li><li>保留30天</li><li>错误单独记录</li></ul><hr><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结"><span>七、总结</span></a></h2><h3 id="高频考点" tabindex="-1"><a class="header-anchor" href="#高频考点"><span>高频考点</span></a></h3><p>✅ <strong>必须掌握：</strong></p><ul><li>Spring Boot 自动配置原理</li><li>Starter 机制</li><li>配置文件加载顺序</li><li>多环境配置</li><li>常用整合（MyBatis、Redis）</li><li>JWT 认证</li></ul><p>✅ <strong>加分项：</strong></p><ul><li>自定义 Starter</li><li>源码理解</li><li>性能优化</li><li>分布式场景</li></ul><h3 id="面试技巧" tabindex="-1"><a class="header-anchor" href="#面试技巧"><span>面试技巧</span></a></h3><ol><li><strong>先说原理，再举例子</strong></li><li><strong>画图说明执行流程</strong></li><li><strong>对比 Spring 和 Spring Boot</strong></li><li><strong>结合实际项目经验</strong></li><li><strong>说明优化方案</strong></li></ol><hr><p><strong>恭喜你完成 Spring Boot 学习！🎉</strong></p>`,158)])])}const c=s(p,[["render",l]]),r=JSON.parse('{"path":"/tutorials/java-backend/springboot/9.SpringBootmianshitiji.html","title":"SpringBoot面试题集","lang":"zh-CN","frontmatter":{"title":"SpringBoot面试题集"},"headers":[{"level":2,"title":"一、基础概念","slug":"一、基础概念","link":"#一、基础概念","children":[{"level":3,"title":"1. 什么是Spring Boot？","slug":"_1-什么是spring-boot","link":"#_1-什么是spring-boot","children":[]},{"level":3,"title":"2. Spring Boot的优势？","slug":"_2-spring-boot的优势","link":"#_2-spring-boot的优势","children":[]},{"level":3,"title":"3. Spring Boot核心注解？","slug":"_3-spring-boot核心注解","link":"#_3-spring-boot核心注解","children":[]}]},{"level":2,"title":"二、自动配置","slug":"二、自动配置","link":"#二、自动配置","children":[{"level":3,"title":"4. Spring Boot自动配置原理？","slug":"_4-spring-boot自动配置原理","link":"#_4-spring-boot自动配置原理","children":[]},{"level":3,"title":"5. 常用的条件注解？","slug":"_5-常用的条件注解","link":"#_5-常用的条件注解","children":[]},{"level":3,"title":"6. 如何自定义Starter？","slug":"_6-如何自定义starter","link":"#_6-如何自定义starter","children":[]}]},{"level":2,"title":"三、配置相关","slug":"三、配置相关","link":"#三、配置相关","children":[{"level":3,"title":"7. Spring Boot配置文件加载顺序？","slug":"_7-spring-boot配置文件加载顺序","link":"#_7-spring-boot配置文件加载顺序","children":[]},{"level":3,"title":"8. 如何实现多环境配置？","slug":"_8-如何实现多环境配置","link":"#_8-如何实现多环境配置","children":[]},{"level":3,"title":"9. @Value和@ConfigurationProperties的区别？","slug":"_9-value和-configurationproperties的区别","link":"#_9-value和-configurationproperties的区别","children":[]}]},{"level":2,"title":"四、整合框架","slug":"四、整合框架","link":"#四、整合框架","children":[{"level":3,"title":"10. Spring Boot如何整合MyBatis？","slug":"_10-spring-boot如何整合mybatis","link":"#_10-spring-boot如何整合mybatis","children":[]},{"level":3,"title":"11. Spring Boot如何整合Redis？","slug":"_11-spring-boot如何整合redis","link":"#_11-spring-boot如何整合redis","children":[]}]},{"level":2,"title":"五、实战经验","slug":"五、实战经验","link":"#五、实战经验","children":[{"level":3,"title":"12. Spring Boot项目如何优化启动速度？","slug":"_12-spring-boot项目如何优化启动速度","link":"#_12-spring-boot项目如何优化启动速度","children":[]},{"level":3,"title":"13. 如何实现接口幂等性？","slug":"_13-如何实现接口幂等性","link":"#_13-如何实现接口幂等性","children":[]},{"level":3,"title":"14. 如何实现分布式Session？","slug":"_14-如何实现分布式session","link":"#_14-如何实现分布式session","children":[]},{"level":3,"title":"15. Spring Boot如何实现优雅停机？","slug":"_15-spring-boot如何实现优雅停机","link":"#_15-spring-boot如何实现优雅停机","children":[]}]},{"level":2,"title":"六、综合题","slug":"六、综合题","link":"#六、综合题","children":[{"level":3,"title":"16. Spring Boot和Spring Cloud的关系？","slug":"_16-spring-boot和spring-cloud的关系","link":"#_16-spring-boot和spring-cloud的关系","children":[]},{"level":3,"title":"17. 生产环境部署注意事项？","slug":"_17-生产环境部署注意事项","link":"#_17-生产环境部署注意事项","children":[]}]},{"level":2,"title":"七、总结","slug":"七、总结","link":"#七、总结","children":[{"level":3,"title":"高频考点","slug":"高频考点","link":"#高频考点","children":[]},{"level":3,"title":"面试技巧","slug":"面试技巧","link":"#面试技巧","children":[]}]}],"git":{"createdTime":1760959407000,"updatedTime":1760959407000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java-backend/springboot/9.SpringBoot面试题集.md"}');export{c as comp,r as data};
