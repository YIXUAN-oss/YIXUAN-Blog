import{_ as p,c as n,d as s,e as a,f as t,b as g,r as l,o}from"./app-CzE7hWk8.js";const r={},m={href:"https://www.bilibili.com/video/BV1c4411d7jb?p=60",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.bilibili.com/video/BV1c4411d7jb?p=63",target:"_blank",rel:"noopener noreferrer"};function c(d,i){const e=l("ExternalLinkIcon");return o(),n("div",null,[i[2]||(i[2]=s('<h1 id="计算机网络第5章-运输层" tabindex="-1"><a class="header-anchor" href="#计算机网络第5章-运输层"><span>计算机网络第5章（运输层）</span></a></h1><h2 id="_5-1、运输层概述" tabindex="-1"><a class="header-anchor" href="#_5-1、运输层概述"><span>5.1、运输层概述</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p><strong>进程之间的通信</strong></p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020211725185.png" alt="image-20201020211725185" style="zoom:67%;"><ul><li>从通信和信息处理的角度看，运输层向它上面的应用层提供通信服务，<strong>它属于面向通信部分的最高层，同时也是用户功能中的最低层</strong>。</li><li>当网络的边缘部分中的两个主机使用网络的核心部分的功能进行端到端的通信时，<strong>只有位于网络边缘部分的主机的协议栈才有运输层</strong>，而网络核心部分中的路由器在转发分组时都只用到三层（到网络层）的功能。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020211339131.png" alt="image-20201020211339131"></p><p><strong>进程之间通信流程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020213721054.png" alt="image-20201020213721054"></p><p>“逻辑通信”是指运输层之间的通信好像是沿水平方向传送数据，但事实上，这两条数据并没有一条水平方向的物理连接，要传送的数据是沿着图中上下多次的虚线方向传送的</p><blockquote><p>进程Ap1与Ap4之间进行基于网络的通信，进程Ap2与Ap3之间进行基于网络的通信</p><p>在运输层使用不同的端口，来对应不同的应用进程</p><p>然后通过网络层及其下层来传输应用层报文</p><p>接收方的运输层通过不同的端口，将收到的应用层报文，交付给应用层中相应的应用进程</p><p>这里端口并不是指看得见、摸得着的物理端口，而是指用来区分不同应用进程的标识符</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020220439303.png" alt="image-20201020220439303"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020220545411.png" alt="image-20201020220545411"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020222828878.png" alt="image-20201020222828878"></p><hr><h2 id="_5-2、运输层端口号、复用与分用的概念" tabindex="-1"><a class="header-anchor" href="#_5-2、运输层端口号、复用与分用的概念"><span>5.2、运输层端口号、复用与分用的概念</span></a></h2><h2 id="为什么用端口号" tabindex="-1"><a class="header-anchor" href="#为什么用端口号"><span>为什么用端口号</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020223242364.png" alt="image-20201020223242364"></p><h2 id="发送方的复用和接收方的分用" tabindex="-1"><a class="header-anchor" href="#发送方的复用和接收方的分用"><span>发送方的复用和接收方的分用</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020223920225.png" alt="image-20201020223920225"></p><blockquote><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>发送</strong>数据称为 <strong>复用</strong></p><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>接收</strong>时叫做 <strong>分用</strong>。</p></blockquote><h2 id="tcp-ip体系的应用层常用协议所使用的运输层熟知端口号" tabindex="-1"><a class="header-anchor" href="#tcp-ip体系的应用层常用协议所使用的运输层熟知端口号"><span>TCP/IP体系的应用层常用协议所使用的运输层熟知端口号</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020224521744.png" alt="image-20201020224521744"></p><h2 id="运输层传输流程" tabindex="-1"><a class="header-anchor" href="#运输层传输流程"><span>运输层传输流程</span></a></h2><p>举例</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020224658524.png" alt="image-20201020224658524"></p><blockquote><p>在浏览器输入域名，回车浏览</p><p>然后用户PC中的DNS客户端进程会发送一个DNS查询请求报文</p><p>DNS查询请求报文需要使用运输层的UDP协议</p><p>首部中的源端口字段的值，在短暂端口号49151~65535中挑选一个未被占用的，用来表示DNS客户端进程</p><p>首部中的目的端口字段的值：53，是DNS服务器端进程所使用的熟知端口号</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020225830336.png" alt="image-20201020225830336"></p><blockquote><p>之后，将UDP用户数据报封装在IP数据报中，通过以太网发送给DNS服务器</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020230059196.png" alt="image-20201020230059196"></p><blockquote><p>DNS服务器收到该IP数据报后，从中解封出UDP用户数据报</p><p>UDP首部中的目的端口号为53，这表明应将该UDP用户数据报的数据载荷部分，也就是DNS查询请求报文，交付给本服务器中的DNS服务器端进程</p><p>DNS服务器端进程解析DNS查询请求报文的内容，然后按其要求查找对应的IP地址</p><p>之后，会给用户PC发送DNS响应报文，DNS响应报文需要使用运输层的UDP协议封装成UDP用户数据报</p><p>其首部中的源端口字段的值设置为熟知端口号53，表明这是DNS服务器端进程所发送的UDP用户数据报，目的端口的值设置为49152，这是之前用户PC中发送DNS查询请求报文的DNS客户端进程所使用的短暂端口号</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020231032812.png" alt="image-20201020231032812"></p><blockquote><p>将UDP用户数据报封装在IP数据报中，通过以太网发送给用户PC</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020231308120.png" alt="image-20201020231308120"></p><blockquote><p>用户PC收到该数据报后，从中解封出UDP用户数据报</p><p>UDP首部中的目的端口号为49152，这表明应将该UDP用户数据报的数据载荷部分，也就是DNS响应报文，交付给用户PC中的DNS客户端进程</p><p>DNS客户端进程解析DNS响应报文的内容，就可知道自己之前所请求的Web服务器的域名对应的IP地址</p></blockquote><p>现在用户PC中的HTTP客户端进程可以向Web服务器发送HTTP请求报文（和DNS发送和接收流程差不多）</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020231935656.png" alt="image-20201020231935656"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020232517383.png" alt="image-20201020232517383"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020232132890.png" alt="image-20201020232132890"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020232548833.png" alt="image-20201020232548833"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201020232337332.png" alt="image-20201020232337332"></p><hr><h2 id="_5-3、udp和tcp的对比" tabindex="-1"><a class="header-anchor" href="#_5-3、udp和tcp的对比"><span>5.3、UDP和TCP的对比</span></a></h2><h2 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h2><ul><li><strong>UDP</strong> 和 <strong>TCP</strong> 是TCP/IP体系结构<strong>运输层</strong>中的两个重要协议</li><li>当运输层采用面向连接的 <strong>TCP</strong> 协议时，尽管下面的网络是不可靠的（只提供尽最大努力服务），但这种逻辑通信信道就相当于一条<strong>全双工的可靠信道</strong>。</li><li>当运输层采用无连接的 <strong>UDP</strong> 协议时，这种逻辑通信信道是一条<strong>不可靠信道</strong>。</li></ul><p>可靠信道与不可靠信道</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021192221061.png" alt="image-20201021192221061"></p><ul><li><p>两个对等运输实体在通信时传送的数据单位叫作<strong>运输协议数据单元</strong> TPDU (Transport Protocol Data Unit)。</p></li><li><p>TCP 传送的数据单位协议是 <strong>TCP 报文段</strong>(segment)。</p></li><li><p>UDP 传送的数据单位协议是 <strong>UDP 报文</strong>或<strong>用户数据报</strong>。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021193640130.png" alt="image-20201021193640130"></p><p>UDP的通信是无连接的，不需要套接字（Socket）</p><p>TCP是面向连接的，TCP之间的通信必须要在两个套接字（Socket）之间建立连接</p><h2 id="用户数据报协议udp-user-datagram-protocol" tabindex="-1"><a class="header-anchor" href="#用户数据报协议udp-user-datagram-protocol"><span>用户数据报协议UDP（User Datagram Protocol）</span></a></h2><p>可以发送广播</p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021194104694.png" alt="image-20201021194104694" style="zoom:50%;"><p>可以向某个多播组发送多播</p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021194225567.png" alt="image-20201021194225567" style="zoom:50%;"><p>还可以发送单播</p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021194341256.png" alt="image-20201021194341256" style="zoom:50%;"><blockquote><p>UDP 支持单播、多播以及广播</p><p>换句话说，UDP支持一对一，一对多，以及一对全的通信</p></blockquote><p>运输过程</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021195034383.png" alt="image-20201021195034383"></p><blockquote><p>UDP对应用进程交下来的报文既不合并也不拆分，而是保留这些报文的边界</p><p>换句话说，UDP是面向应用报文的</p></blockquote><p>UDP向上层提供无连接不可靠传输服务</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021204152175.png" alt="image-20201021204152175"></p><p>UDP结构</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021205214512.png" alt="image-20201021205214512"></p><h2 id="传输控制协议tcp-transmission-control-protocol" tabindex="-1"><a class="header-anchor" href="#传输控制协议tcp-transmission-control-protocol"><span>传输控制协议TCP（Transmission Control Protocol）</span></a></h2><p>使用TCP协议的通信双方，在进行数据传输之前，必须使用“三报文握手”建立TCP连接</p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021194557102.png" alt="image-20201021194557102" style="zoom:50%;"><p>TCP连接建立成功后，通信双方之间就好像有一条可靠的通信信道，通信双方使用这条基于TCP连接的可靠信道进行通信</p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021194749562.png" alt="image-20201021194749562" style="zoom:50%;"><blockquote><p>很显然，TCP仅支持单播，也就是一对一的通信</p></blockquote><p>运输过程</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021195435677.png" alt="image-20201021195435677"></p><blockquote><p>发送方</p><ul><li><p>TCP会把应用进程交付下来的数据块看作是一连串无结构的字节流，TCP并不知道这些待传送的字节流的含义</p></li><li><p>并将他们编号，并存储在自己发送缓存中</p></li><li><p>TCP会根据发送策略，提取一定量的字节构建TCP报文并发送</p></li></ul><p>接收方</p><ul><li>一方面从所接受到的TCP报文段中，取出数据载荷部分并存储在接收缓存中；一方面将接收缓存中的一些字节交付给应用进程</li><li>TCP不保证接收方应用进程所收到的数据块与发送方发送的数据块，具有对应大小的关系（例如，发送方应用进程交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块，就把收到的字节流交付给了上层的应用进程，但接收方收到的字节流必须和发送方应用进程发出的字节流完全一样）</li><li>接收方的应用进程必须有能力识别收到的字节流，把它还原成有意义的应用层数据</li></ul><p>TCP是面向字节流的，这正是TCP实现可靠传输、流量控制、以及拥塞控制的基础</p><p>本图只画了一个方向的数据流，在实际网络中，基于TCP连接的两端，可以同时进行TCP报文段的发送和接收</p></blockquote><p>TCP向上层提供面向连接的可靠传输服务</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021204508839.png" alt="image-20201021204508839"></p><p>TCP结构</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021205307406.png" alt="image-20201021205307406"></p><h2 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201023004653315.png" alt="image-20201023004653315"></p><hr><h2 id="_5-4、tcp的流量控制" tabindex="-1"><a class="header-anchor" href="#_5-4、tcp的流量控制"><span>5.4、TCP的流量控制</span></a></h2><h2 id="概念-2" tabindex="-1"><a class="header-anchor" href="#概念-2"><span>概念</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021223432091.png" alt="image-20201021223432091"></p><p>举例</p>',87)),a("p",null,[a("a",m,[i[0]||(i[0]=t("具体流程的视频",-1)),g(e)])]),i[3]||(i[3]=s('<p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021231801076.png" alt="image-20201021231801076"></p><p>上图主机A现在可将发送缓存中序号1~200的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021231904707.png" alt="image-20201021231904707"></p><p>上图主机A现在可将发送缓存中序号201~500的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021231945653.png" alt="image-20201021231945653"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021232027721.png" alt="image-20201021232027721"></p><p>上图主机A现在可将发送缓存中序号501~600的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021232600497.png" alt="image-20201021232600497"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021232645300.png" alt="image-20201021232645300"></p><blockquote><p>上图如果零窗口探测报文在发送过程中如果丢失，还是能打破死锁局面</p><p>因为零窗口探测报文段也有重传计时器，重传计时器超时后，零窗口探测报文段会被重传</p></blockquote><h2 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201021234004254.png" alt="image-20201021234004254"></p><hr><h2 id="_5-5、tcp的拥塞控制" tabindex="-1"><a class="header-anchor" href="#_5-5、tcp的拥塞控制"><span>5.5、TCP的拥塞控制</span></a></h2><h2 id="概念-3" tabindex="-1"><a class="header-anchor" href="#概念-3"><span>概念</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022141057083.png" alt="image-20201022141057083"></p><p><strong>网络拥塞往往是由许多因素引起的。例如：</strong></p><ol><li>点缓存的容量太小；</li><li>链路的容量不足；</li><li>处理机处理的速率太慢；</li><li>拥塞本身会进一步加剧拥塞；</li></ol><p><strong>拥塞控制的一般原理</strong></p><ul><li>拥塞控制的前提：网络能够承受现有的网络负荷。</li><li>实践证明，拥塞控制是很难设计的，因为它是一个<strong>动态问题</strong>。</li><li>分组的丢失是网络发生拥塞的<strong>征兆</strong>而不是原因。</li><li>在许多情况下，甚至正是<strong>拥塞控制本身</strong>成为引起网络性能恶化、甚至发生死锁的原因。</li></ul><p><strong>开环控制和闭环控制</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022142108309.png" alt="image-20201022142108309"></p><p><strong>监测网络的拥塞</strong></p><p>主要指标有：</p><ol><li>由于缺少缓存空间而被丢弃的分组的百分数；</li><li>平均队列长度；</li><li>超时重传的分组数；</li><li>平均分组时延；</li><li>分组时延的标准差，等等。</li></ol><p>上述这些指标的上升都标志着拥塞的增长。</p><h2 id="拥塞控制的算法" tabindex="-1"><a class="header-anchor" href="#拥塞控制的算法"><span>拥塞控制的算法</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022141423443.png" alt="image-20201022141423443"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022141556134.png" alt="image-20201022141556134"></p><blockquote><p>真正的发送窗口值 = Min (接收方窗口值，拥塞窗口值)</p></blockquote><p>下图的实例横纵坐标的意思</p><p>传输轮次：</p><ul><li>发送方给接收方发送数据报文段后，接收方给发送方发发回相应的确认报文段</li><li>一个传输轮次所经历的时间其实就是往返时间，往返时间并非是恒定的数值</li><li>使用传输轮次是为了强调把拥塞窗口所允许发送的报文段都连续发送出去，并受到了对已发送的最后一个报文段的确认</li></ul><p>拥塞窗口：</p><ul><li>它会随网络拥塞程度，以及所使用的拥塞控制算法动态变化</li></ul><h3 id="慢开始和拥塞避免" tabindex="-1"><a class="header-anchor" href="#慢开始和拥塞避免"><span>慢开始和拥塞避免</span></a></h3><h4 id="慢开始-slow-start" tabindex="-1"><a class="header-anchor" href="#慢开始-slow-start"><span>慢开始（slow-start）</span></a></h4><ul><li>目的：用来确定网络的负载能力或拥塞程度。</li><li>算法的思路：由小到大逐渐增大拥塞窗口数值。</li><li>两个变量： <ul><li><strong>拥塞窗口（cwnd）</strong>：初始拥塞窗口值：2 种设置方法。窗口值逐渐增大。 <ul><li>1 至 2 个最大报文段 （旧标准）</li><li>2 至 4 个最大报文段 （RFC 5681）</li></ul></li><li><strong>慢开始门限（ssthresh）</strong>：防止拥塞窗口增长过大引起网络拥塞。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022145631052.png" alt="image-20201022145631052"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022144725100.png" alt="image-20201022144725100"></p><blockquote><p>图中swnd是发送窗口</p><p>每经过一个传输轮次，拥塞窗口就加倍</p><p>窗口大小按<strong>指数增加</strong>，2的n-1次方</p></blockquote><h4 id="拥塞避免-congestion-avoidance" tabindex="-1"><a class="header-anchor" href="#拥塞避免-congestion-avoidance"><span>拥塞避免（congestion avoidance）</span></a></h4><ul><li>思路：让拥塞窗口 cwnd <strong>缓慢地增大</strong>，避免出现拥塞。</li><li>每经过一个传输轮次，拥塞窗口 <strong>cwnd = cwnd + 1</strong>。</li><li>使拥塞窗口 cwnd 按线性规律缓慢增长。</li><li>在拥塞避免阶段，具有 “<strong>加法增大</strong>” (Additive Increase) 的特点。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022150143886.png" alt="image-20201022150143886"></p><p>如果在发送过程中出现部分报文段丢失，这必然会造成发送方对这些丢失报文段的超时重传</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022145749592.png" alt="image-20201022145749592"></p><p>这个时候又回到了慢开始</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022145544163.png" alt="image-20201022145544163"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022145824004.png" alt="image-20201022145824004"></p><h4 id="两个算法完整示意图" tabindex="-1"><a class="header-anchor" href="#两个算法完整示意图"><span>两个算法完整示意图</span></a></h4><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022150236926.png" alt="image-20201022150236926"></p><h3 id="快重传和快恢复" tabindex="-1"><a class="header-anchor" href="#快重传和快恢复"><span>快重传和快恢复</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022150902709.png" alt="image-20201022150902709"></p><h4 id="快重传-fast-retrasmit" tabindex="-1"><a class="header-anchor" href="#快重传-fast-retrasmit"><span>快重传（fast retrasmit）</span></a></h4><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022151250183.png" alt="image-20201022151250183"></p><h4 id="快恢复-fast-recovery" tabindex="-1"><a class="header-anchor" href="#快恢复-fast-recovery"><span>快恢复（fast recovery）</span></a></h4><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022151819265.png" alt="image-20201022151819265"></p><h4 id="改进后的整体算法的示意图" tabindex="-1"><a class="header-anchor" href="#改进后的整体算法的示意图"><span>改进后的整体算法的示意图</span></a></h4><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022152041751.png" alt="image-20201022152041751"></p><hr><h2 id="_5-6、tcp超时重传时间的选择" tabindex="-1"><a class="header-anchor" href="#_5-6、tcp超时重传时间的选择"><span>5.6、TCP超时重传时间的选择</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022152651184.png" alt="image-20201022152651184"></p><blockquote><p>如果超时重传时间RTO的值设置得比RTT0的值小很多，这会引起报文段不必要的重传，使网络负荷增大</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022152708875.png" alt="image-20201022152708875"></p><blockquote><p>如果超时重传时间RTO的值设置得远大于RTT0的值，这会使重传时间推迟的太长，使网络的空闲时间增大，降低传输效率</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022153244047.png" alt="image-20201022153244047"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022153518218.png" alt="image-20201022153518218"></p><p><strong>RFC6298建议使用下式计算超时重传时间RTO</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022153758413.png" alt="image-20201022153758413"></p><p><strong>往返时间RTT的测量比较复杂</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022154045440.png" alt="image-20201022154045440"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022154137911.png" alt="image-20201022154137911"></p><p><strong>TCP超时重传的计算</strong></p><p>举例</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022154350745.png" alt="image-20201022154350745"></p><p><strong>总结</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022154418863.png" alt="image-20201022154418863"></p><hr><h2 id="_5-7、tcp可靠传输的实现" tabindex="-1"><a class="header-anchor" href="#_5-7、tcp可靠传输的实现"><span>5.7、TCP可靠传输的实现</span></a></h2>',79)),a("p",null,[a("a",h,[i[1]||(i[1]=t("本集具体讲解",-1)),g(e)])]),i[4]||(i[4]=s('<p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022161436801.png" alt="image-20201022161436801"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022161734997.png" alt="image-20201022161734997"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022164339902.png" alt="image-20201022164339902"></p><hr><h2 id="_5-8、tcp的运输连接管理" tabindex="-1"><a class="header-anchor" href="#_5-8、tcp的运输连接管理"><span>5.8、TCP的运输连接管理</span></a></h2><h2 id="概念-4" tabindex="-1"><a class="header-anchor" href="#概念-4"><span>概念</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022193215183.png" alt="image-20201022193215183"></p><h2 id="tcp的连接建立" tabindex="-1"><a class="header-anchor" href="#tcp的连接建立"><span>TCP的连接建立</span></a></h2><ul><li>TCP 建立连接的过程叫做<strong>握手</strong>。</li><li>握手需要在客户和服务器之间交换三个 TCP 报文段。称之为<strong>三报文握手</strong>。</li><li>采用<strong>三报文握手</strong>主要是为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</li></ul><h3 id="tcp的连接建立要解决以下三个问题" tabindex="-1"><a class="header-anchor" href="#tcp的连接建立要解决以下三个问题"><span>TCP的连接建立要解决以下三个问题</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022193418673.png" alt="image-20201022193418673"></p><h3 id="tcp使用-三报文握手-建立连接" tabindex="-1"><a class="header-anchor" href="#tcp使用-三报文握手-建立连接"><span>TCP使用“三报文握手”建立连接</span></a></h3><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li></ul><p>“握手”需要在TCP客户端和服务器之间交换三个TCP报文段</p><p>过程</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022194219693.png" alt="image-20201022194219693"></p><blockquote><p>最初两端的TCP进程都处于关闭状态</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022194350899.png" alt="image-20201022194350899"></p><blockquote><p>一开始，TCP服务器进程首先创建传输控制块，用来存储TCP连接中的一些重要信息。例如TCP连接表、指向发送和接收缓存的指针、指向重传队列的指针，当前的发送和接收序号等</p><p>之后，就准备接受TCP客户端进程的连接请求</p><p>此时，TCP服务器进程就进入监听状态，等待TCP客户端进程的连接请求</p></blockquote><p>TCP服务器进程是被动等待来自TCP客户端进程的连接请求，因此成为<strong>被动打开</strong>连接</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022194926877.png" alt="image-20201022194926877"></p><blockquote><p>TCP客户进程也是首先创建传输控制块</p></blockquote><p>由于TCP连接建立是由TCP客户端主动发起的，因此称为<strong>主动打开</strong>连接</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022195108616.png" alt="image-20201022195108616"></p><blockquote><p>然后，在打算建立TCP连接时，向TCP服务器进程发送TCP连接请求报文段，并进入同步已发送状态</p><p>TCP连接请求报文段首部中</p><ul><li>同步位SYN被设置为1，表明这是一个TCP连接请求报文段</li><li>序号字段seq被设置了一个初始值x，作为TCP客户端进程所选择的初始序号</li></ul><p>请注意：TCP规定SYN被设置为1的报文段不能携带数据，但要消耗掉一个序号</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022195847144.png" alt="image-20201022195847144"></p><blockquote><p>TCP服务器进程收到TCP连接请求报文段后，如果同意建立连接，则向TCP客户进程发送TCP连接请求确认报文段，并进入同步已接收状态</p><p>TCP连接请求确认报文段首部中</p><ul><li>同步位SYN和确认为ACK都设置为1，表明这是一个TCP连接请求确认报文段</li><li>序号字段seq被设置了一个初始值y，作为TCP服务器进程所选择的初始序号，</li><li>确认号字段ack的值被设置成了x+1，这是对TCP客户进程所选择的初始序号（seq）的确认</li></ul><p>请注意：这个报文段也不能携带数据，因为它是SYN被设置为1的报文段，但同样要消耗掉一个序号</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022202010182.png" alt="image-20201022202010182"></p><blockquote><p>TCP客户进程收到TCP连接请求确认报文段后，还要向TCP服务器进程发送一个普通的TCP确认报文段，并进入连接已连接状态</p><p>普通的TCP确认报文段首部中</p><ul><li>确认位ACK被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号字段seq被设置为x+1，这是因为TCP客户进程发送的第一个TCP报文段的序号为x，所以TCP客户进程发送的第二个报文段的序号为x+1</li><li>确认号字段ack被设置为y+1，这是对TCP服务器进程所选择的初始序号的确认</li></ul><p>请注意：TCP规定普通的TCP确认报文段可以携带数据，但如果不携带数据，则不消耗序号</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022202932905.png" alt="image-20201022202932905"></p><blockquote><p>TCP服务器进程收到该确认报文段后也进入连接已建立状态</p><p>现在，TCP双方都进入了连接已建立状态，它们可以基于已建立好的TCP连接，进行可靠的数据传输</p></blockquote><p>为什么TCP客户进程最后还要发送一个普通的TCP确认报文段？能否使用“两报文握手”建立连接？</p><p>下图实例是“两报文握手”</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022203744174.png" alt="image-20201022203744174"></p><blockquote><p>为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误”，这种情况是：一端(client)A发出去的第一个连接请求报文并没有&gt; 丢失，而是因为某些未知的原因在某个网络节点上发生滞留，导致延迟到连接释放以后的某个时间才到达另一端(server)B。本来这是一个&gt; 早已失效的报文段，但是B收到此失效的报文之后，会误认为是A再次发出的一个新的连接请求，于是B端就向A又发出确认报文，表示同&gt; 意建立连接。如果不采用“三次握手”，那么只要B端发出确认报文就会认为新的连接已经建立了，但是A端并没有发出建立连接的请求，因&gt; 此不会去向B端发送数据，B端没有收到数据就会一直等待，这样B端就会白白浪费掉很多资源。</p><p>所以并不<strong>多余</strong>，这是为了防止已失效的连接请求报文段突然又传送到了TCP服务器，因而导致错误</p></blockquote><h3 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3"><span>总结</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022204422775.png" alt="image-20201022204422775"></p><h2 id="tcp的连接释放" tabindex="-1"><a class="header-anchor" href="#tcp的连接释放"><span>TCP的连接释放</span></a></h2><ul><li>TCP 连接释放过程比较复杂。</li><li>数据传输结束后，通信的双方都可释放连接。</li><li>TCP 连接释放过程是<strong>四报文握手</strong>。</li></ul><h3 id="tcp通过-四报文挥手-来释放连接" tabindex="-1"><a class="header-anchor" href="#tcp通过-四报文挥手-来释放连接"><span>TCP通过“四报文挥手”来释放连接</span></a></h3><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li><li><strong>任何一方都可以在数据传送结束后发出连接释放的通知</strong></li></ul><p>过程</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022205124204.png" alt="image-20201022205124204"></p><blockquote><p>现在TCP客户进程和TCP服务器进程都处于连接已建立状态</p><p>TCP客户进程的应用进程通知其主动关闭TCP连接</p><p>TCP客户进程会发送TCP连接释放报文段，并进入终止等待1状态</p><p>TCP连接释放报文段首部中</p><ul><li>终止位FIN和确认为ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</li><li>序号seq字段的值设置为u，它等于TCP客户进程之前已传送过的数据的最后一个字节的序号加1</li><li>确认号ack字段的值设置为v，它等于TCP客户进程之前已收到的、数据的最后一个字节的序号加1</li></ul><p>请注意：TCP规定终止位FIN等于1的报文段即使不携带数据，也要消耗掉一个序号</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022210030419.png" alt="image-20201022210030419"></p><blockquote><p>TCP服务器进程收到TCP连接释放报文段后，会发送一个普通的TCP确认报文段并进入关闭等待状态</p><p>普通的TCP确认报文段首部中</p><ul><li>确认位ACK的值被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号seq字段的值设置为v，它等于TCP服务器进程之前已传送过的数据的最后一个字节的序号加1，这也与之前收到的TCP连接释放报文段中的确认号匹配</li><li>确认号ack字段的值设置为u+1，这是对TCP连接释放报文段的确认</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022232158631.png" alt="image-20201022232158631"></p><blockquote><p>TCP服务器进程应该通知高层应用进程，TCP客户进程要断开与自己的TCP连接</p><p>此时，从TCP客户进程到TCP服务器进程这个方向的连接就释放了</p><p>这时的TCP连接属于半关闭状态，也就是TCP客户进程已经没有数据要发送了</p><p>但如果TCP服务器进程还有数据要发送，TCP客户进程仍要接收，也就是说从TCP服务器进程到TCP客户进程这个方向的连接并未关闭</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022233050922.png" alt="image-20201022233050922"></p><blockquote><p>TCP客户进程收到TCP确认报文段后就进入终止等待2状态，等待TCP服务器进程发出的TCP连接释放报文段</p><p>若使用TCP服务器进程的应用进程已经没有数据要发送了，应用进程就通知其TCP服务器进程释放连接</p><p>由于TCP连接释放是由TCP客户进程主动发起的，因此TCP服务器进程对TCP连接的释放称为被动关闭连接</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022233941557.png" alt="image-20201022233941557"></p><blockquote><p>TCP服务器进程发送TCP连接释放报文段并进入最后确认状态</p><p>该报文段首部中</p><ul><li>终止位FIN和确认位ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</li><li>序号seq字段的值为w，这是因为在半关闭状态下，TCP服务器进程可能又发送</li><li>确认号ack字段的值为u+1，这是对之前收到的TCP连接释放报文段的重复确认</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022234741310.png" alt="image-20201022234741310"></p><blockquote><p>TCP客户进程收到TCP连接释放报文段后，必须针对该报文段发送普通的TCP确认报文段，之后进入时间等待状态</p><p>该报文段首部中</p><ul><li>确认为ACK的值被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号seq字段的值设置为u+1，这是因为TCP客户进程之前发送的TCP连接释放报文段虽然不携带数据，但要消耗掉一个序号</li><li>确认号ack字段的值设置为w+1，这是对所收到的TCP连接释放报文段的确认</li></ul><p>TCP服务器进程收到该报文段后就进入关闭状态，而TCP客户进程还要进过2MSL后才能进入关闭状态</p></blockquote><p>TCP客户进程在发送完最后一个确认报文后，为什么不直接进入关闭状态？而是要进入时间等待状态？</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022234942562.png" alt="image-20201022234942562"></p><blockquote><p>因为时间等待状态以及处于该状态2MSL时长，可以确保TCP服务器进程可以收到最后一个TCP确认报文段而进入关闭状态</p><p>另外，TCP客户进程在发送完最后一个TCP确认报文段后，在经过2MSL时长，就可以使本次连接持续时间内所产生的所有报文段都从网络中消失，这样就可以使下一个新的TCP连接中，不会出现旧连接中的报文段</p></blockquote><h3 id="tcp保活计时器的作用" tabindex="-1"><a class="header-anchor" href="#tcp保活计时器的作用"><span>TCP保活计时器的作用</span></a></h3><p>TCP双方已经建立了连接，后来，TCP客户进程所在的主机突然出现了故障</p><p>TCP服务器进程以后就不能再收到TCP客户进程发来的数据</p><p>因此，应当有措施使TCP服务器进程不要再白白等待下去</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201022235800155.png" alt="image-20201022235800155"></p><hr><h2 id="_5-9、tcp报文段的首部格式" tabindex="-1"><a class="header-anchor" href="#_5-9、tcp报文段的首部格式"><span>5.9、TCP报文段的首部格式</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201023000859363.png" alt="image-20201023000859363"></p><h2 id="各字段的作用" tabindex="-1"><a class="header-anchor" href="#各字段的作用"><span>各字段的作用</span></a></h2><p>源端口和目的端口</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201023005210010.png" alt="image-20201023005210010"></p><p>序号、确认号和确认标志位</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201023003826059.png" alt="image-20201023003826059"></p><p>数据偏移、保留、窗口和校验和</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201023004227265.png" alt="image-20201023004227265"></p><p>同步标志位、终止标志位、复位标志位、推送标志位、紧急标志位和紧急指针</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201023005001450.png" alt="image-20201023005001450"></p><p>选项和填充</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201023005132426.png" alt="image-20201023005132426"></p>',76))])}const N=p(r,[["render",c]]),U=JSON.parse('{"path":"/tutorials/network/jisuanjiwangluodi5zhang（yunshuceng）.html","title":"计算机网络第5章（运输层）","lang":"zh-CN","frontmatter":{"title":"计算机网络第5章（运输层）","date":"2025-10-17T00:00:00.000Z","sidebar":"auto","categories":["计算机网络"],"tags":["运输层","TCP","UDP","教程"]},"headers":[{"level":2,"title":"5.1、运输层概述","slug":"_5-1、运输层概述","link":"#_5-1、运输层概述","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"5.2、运输层端口号、复用与分用的概念","slug":"_5-2、运输层端口号、复用与分用的概念","link":"#_5-2、运输层端口号、复用与分用的概念","children":[]},{"level":2,"title":"为什么用端口号","slug":"为什么用端口号","link":"#为什么用端口号","children":[]},{"level":2,"title":"发送方的复用和接收方的分用","slug":"发送方的复用和接收方的分用","link":"#发送方的复用和接收方的分用","children":[]},{"level":2,"title":"TCP/IP体系的应用层常用协议所使用的运输层熟知端口号","slug":"tcp-ip体系的应用层常用协议所使用的运输层熟知端口号","link":"#tcp-ip体系的应用层常用协议所使用的运输层熟知端口号","children":[]},{"level":2,"title":"运输层传输流程","slug":"运输层传输流程","link":"#运输层传输流程","children":[]},{"level":2,"title":"5.3、UDP和TCP的对比","slug":"_5-3、udp和tcp的对比","link":"#_5-3、udp和tcp的对比","children":[]},{"level":2,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":2,"title":"用户数据报协议UDP（User Datagram Protocol）","slug":"用户数据报协议udp-user-datagram-protocol","link":"#用户数据报协议udp-user-datagram-protocol","children":[]},{"level":2,"title":"传输控制协议TCP（Transmission Control Protocol）","slug":"传输控制协议tcp-transmission-control-protocol","link":"#传输控制协议tcp-transmission-control-protocol","children":[]},{"level":2,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]},{"level":2,"title":"5.4、TCP的流量控制","slug":"_5-4、tcp的流量控制","link":"#_5-4、tcp的流量控制","children":[]},{"level":2,"title":"概念","slug":"概念-2","link":"#概念-2","children":[]},{"level":2,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]},{"level":2,"title":"5.5、TCP的拥塞控制","slug":"_5-5、tcp的拥塞控制","link":"#_5-5、tcp的拥塞控制","children":[]},{"level":2,"title":"概念","slug":"概念-3","link":"#概念-3","children":[]},{"level":2,"title":"拥塞控制的算法","slug":"拥塞控制的算法","link":"#拥塞控制的算法","children":[{"level":3,"title":"慢开始和拥塞避免","slug":"慢开始和拥塞避免","link":"#慢开始和拥塞避免","children":[]},{"level":3,"title":"快重传和快恢复","slug":"快重传和快恢复","link":"#快重传和快恢复","children":[]}]},{"level":2,"title":"5.6、TCP超时重传时间的选择","slug":"_5-6、tcp超时重传时间的选择","link":"#_5-6、tcp超时重传时间的选择","children":[]},{"level":2,"title":"5.7、TCP可靠传输的实现","slug":"_5-7、tcp可靠传输的实现","link":"#_5-7、tcp可靠传输的实现","children":[]},{"level":2,"title":"5.8、TCP的运输连接管理","slug":"_5-8、tcp的运输连接管理","link":"#_5-8、tcp的运输连接管理","children":[]},{"level":2,"title":"概念","slug":"概念-4","link":"#概念-4","children":[]},{"level":2,"title":"TCP的连接建立","slug":"tcp的连接建立","link":"#tcp的连接建立","children":[{"level":3,"title":"TCP的连接建立要解决以下三个问题","slug":"tcp的连接建立要解决以下三个问题","link":"#tcp的连接建立要解决以下三个问题","children":[]},{"level":3,"title":"TCP使用“三报文握手”建立连接","slug":"tcp使用-三报文握手-建立连接","link":"#tcp使用-三报文握手-建立连接","children":[]},{"level":3,"title":"总结","slug":"总结-3","link":"#总结-3","children":[]}]},{"level":2,"title":"TCP的连接释放","slug":"tcp的连接释放","link":"#tcp的连接释放","children":[{"level":3,"title":"TCP通过“四报文挥手”来释放连接","slug":"tcp通过-四报文挥手-来释放连接","link":"#tcp通过-四报文挥手-来释放连接","children":[]},{"level":3,"title":"TCP保活计时器的作用","slug":"tcp保活计时器的作用","link":"#tcp保活计时器的作用","children":[]}]},{"level":2,"title":"5.9、TCP报文段的首部格式","slug":"_5-9、tcp报文段的首部格式","link":"#_5-9、tcp报文段的首部格式","children":[]},{"level":2,"title":"各字段的作用","slug":"各字段的作用","link":"#各字段的作用","children":[]}],"git":{"createdTime":1760695027000,"updatedTime":1760695027000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/network/计算机网络第5章（运输层）.md"}');export{N as comp,U as data};
