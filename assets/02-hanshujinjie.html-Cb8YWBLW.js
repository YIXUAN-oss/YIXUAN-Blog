import{_ as l,c,d as o,e as a,f as s,b as e,w as t,r as i,o as u}from"./app-QnWV-YHu.js";const r={};function d(k,n){const p=i("RouteLink");return u(),c("div",null,[n[8]||(n[8]=o(`<h1 id="函数进阶" tabindex="-1"><a class="header-anchor" href="#函数进阶"><span>函数进阶</span></a></h1><h2 id="一、函数作为参数传递" tabindex="-1"><a class="header-anchor" href="#一、函数作为参数传递"><span>一、函数作为参数传递</span></a></h2><h3 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念"><span>1. 基本概念</span></a></h3><p>在Python中，函数是一等公民（First-Class Object），可以作为参数传递给其他函数。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">test_func</span><span class="token punctuation">(</span>compute<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    result <span class="token operator">=</span> compute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">*</span> y</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 传递不同的函数</span></span>
<span class="line">test_func<span class="token punctuation">(</span>add<span class="token punctuation">)</span>       <span class="token comment"># 3</span></span>
<span class="line">test_func<span class="token punctuation">(</span>multiply<span class="token punctuation">)</span>  <span class="token comment"># 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用场景：</strong> 传递计算逻辑，而非数据。</p><hr><h2 id="二、lambda匿名函数" tabindex="-1"><a class="header-anchor" href="#二、lambda匿名函数"><span>二、Lambda匿名函数</span></a></h2><h3 id="_1-lambda语法" tabindex="-1"><a class="header-anchor" href="#_1-lambda语法"><span>1. Lambda语法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">lambda</span> 参数列表<span class="token punctuation">:</span> 表达式</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>lambda</code>是关键字，表示定义匿名函数</li><li>参数列表：形式参数，可以有多个，用逗号分隔</li><li>表达式：函数体，只能写一行代码，无法写多行</li></ul><h3 id="_2-基本使用" tabindex="-1"><a class="header-anchor" href="#_2-基本使用"><span>2. 基本使用</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 普通函数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Lambda函数</span></span>
<span class="line">add_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y</span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 3</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add_lambda<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-lambda作为参数" tabindex="-1"><a class="header-anchor" href="#_3-lambda作为参数"><span>3. Lambda作为参数</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">test_func</span><span class="token punctuation">(</span>compute<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    result <span class="token operator">=</span> compute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用lambda</span></span>
<span class="line">test_func<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span>  <span class="token comment"># 3</span></span>
<span class="line">test_func<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span>  <span class="token comment"># 2</span></span>
<span class="line">test_func<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">**</span> y<span class="token punctuation">)</span> <span class="token comment"># 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-lambda的应用" tabindex="-1"><a class="header-anchor" href="#_4-lambda的应用"><span>4. Lambda的应用</span></a></h3><h4 id="配合sorted-排序" tabindex="-1"><a class="header-anchor" href="#配合sorted-排序"><span>配合sorted()排序</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 按字符串长度排序</span></span>
<span class="line">words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">]</span></span>
<span class="line">sorted_words <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sorted_words<span class="token punctuation">)</span>  <span class="token comment"># [&#39;c&#39;, &#39;java&#39;, &#39;python&#39;, &#39;javascript&#39;]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 按字典的值排序</span></span>
<span class="line">students <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;score&#39;</span><span class="token punctuation">:</span> <span class="token number">85</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;score&#39;</span><span class="token punctuation">:</span> <span class="token number">92</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;score&#39;</span><span class="token punctuation">:</span> <span class="token number">78</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line">sorted_students <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">&#39;score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> student <span class="token keyword">in</span> sorted_students<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>student<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>student<span class="token punctuation">[</span><span class="token string">&#39;score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配合filter-过滤" tabindex="-1"><a class="header-anchor" href="#配合filter-过滤"><span>配合filter()过滤</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 过滤偶数</span></span>
<span class="line">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span></span>
<span class="line">evens <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>evens<span class="token punctuation">)</span>  <span class="token comment"># [2, 4, 6, 8, 10]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配合map-映射" tabindex="-1"><a class="header-anchor" href="#配合map-映射"><span>配合map()映射</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 计算平方</span></span>
<span class="line">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">squares <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span>  <span class="token comment"># [1, 4, 9, 16, 25]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、递归函数" tabindex="-1"><a class="header-anchor" href="#三、递归函数"><span>三、递归函数</span></a></h2><h3 id="_1-什么是递归" tabindex="-1"><a class="header-anchor" href="#_1-什么是递归"><span>1. 什么是递归？</span></a></h3><p>递归是指函数自己调用自己的编程技巧。</p><p><strong>递归的两个要素：</strong></p><ol><li>递归出口（终止条件）</li><li>递归调用（自己调用自己）</li></ol><h3 id="_2-递归示例" tabindex="-1"><a class="header-anchor" href="#_2-递归示例"><span>2. 递归示例</span></a></h3><h4 id="示例1-计算阶乘" tabindex="-1"><a class="header-anchor" href="#示例1-计算阶乘"><span>示例1：计算阶乘</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    计算n的阶乘</span>
<span class="line">    n! = n * (n-1) * (n-2) * ... * 1</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token comment"># 递归出口</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 递归调用</span></span>
<span class="line">    <span class="token keyword">return</span> n <span class="token operator">*</span> factorial<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 120 (5*4*3*2*1)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例2-斐波那契数列" tabindex="-1"><a class="header-anchor" href="#示例2-斐波那契数列"><span>示例2：斐波那契数列</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    计算斐波那契数列第n项</span>
<span class="line">    F(n) = F(n-1) + F(n-2)</span>
<span class="line">    F(1) = F(2) = 1</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token comment"># 递归出口</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 递归调用</span></span>
<span class="line">    <span class="token keyword">return</span> fibonacci<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fibonacci<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 输出前10项</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出：1 1 2 3 5 8 13 21 34 55</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-递归的优缺点" tabindex="-1"><a class="header-anchor" href="#_3-递归的优缺点"><span>3. 递归的优缺点</span></a></h3><p><strong>优点：</strong></p><ul><li>代码简洁，易于理解</li><li>适合处理树形结构、分治问题</li></ul><p><strong>缺点：</strong></p><ul><li>可能导致栈溢出</li><li>性能较差（重复计算）</li></ul><p><strong>优化方案：</strong> 使用记忆化（缓存）或改用迭代</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 使用缓存优化斐波那契</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">fibonacci_cache</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> cache<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token keyword">in</span> cache<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">    </span>
<span class="line">    cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> fibonacci_cache<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cache<span class="token punctuation">)</span> <span class="token operator">+</span> fibonacci_cache<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> cache<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fibonacci_cache<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 很快得出结果</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、闭包-closure" tabindex="-1"><a class="header-anchor" href="#四、闭包-closure"><span>四、闭包（Closure）</span></a></h2><h3 id="_1-什么是闭包" tabindex="-1"><a class="header-anchor" href="#_1-什么是闭包"><span>1. 什么是闭包？</span></a></h3><p>闭包是指内层函数引用了外层函数的变量，即使外层函数已经执行完毕，内层函数仍然可以访问这些变量。</p><h3 id="_2-闭包的定义" tabindex="-1"><a class="header-anchor" href="#_2-闭包的定义"><span>2. 闭包的定义</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line">    <span class="token keyword">return</span> inner</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建闭包</span></span>
<span class="line">add_5 <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">add_10 <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add_5<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 8  (5 + 3)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add_10<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 13 (10 + 3)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-闭包的应用" tabindex="-1"><a class="header-anchor" href="#_3-闭包的应用"><span>3. 闭包的应用</span></a></h3><h4 id="示例1-计数器" tabindex="-1"><a class="header-anchor" href="#示例1-计数器"><span>示例1：计数器</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">nonlocal</span> count  <span class="token comment"># 声明使用外层变量</span></span>
<span class="line">        count <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token keyword">return</span> count</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> increment</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建两个独立的计数器</span></span>
<span class="line">counter1 <span class="token operator">=</span> counter<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">counter2 <span class="token operator">=</span> counter<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>counter1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>counter1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>counter2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>counter1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例2-函数工厂" tabindex="-1"><a class="header-anchor" href="#示例2-函数工厂"><span>示例2：函数工厂</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">make_multiplier</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;创建一个乘法函数&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">multiplier</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> x <span class="token operator">*</span> n</span>
<span class="line">    <span class="token keyword">return</span> multiplier</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建不同的乘法函数</span></span>
<span class="line">times_2 <span class="token operator">=</span> make_multiplier<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">times_3 <span class="token operator">=</span> make_multiplier<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">times_5 <span class="token operator">=</span> make_multiplier<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>times_2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 20</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>times_3<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 30</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>times_5<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 50</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、装饰器-decorator" tabindex="-1"><a class="header-anchor" href="#五、装饰器-decorator"><span>五、装饰器（Decorator）</span></a></h2><h3 id="_1-什么是装饰器" tabindex="-1"><a class="header-anchor" href="#_1-什么是装饰器"><span>1. 什么是装饰器？</span></a></h3><p>装饰器是一种特殊的函数，用于在不修改原函数代码的情况下，为函数添加额外的功能。</p><h3 id="_2-装饰器的基本语法" tabindex="-1"><a class="header-anchor" href="#_2-装饰器的基本语法"><span>2. 装饰器的基本语法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 在函数执行前做些什么</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数执行前&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 在函数执行后做些什么</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数执行后&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> result</span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用装饰器</span></span>
<span class="line"><span class="token decorator annotation punctuation">@decorator</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">say_hello<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出：</span></span>
<span class="line"><span class="token comment"># 函数执行前</span></span>
<span class="line"><span class="token comment"># Hello!</span></span>
<span class="line"><span class="token comment"># 函数执行后</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-装饰器的应用" tabindex="-1"><a class="header-anchor" href="#_3-装饰器的应用"><span>3. 装饰器的应用</span></a></h3><h4 id="示例1-计时装饰器" tabindex="-1"><a class="header-anchor" href="#示例1-计时装饰器"><span>示例1：计时装饰器</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> time</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;计算函数执行时间&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;函数 </span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string"> 执行时间：</span><span class="token interpolation"><span class="token punctuation">{</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">秒&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> result</span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@timer</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">slow_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数执行完毕&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">slow_function<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出：</span></span>
<span class="line"><span class="token comment"># 函数执行完毕</span></span>
<span class="line"><span class="token comment"># 函数 slow_function 执行时间：2.0001秒</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例2-日志装饰器" tabindex="-1"><a class="header-anchor" href="#示例2-日志装饰器"><span>示例2：日志装饰器</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;记录函数调用日志&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;调用函数：</span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;参数：args=</span><span class="token interpolation"><span class="token punctuation">{</span>args<span class="token punctuation">}</span></span><span class="token string">, kwargs=</span><span class="token interpolation"><span class="token punctuation">{</span>kwargs<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;返回值：</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> result</span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@log</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line"></span>
<span class="line">add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出：</span></span>
<span class="line"><span class="token comment"># 调用函数：add</span></span>
<span class="line"><span class="token comment"># 参数：args=(3, 5), kwargs={}</span></span>
<span class="line"><span class="token comment"># 返回值：8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例3-权限验证装饰器" tabindex="-1"><a class="header-anchor" href="#示例3-权限验证装饰器"><span>示例3：权限验证装饰器</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">require_auth</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;权限验证装饰器&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 假设从某处获取用户登录状态</span></span>
<span class="line">        is_logged_in <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> is_logged_in<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;请先登录！&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@require_auth</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">view_profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;查看个人资料&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">view_profile<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 查看个人资料</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-带参数的装饰器" tabindex="-1"><a class="header-anchor" href="#_4-带参数的装饰器"><span>4. 带参数的装饰器</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">repeat</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;重复执行装饰器&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> result</span>
<span class="line">        <span class="token keyword">return</span> wrapper</span>
<span class="line">    <span class="token keyword">return</span> decorator</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">say_hello<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出：</span></span>
<span class="line"><span class="token comment"># Hello!</span></span>
<span class="line"><span class="token comment"># Hello!</span></span>
<span class="line"><span class="token comment"># Hello!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-多个装饰器叠加" tabindex="-1"><a class="header-anchor" href="#_5-多个装饰器叠加"><span>5. 多个装饰器叠加</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">decorator1</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;装饰器1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">decorator2</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;装饰器2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@decorator1</span></span>
<span class="line"><span class="token decorator annotation punctuation">@decorator2</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原函数&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">test<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出：</span></span>
<span class="line"><span class="token comment"># 装饰器1</span></span>
<span class="line"><span class="token comment"># 装饰器2</span></span>
<span class="line"><span class="token comment"># 原函数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、内置高阶函数" tabindex="-1"><a class="header-anchor" href="#六、内置高阶函数"><span>六、内置高阶函数</span></a></h2><h3 id="_1-map-函数" tabindex="-1"><a class="header-anchor" href="#_1-map-函数"><span>1. map()函数</span></a></h3><p>对序列中的每个元素应用函数。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 计算平方</span></span>
<span class="line">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">squares <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span>  <span class="token comment"># [1, 4, 9, 16, 25]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串转大写</span></span>
<span class="line">words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">]</span></span>
<span class="line">upper_words <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>upper_words<span class="token punctuation">)</span>  <span class="token comment"># [&#39;HELLO&#39;, &#39;WORLD&#39;, &#39;PYTHON&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-filter-函数" tabindex="-1"><a class="header-anchor" href="#_2-filter-函数"><span>2. filter()函数</span></a></h3><p>过滤序列中的元素。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 过滤偶数</span></span>
<span class="line">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span></span>
<span class="line">evens <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>evens<span class="token punctuation">)</span>  <span class="token comment"># [2, 4, 6, 8, 10]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 过滤空字符串</span></span>
<span class="line">words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">]</span></span>
<span class="line">non_empty <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>non_empty<span class="token punctuation">)</span>  <span class="token comment"># [&#39;hello&#39;, &#39;world&#39;, &#39;python&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-reduce-函数" tabindex="-1"><a class="header-anchor" href="#_3-reduce-函数"><span>3. reduce()函数</span></a></h3><p>对序列中的元素进行累积操作。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 计算累加和</span></span>
<span class="line">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">total <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>  <span class="token comment"># 15</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 计算累乘积</span></span>
<span class="line">product <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span>  <span class="token comment"># 120</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="七、实战练习" tabindex="-1"><a class="header-anchor" href="#七、实战练习"><span>七、实战练习</span></a></h2><h3 id="练习1-实现缓存装饰器" tabindex="-1"><a class="header-anchor" href="#练习1-实现缓存装饰器"><span>练习1：实现缓存装饰器</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">cache</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;缓存装饰器&quot;&quot;&quot;</span></span>
<span class="line">    cached_results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> args <span class="token keyword">in</span> cached_results<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;从缓存中获取结果：</span><span class="token interpolation"><span class="token punctuation">{</span>args<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> cached_results<span class="token punctuation">[</span>args<span class="token punctuation">]</span></span>
<span class="line">        </span>
<span class="line">        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span></span>
<span class="line">        cached_results<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> result</span>
<span class="line">        <span class="token keyword">return</span> result</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@cache</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">return</span> fibonacci<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fibonacci<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 55</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 从缓存中获取</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习2-实现重试装饰器" tabindex="-1"><a class="header-anchor" href="#练习2-实现重试装饰器"><span>练习2：实现重试装饰器</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> time</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">retry</span><span class="token punctuation">(</span>max_attempts<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;重试装饰器&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">for</span> attempt <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_attempts<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;第</span><span class="token interpolation"><span class="token punctuation">{</span>attempt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">次尝试失败：</span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">if</span> attempt <span class="token operator">&lt;</span> max_attempts <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">                        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;达到最大重试次数&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token keyword">raise</span></span>
<span class="line">        <span class="token keyword">return</span> wrapper</span>
<span class="line">    <span class="token keyword">return</span> decorator</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@retry</span><span class="token punctuation">(</span>max_attempts<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">unstable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">import</span> random</span>
<span class="line">    <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.7</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;随机错误&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;成功&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># unstable_function()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="八、知识点总结" tabindex="-1"><a class="header-anchor" href="#八、知识点总结"><span>八、知识点总结</span></a></h2><h3 id="✅-核心要点" tabindex="-1"><a class="header-anchor" href="#✅-核心要点"><span>✅ 核心要点</span></a></h3><ol><li><strong>Lambda函数</strong>：匿名函数，适合简单的一行表达式</li><li><strong>递归</strong>：函数调用自己，需要有递归出口</li><li><strong>闭包</strong>：内层函数引用外层函数的变量</li><li><strong>装饰器</strong>：在不修改原函数的情况下添加功能</li><li><strong>高阶函数</strong>：map、filter、reduce</li></ol><h3 id="📝-面试重点" tabindex="-1"><a class="header-anchor" href="#📝-面试重点"><span>📝 面试重点</span></a></h3><ul><li>Lambda函数的使用场景</li><li>递归的优缺点及优化方法</li><li>闭包的概念和应用</li><li>装饰器的原理和实现</li><li>nonlocal关键字的作用</li></ul><hr>`,92)),a("p",null,[n[2]||(n[2]=a("strong",null,"上一章：",-1)),n[3]||(n[3]=s()),e(p,{to:"/tutorials/python-ai/python/%E7%AC%AC02%E7%AB%A0-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/01-%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80.html"},{default:t(()=>[...n[0]||(n[0]=[s("函数基础",-1)])]),_:1}),n[4]||(n[4]=a("br",null,null,-1)),n[5]||(n[5]=a("strong",null,"下一章：",-1)),n[6]||(n[6]=s()),e(p,{to:"/tutorials/python-ai/python/%E7%AC%AC02%E7%AB%A0-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/03-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E7%BA%A7.html"},{default:t(()=>[...n[1]||(n[1]=[s("面向对象初级",-1)])]),_:1}),n[7]||(n[7]=s(" →",-1))])])}const v=l(r,[["render",d]]),b=JSON.parse('{"path":"/tutorials/python-ai/python/di02zhang-hexinbiancheng/02-hanshujinjie.html","title":"函数进阶","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、函数作为参数传递","slug":"一、函数作为参数传递","link":"#一、函数作为参数传递","children":[{"level":3,"title":"1. 基本概念","slug":"_1-基本概念","link":"#_1-基本概念","children":[]}]},{"level":2,"title":"二、Lambda匿名函数","slug":"二、lambda匿名函数","link":"#二、lambda匿名函数","children":[{"level":3,"title":"1. Lambda语法","slug":"_1-lambda语法","link":"#_1-lambda语法","children":[]},{"level":3,"title":"2. 基本使用","slug":"_2-基本使用","link":"#_2-基本使用","children":[]},{"level":3,"title":"3. Lambda作为参数","slug":"_3-lambda作为参数","link":"#_3-lambda作为参数","children":[]},{"level":3,"title":"4. Lambda的应用","slug":"_4-lambda的应用","link":"#_4-lambda的应用","children":[]}]},{"level":2,"title":"三、递归函数","slug":"三、递归函数","link":"#三、递归函数","children":[{"level":3,"title":"1. 什么是递归？","slug":"_1-什么是递归","link":"#_1-什么是递归","children":[]},{"level":3,"title":"2. 递归示例","slug":"_2-递归示例","link":"#_2-递归示例","children":[]},{"level":3,"title":"3. 递归的优缺点","slug":"_3-递归的优缺点","link":"#_3-递归的优缺点","children":[]}]},{"level":2,"title":"四、闭包（Closure）","slug":"四、闭包-closure","link":"#四、闭包-closure","children":[{"level":3,"title":"1. 什么是闭包？","slug":"_1-什么是闭包","link":"#_1-什么是闭包","children":[]},{"level":3,"title":"2. 闭包的定义","slug":"_2-闭包的定义","link":"#_2-闭包的定义","children":[]},{"level":3,"title":"3. 闭包的应用","slug":"_3-闭包的应用","link":"#_3-闭包的应用","children":[]}]},{"level":2,"title":"五、装饰器（Decorator）","slug":"五、装饰器-decorator","link":"#五、装饰器-decorator","children":[{"level":3,"title":"1. 什么是装饰器？","slug":"_1-什么是装饰器","link":"#_1-什么是装饰器","children":[]},{"level":3,"title":"2. 装饰器的基本语法","slug":"_2-装饰器的基本语法","link":"#_2-装饰器的基本语法","children":[]},{"level":3,"title":"3. 装饰器的应用","slug":"_3-装饰器的应用","link":"#_3-装饰器的应用","children":[]},{"level":3,"title":"4. 带参数的装饰器","slug":"_4-带参数的装饰器","link":"#_4-带参数的装饰器","children":[]},{"level":3,"title":"5. 多个装饰器叠加","slug":"_5-多个装饰器叠加","link":"#_5-多个装饰器叠加","children":[]}]},{"level":2,"title":"六、内置高阶函数","slug":"六、内置高阶函数","link":"#六、内置高阶函数","children":[{"level":3,"title":"1. map()函数","slug":"_1-map-函数","link":"#_1-map-函数","children":[]},{"level":3,"title":"2. filter()函数","slug":"_2-filter-函数","link":"#_2-filter-函数","children":[]},{"level":3,"title":"3. reduce()函数","slug":"_3-reduce-函数","link":"#_3-reduce-函数","children":[]}]},{"level":2,"title":"七、实战练习","slug":"七、实战练习","link":"#七、实战练习","children":[{"level":3,"title":"练习1：实现缓存装饰器","slug":"练习1-实现缓存装饰器","link":"#练习1-实现缓存装饰器","children":[]},{"level":3,"title":"练习2：实现重试装饰器","slug":"练习2-实现重试装饰器","link":"#练习2-实现重试装饰器","children":[]}]},{"level":2,"title":"八、知识点总结","slug":"八、知识点总结","link":"#八、知识点总结","children":[{"level":3,"title":"✅ 核心要点","slug":"✅-核心要点","link":"#✅-核心要点","children":[]},{"level":3,"title":"📝 面试重点","slug":"📝-面试重点","link":"#📝-面试重点","children":[]}]}],"git":{"createdTime":1761052725000,"updatedTime":1761052725000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/python-ai/python/第02章-核心编程/02-函数进阶.md"}');export{v as comp,b as data};
