import{_ as t,c as e,d as l,e as s,f as a,b as i,w as o,r as c,o as u}from"./app-BVgOaNeG.js";const r={};function k(d,n){const p=c("RouteLink");return u(),e("div",null,[n[3]||(n[3]=l(`<h1 id="搜索算法" tabindex="-1"><a class="header-anchor" href="#搜索算法"><span>搜索算法</span></a></h1><blockquote><p>掌握常见的搜索算法</p></blockquote><h2 id="📚-学习目标" tabindex="-1"><a class="header-anchor" href="#📚-学习目标"><span>📚 学习目标</span></a></h2><ul><li>掌握线性搜索和二分搜索</li><li>理解深度优先搜索（DFS）</li><li>理解广度优先搜索（BFS）</li><li>学会应用搜索算法解决问题</li></ul><h2 id="_1-线性搜索" tabindex="-1"><a class="header-anchor" href="#_1-线性搜索"><span>1. 线性搜索</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">linear_search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    线性搜索</span>
<span class="line">    时间复杂度: O(n)</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> num <span class="token operator">==</span> target<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> i</span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 测试</span></span>
<span class="line">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>linear_search<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-二分搜索" tabindex="-1"><a class="header-anchor" href="#_2-二分搜索"><span>2. 二分搜索</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    二分搜索（数组必须有序）</span>
<span class="line">    时间复杂度: O(log n)</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span></span>
<span class="line">        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> mid</span>
<span class="line">        <span class="token keyword">elif</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span></span>
<span class="line">            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 递归版本</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">binary_search_recursive</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> right <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span></span>
<span class="line">        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> left <span class="token operator">&gt;</span> right<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line">    </span>
<span class="line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> mid</span>
<span class="line">    <span class="token keyword">elif</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> binary_search_recursive<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> binary_search_recursive<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 测试</span></span>
<span class="line">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>binary_search<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-深度优先搜索-dfs" tabindex="-1"><a class="header-anchor" href="#_3-深度优先搜索-dfs"><span>3. 深度优先搜索（DFS）</span></a></h2><h3 id="_3-1-图的dfs" tabindex="-1"><a class="header-anchor" href="#_3-1-图的dfs"><span>3.1 图的DFS</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> visited<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    深度优先搜索</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> visited <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span></span>
<span class="line">        visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>start<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> neighbor <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">            dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> neighbor<span class="token punctuation">,</span> visited<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> visited</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 测试</span></span>
<span class="line">graph <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;A&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;B&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;C&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;D&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;E&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;F&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># A B D E F C</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-迭代版dfs" tabindex="-1"><a class="header-anchor" href="#_3-2-迭代版dfs"><span>3.2 迭代版DFS</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">dfs_iterative</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;使用栈实现DFS&quot;&quot;&quot;</span></span>
<span class="line">    visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    stack <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> stack<span class="token punctuation">:</span></span>
<span class="line">        vertex <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> vertex <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">            visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>vertex<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span>vertex<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment"># 将未访问的邻居入栈</span></span>
<span class="line">            <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">if</span> neighbor <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> visited</span>
<span class="line"></span>
<span class="line">dfs_iterative<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-广度优先搜索-bfs" tabindex="-1"><a class="header-anchor" href="#_4-广度优先搜索-bfs"><span>4. 广度优先搜索（BFS）</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    广度优先搜索</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> queue<span class="token punctuation">:</span></span>
<span class="line">        vertex <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>vertex<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> graph<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> neighbor <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">                visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span></span>
<span class="line">                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> visited</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 测试</span></span>
<span class="line">bfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># A B C D E F</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-二叉树遍历" tabindex="-1"><a class="header-anchor" href="#_5-二叉树遍历"><span>5. 二叉树遍历</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val</span>
<span class="line">        self<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">        self<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">dfs_preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;前序遍历（递归）&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    dfs_preorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">    dfs_preorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">dfs_inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;中序遍历（递归）&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    dfs_inorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    dfs_inorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">dfs_postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;后序遍历（递归）&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    dfs_postorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">    dfs_postorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">bfs_level_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;层序遍历（BFS）&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    </span>
<span class="line">    queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> queue<span class="token punctuation">:</span></span>
<span class="line">        node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span></span>
<span class="line">            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span></span>
<span class="line">            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 构建二叉树</span></span>
<span class="line">root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">root<span class="token punctuation">.</span>left <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">root<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;前序:&#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">dfs_preorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment"># 1 2 4 5 3</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n中序:&#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">dfs_inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>   <span class="token comment"># 4 2 5 1 3</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n后序:&#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">dfs_postorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment"># 4 5 2 3 1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n层序:&#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">bfs_level_order<span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment"># 1 2 3 4 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-实战应用" tabindex="-1"><a class="header-anchor" href="#_6-实战应用"><span>6. 实战应用</span></a></h2><h3 id="_6-1-岛屿数量" tabindex="-1"><a class="header-anchor" href="#_6-1-岛屿数量"><span>6.1 岛屿数量</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">num_islands</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    计算岛屿数量（DFS）</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> grid<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> i <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span> <span class="token keyword">or</span> </span>
<span class="line">            j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">or</span> </span>
<span class="line">            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        </span>
<span class="line">        grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span>  <span class="token comment"># 标记为已访问</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 访问四个方向</span></span>
<span class="line">        dfs<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span></span>
<span class="line">        dfs<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span></span>
<span class="line">        dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">:</span></span>
<span class="line">                dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span></span>
<span class="line">                count <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> count</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 测试</span></span>
<span class="line">grid <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>num_islands<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-最短路径-bfs" tabindex="-1"><a class="header-anchor" href="#_6-2-最短路径-bfs"><span>6.2 最短路径（BFS）</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">shortest_path</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    使用BFS找最短路径</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    visited <span class="token operator">=</span> <span class="token punctuation">{</span>start<span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> queue<span class="token punctuation">:</span></span>
<span class="line">        vertex<span class="token punctuation">,</span> path <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> vertex <span class="token operator">==</span> end<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> path</span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> graph<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> neighbor <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">                visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span></span>
<span class="line">                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">,</span> path <span class="token operator">+</span> <span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 测试</span></span>
<span class="line">path <span class="token operator">=</span> shortest_path<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39; -&gt; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># A -&gt; C -&gt; F</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-二叉树的最大深度" tabindex="-1"><a class="header-anchor" href="#_6-3-二叉树的最大深度"><span>6.3 二叉树的最大深度</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">max_depth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;计算二叉树最大深度（DFS）&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_depth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> max_depth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># BFS 版本</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">max_depth_bfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span></span>
<span class="line">    </span>
<span class="line">    queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    max_d <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> queue<span class="token punctuation">:</span></span>
<span class="line">        node<span class="token punctuation">,</span> depth <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        max_d <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_d<span class="token punctuation">,</span> depth<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span></span>
<span class="line">            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span></span>
<span class="line">            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> max_d</span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>max_depth<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📝-练习题" tabindex="-1"><a class="header-anchor" href="#📝-练习题"><span>📝 练习题</span></a></h2><ol><li>实现二叉树的锯齿形层序遍历</li><li>判断二叉树是否对称</li><li>找到图中两点之间的所有路径</li><li>实现单词接龙问题</li></ol><hr>`,27)),s("p",null,[n[1]||(n[1]=s("strong",null,"下一节：",-1)),n[2]||(n[2]=a()),i(p,{to:"/tutorials/python-ai/python/%E7%AC%AC04%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/04-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html"},{default:o(()=>[...n[0]||(n[0]=[a("动态规划",-1)])]),_:1})])])}const m=t(r,[["render",k]]),b=JSON.parse('{"path":"/tutorials/python-ai/python/di04zhang-shujujiegouyusuanfa/03-sousuosuanfa.html","title":"搜索算法","lang":"zh-CN","frontmatter":{"title":"搜索算法"},"headers":[{"level":2,"title":"📚 学习目标","slug":"📚-学习目标","link":"#📚-学习目标","children":[]},{"level":2,"title":"1. 线性搜索","slug":"_1-线性搜索","link":"#_1-线性搜索","children":[]},{"level":2,"title":"2. 二分搜索","slug":"_2-二分搜索","link":"#_2-二分搜索","children":[]},{"level":2,"title":"3. 深度优先搜索（DFS）","slug":"_3-深度优先搜索-dfs","link":"#_3-深度优先搜索-dfs","children":[{"level":3,"title":"3.1 图的DFS","slug":"_3-1-图的dfs","link":"#_3-1-图的dfs","children":[]},{"level":3,"title":"3.2 迭代版DFS","slug":"_3-2-迭代版dfs","link":"#_3-2-迭代版dfs","children":[]}]},{"level":2,"title":"4. 广度优先搜索（BFS）","slug":"_4-广度优先搜索-bfs","link":"#_4-广度优先搜索-bfs","children":[]},{"level":2,"title":"5. 二叉树遍历","slug":"_5-二叉树遍历","link":"#_5-二叉树遍历","children":[]},{"level":2,"title":"6. 实战应用","slug":"_6-实战应用","link":"#_6-实战应用","children":[{"level":3,"title":"6.1 岛屿数量","slug":"_6-1-岛屿数量","link":"#_6-1-岛屿数量","children":[]},{"level":3,"title":"6.2 最短路径（BFS）","slug":"_6-2-最短路径-bfs","link":"#_6-2-最短路径-bfs","children":[]},{"level":3,"title":"6.3 二叉树的最大深度","slug":"_6-3-二叉树的最大深度","link":"#_6-3-二叉树的最大深度","children":[]}]},{"level":2,"title":"📝 练习题","slug":"📝-练习题","link":"#📝-练习题","children":[]}],"git":{"createdTime":1761052725000,"updatedTime":1761052725000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/python-ai/python/第04章-数据结构与算法/03-搜索算法.md"}');export{m as comp,b as data};
