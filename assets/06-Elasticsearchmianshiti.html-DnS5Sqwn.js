import{_ as e,c as t,d as l,e as p,f as n,b as i,w as o,r as c,o as r}from"./app-I6OnLCmc.js";const u={};function d(v,s){const a=c("RouteLink");return r(),t("div",null,[s[2]||(s[2]=l(`<h1 id="_06-elasticsearch面试题" tabindex="-1"><a class="header-anchor" href="#_06-elasticsearch面试题"><span>06 - Elasticsearch面试题</span></a></h1><h2 id="🎯-基础知识" tabindex="-1"><a class="header-anchor" href="#🎯-基础知识"><span>🎯 基础知识</span></a></h2><h3 id="_1-什么是elasticsearch-有什么特点" tabindex="-1"><a class="header-anchor" href="#_1-什么是elasticsearch-有什么特点"><span>1. 什么是Elasticsearch？有什么特点？</span></a></h3><p><strong>答案：</strong> Elasticsearch是一个基于Lucene的分布式搜索和分析引擎。</p><p><strong>特点：</strong></p><ul><li>近实时搜索（延迟通常在1秒内）</li><li>分布式架构，水平扩展</li><li>RESTful API，简单易用</li><li>全文检索能力强</li><li>支持结构化和非结构化数据</li></ul><h3 id="_2-elasticsearch的核心概念有哪些" tabindex="-1"><a class="header-anchor" href="#_2-elasticsearch的核心概念有哪些"><span>2. Elasticsearch的核心概念有哪些？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>Index</td><td>索引，类似数据库</td></tr><tr><td>Document</td><td>文档，类似数据库的行</td></tr><tr><td>Field</td><td>字段，类似数据库的列</td></tr><tr><td>Mapping</td><td>映射，类似数据库的Schema</td></tr><tr><td>Shard</td><td>分片，数据分片存储</td></tr><tr><td>Replica</td><td>副本，数据备份</td></tr></tbody></table><h3 id="_3-elasticsearch和mysql的区别" tabindex="-1"><a class="header-anchor" href="#_3-elasticsearch和mysql的区别"><span>3. Elasticsearch和MySQL的区别？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>Elasticsearch</th><th>MySQL</th></tr></thead><tbody><tr><td>数据模型</td><td>文档型</td><td>关系型</td></tr><tr><td>查询语言</td><td>DSL</td><td>SQL</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>全文检索</td><td>强</td><td>弱</td></tr><tr><td>聚合分析</td><td>强</td><td>一般</td></tr><tr><td>应用场景</td><td>搜索、日志分析</td><td>OLTP</td></tr></tbody></table><h3 id="_4-text和keyword的区别" tabindex="-1"><a class="header-anchor" href="#_4-text和keyword的区别"><span>4. text和keyword的区别？</span></a></h3><p><strong>答案：</strong></p><p><strong>text：</strong></p><ul><li>会被分词</li><li>用于全文检索</li><li>不能用于排序和聚合</li><li>示例：商品描述</li></ul><p><strong>keyword：</strong></p><ul><li>不分词，精确匹配</li><li>可以排序和聚合</li><li>示例：商品分类、标签</li></ul><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-elasticsearch的倒排索引是什么" tabindex="-1"><a class="header-anchor" href="#_5-elasticsearch的倒排索引是什么"><span>5. Elasticsearch的倒排索引是什么？</span></a></h3><p><strong>答案：</strong></p><p>倒排索引是一种索引结构，存储了词项到文档的映射关系。</p><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">文档1: &quot;快速的棕色狐狸&quot;</span>
<span class="line">文档2: &quot;懒惰的狗&quot;</span>
<span class="line">文档3: &quot;快速的狗&quot;</span>
<span class="line"></span>
<span class="line">倒排索引：</span>
<span class="line">快速 → [1, 3]</span>
<span class="line">棕色 → [1]</span>
<span class="line">狐狸 → [1]</span>
<span class="line">懒惰 → [2]</span>
<span class="line">狗   → [2, 3]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优势：</strong></p><ul><li>快速查找包含某个词的文档</li><li>支持全文检索</li><li>支持相关性评分</li></ul><h2 id="🔥-进阶问题" tabindex="-1"><a class="header-anchor" href="#🔥-进阶问题"><span>🔥 进阶问题</span></a></h2><h3 id="_6-elasticsearch的写入流程" tabindex="-1"><a class="header-anchor" href="#_6-elasticsearch的写入流程"><span>6. Elasticsearch的写入流程？</span></a></h3><p><strong>答案：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. 客户端请求 → 协调节点</span>
<span class="line">2. 协调节点计算分片 → 主分片</span>
<span class="line">3. 主分片写入 → 内存buffer</span>
<span class="line">4. refresh（默认1秒） → segment（可搜索）</span>
<span class="line">5. translog持久化 → 磁盘</span>
<span class="line">6. 主分片同步 → 副本分片</span>
<span class="line">7. 返回响应</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键点：</strong></p><ul><li>refresh使数据可搜索（近实时）</li><li>translog保证数据不丢失</li><li>副本同步保证高可用</li></ul><h3 id="_7-elasticsearch的查询流程" tabindex="-1"><a class="header-anchor" href="#_7-elasticsearch的查询流程"><span>7. Elasticsearch的查询流程？</span></a></h3><p><strong>答案：</strong></p><p><strong>Query Then Fetch（默认）：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. 客户端请求 → 协调节点</span>
<span class="line">2. 协调节点广播查询 → 所有分片</span>
<span class="line">3. 各分片返回 → 文档ID和评分</span>
<span class="line">4. 协调节点排序 → 选出Top N</span>
<span class="line">5. 协调节点fetch → 获取完整文档</span>
<span class="line">6. 返回结果给客户端</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-如何优化elasticsearch查询性能" tabindex="-1"><a class="header-anchor" href="#_8-如何优化elasticsearch查询性能"><span>8. 如何优化Elasticsearch查询性能？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 使用filter代替query</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;bool&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;手机&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 控制返回字段</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;price&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 避免深分页</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token comment">// 使用search_after</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;search_after&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;sales&quot;</span><span class="token operator">:</span> <span class="token string">&quot;desc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;asc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 合理设置分片数</strong></p><ul><li>单分片大小：20-50GB</li><li>分片数 = 数据量 / 50GB</li></ul><p><strong>5. 使用路由</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;_routing&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user123&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-elasticsearch如何保证数据不丢失" tabindex="-1"><a class="header-anchor" href="#_9-elasticsearch如何保证数据不丢失"><span>9. Elasticsearch如何保证数据不丢失？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. translog机制</strong></p><ul><li>写入时同步写translog</li><li>定期flush到磁盘</li></ul><p><strong>2. 副本机制</strong></p><ul><li>设置多个副本</li><li>主分片和副本分布在不同节点</li></ul><p><strong>3. 持久化配置</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">index.translog.durability</span><span class="token punctuation">:</span> request  <span class="token comment"># 每次请求都持久化</span></span>
<span class="line"><span class="token key atrule">index.translog.sync_interval</span><span class="token punctuation">:</span> 5s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-elasticsearch的分片策略" tabindex="-1"><a class="header-anchor" href="#_10-elasticsearch的分片策略"><span>10. Elasticsearch的分片策略？</span></a></h3><p><strong>答案：</strong></p><p><strong>主分片数：</strong></p><ul><li>创建后不可修改</li><li>计算公式：数据量 / 50GB</li><li>建议：3-5个</li></ul><p><strong>副本数：</strong></p><ul><li>可动态调整</li><li>建议：至少1个</li><li>提高查询性能和可用性</li></ul><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;number_of_shards&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;number_of_replicas&quot;</span><span class="token operator">:</span> <span class="token number">2</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-match和term查询的区别" tabindex="-1"><a class="header-anchor" href="#_11-match和term查询的区别"><span>11. match和term查询的区别？</span></a></h3><p><strong>答案：</strong></p><p><strong>match查询：</strong></p><ul><li>全文检索</li><li>会分词</li><li>计算相关性评分</li><li>用于text字段</li></ul><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;iPhone 手机&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>term查询：</strong></p><ul><li>精确匹配</li><li>不分词</li><li>不计算评分（在filter中）</li><li>用于keyword字段</li></ul><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;手机&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-如何实现mysql数据同步到es" tabindex="-1"><a class="header-anchor" href="#_12-如何实现mysql数据同步到es"><span>12. 如何实现MySQL数据同步到ES？</span></a></h3><p><strong>答案：</strong></p><p><strong>方案1：定时同步</strong></p><ul><li>优点：实现简单</li><li>缺点：有延迟</li><li>适用：对实时性要求不高</li></ul><p><strong>方案2：Logstash</strong></p><ul><li>使用JDBC Input插件</li><li>定时全量/增量同步</li></ul><p><strong>方案3：Canal（推荐）</strong></p><ul><li>监听MySQL binlog</li><li>实时同步</li><li>无侵入</li></ul><p><strong>方案4：应用双写</strong></p><ul><li>写MySQL同时写ES</li><li>保证强一致性</li><li>代码侵入性高</li></ul><h3 id="_13-elasticsearch集群如何实现高可用" tabindex="-1"><a class="header-anchor" href="#_13-elasticsearch集群如何实现高可用"><span>13. Elasticsearch集群如何实现高可用？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 主节点高可用</strong></p><ul><li>至少3个主节点</li><li>避免脑裂</li></ul><p><strong>2. 数据节点高可用</strong></p><ul><li>设置副本</li><li>分布在不同节点</li></ul><p><strong>3. 负载均衡</strong></p><ul><li>使用协调节点</li><li>Nginx/HAProxy</li></ul><p><strong>4. 监控告警</strong></p><ul><li>实时监控集群状态</li><li>及时处理异常</li></ul><h2 id="💼-实战问题" tabindex="-1"><a class="header-anchor" href="#💼-实战问题"><span>💼 实战问题</span></a></h2><h3 id="_14-如何设计电商搜索系统的索引" tabindex="-1"><a class="header-anchor" href="#_14-如何设计电商搜索系统的索引"><span>14. 如何设计电商搜索系统的索引？</span></a></h3><p><strong>答案：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /shop_products</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;number_of_shards&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;number_of_replicas&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;analysis&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;ik_analyzer&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;custom&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">&quot;tokenizer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;long&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;brand&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;sales&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;long&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;rating&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键点：</strong></p><ul><li>title使用text+keyword多字段</li><li>分类、品牌用keyword</li><li>设置合理的分片和副本</li></ul><h3 id="_15-如何处理elasticsearch集群yellow状态" tabindex="-1"><a class="header-anchor" href="#_15-如何处理elasticsearch集群yellow状态"><span>15. 如何处理Elasticsearch集群Yellow状态？</span></a></h3><p><strong>答案：</strong></p><p><strong>原因：</strong> 部分副本未分配</p><p><strong>排查步骤：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 查看集群健康</span></span>
<span class="line">GET /_cluster/health</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 查看未分配的分片</span></span>
<span class="line">GET /_cat/shards?h<span class="token operator">=</span>index,shard,prirep,state,unassigned.reason</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 查看分片分配失败原因</span></span>
<span class="line">GET /_cluster/allocation/explain</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 增加节点</span></span>
<span class="line"><span class="token comment"># 2. 调整副本数</span></span>
<span class="line">PUT /index_name/_settings</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;number_of_replicas&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 手动分配分片</span></span>
<span class="line">POST /_cluster/reroute</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16-elasticsearch如何实现搜索建议-自动补全" tabindex="-1"><a class="header-anchor" href="#_16-elasticsearch如何实现搜索建议-自动补全"><span>16. Elasticsearch如何实现搜索建议（自动补全）？</span></a></h3><p><strong>答案：</strong></p><p><strong>使用Completion Suggester：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token comment">// 1. 定义mapping</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;suggest&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;completion&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 索引数据</span></span>
<span class="line">POST /products/_doc/<span class="token number">1</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;suggest&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;input&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;iPhone 14&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;iPhone 14 Pro&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;weight&quot;</span><span class="token operator">:</span> <span class="token number">100</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 搜索建议</span></span>
<span class="line">POST /products/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;suggest&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;product_suggest&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;prefix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;iPh&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;completion&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;suggest&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">5</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-如何优化elasticsearch的写入性能" tabindex="-1"><a class="header-anchor" href="#_17-如何优化elasticsearch的写入性能"><span>17. 如何优化Elasticsearch的写入性能？</span></a></h3><p><strong>答案：</strong></p><p><strong>1. 批量写入</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">BulkRequest</span> bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 建议每批1000-5000条</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 调整refresh_interval</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;refresh_interval&quot;</span><span class="token operator">:</span> <span class="token string">&quot;30s&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 增加bulk线程池</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">thread_pool.bulk.queue_size</span><span class="token punctuation">:</span> <span class="token number">1000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>4. 使用自动生成ID</strong></p><ul><li>避免检查ID是否存在</li></ul><p><strong>5. 禁用_source</strong></p><ul><li>如果不需要返回原文</li></ul><h2 id="💡-总结" tabindex="-1"><a class="header-anchor" href="#💡-总结"><span>💡 总结</span></a></h2><p><strong>高频考点：</strong></p><ul><li>✅ 倒排索引原理</li><li>✅ 写入和查询流程</li><li>✅ 性能优化方法</li><li>✅ 集群高可用方案</li><li>✅ 分片和副本策略</li><li>✅ 数据同步方案</li></ul><p><strong>面试建议：</strong></p><ul><li>理解底层原理</li><li>结合实际项目经验</li><li>掌握常见问题解决方案</li><li>了解最新版本特性</li></ul><hr><p><strong>Elasticsearch教程完结！</strong> 🎉</p>`,128)),p("p",null,[s[1]||(s[1]=n("继续学习 → ",-1)),i(a,{to:"/tutorials/java-backend/"},{default:o(()=>[...s[0]||(s[0]=[n("返回Java后端开发",-1)])]),_:1})])])}const m=e(u,[["render",d]]),h=JSON.parse('{"path":"/tutorials/java-backend/elasticsearch/06-Elasticsearchmianshiti.html","title":"Elasticsearch面试题","lang":"zh-CN","frontmatter":{"title":"Elasticsearch面试题"},"headers":[{"level":2,"title":"🎯 基础知识","slug":"🎯-基础知识","link":"#🎯-基础知识","children":[{"level":3,"title":"1. 什么是Elasticsearch？有什么特点？","slug":"_1-什么是elasticsearch-有什么特点","link":"#_1-什么是elasticsearch-有什么特点","children":[]},{"level":3,"title":"2. Elasticsearch的核心概念有哪些？","slug":"_2-elasticsearch的核心概念有哪些","link":"#_2-elasticsearch的核心概念有哪些","children":[]},{"level":3,"title":"3. Elasticsearch和MySQL的区别？","slug":"_3-elasticsearch和mysql的区别","link":"#_3-elasticsearch和mysql的区别","children":[]},{"level":3,"title":"4. text和keyword的区别？","slug":"_4-text和keyword的区别","link":"#_4-text和keyword的区别","children":[]},{"level":3,"title":"5. Elasticsearch的倒排索引是什么？","slug":"_5-elasticsearch的倒排索引是什么","link":"#_5-elasticsearch的倒排索引是什么","children":[]}]},{"level":2,"title":"🔥 进阶问题","slug":"🔥-进阶问题","link":"#🔥-进阶问题","children":[{"level":3,"title":"6. Elasticsearch的写入流程？","slug":"_6-elasticsearch的写入流程","link":"#_6-elasticsearch的写入流程","children":[]},{"level":3,"title":"7. Elasticsearch的查询流程？","slug":"_7-elasticsearch的查询流程","link":"#_7-elasticsearch的查询流程","children":[]},{"level":3,"title":"8. 如何优化Elasticsearch查询性能？","slug":"_8-如何优化elasticsearch查询性能","link":"#_8-如何优化elasticsearch查询性能","children":[]},{"level":3,"title":"9. Elasticsearch如何保证数据不丢失？","slug":"_9-elasticsearch如何保证数据不丢失","link":"#_9-elasticsearch如何保证数据不丢失","children":[]},{"level":3,"title":"10. Elasticsearch的分片策略？","slug":"_10-elasticsearch的分片策略","link":"#_10-elasticsearch的分片策略","children":[]},{"level":3,"title":"11. match和term查询的区别？","slug":"_11-match和term查询的区别","link":"#_11-match和term查询的区别","children":[]},{"level":3,"title":"12. 如何实现MySQL数据同步到ES？","slug":"_12-如何实现mysql数据同步到es","link":"#_12-如何实现mysql数据同步到es","children":[]},{"level":3,"title":"13. Elasticsearch集群如何实现高可用？","slug":"_13-elasticsearch集群如何实现高可用","link":"#_13-elasticsearch集群如何实现高可用","children":[]}]},{"level":2,"title":"💼 实战问题","slug":"💼-实战问题","link":"#💼-实战问题","children":[{"level":3,"title":"14. 如何设计电商搜索系统的索引？","slug":"_14-如何设计电商搜索系统的索引","link":"#_14-如何设计电商搜索系统的索引","children":[]},{"level":3,"title":"15. 如何处理Elasticsearch集群Yellow状态？","slug":"_15-如何处理elasticsearch集群yellow状态","link":"#_15-如何处理elasticsearch集群yellow状态","children":[]},{"level":3,"title":"16. Elasticsearch如何实现搜索建议（自动补全）？","slug":"_16-elasticsearch如何实现搜索建议-自动补全","link":"#_16-elasticsearch如何实现搜索建议-自动补全","children":[]},{"level":3,"title":"17. 如何优化Elasticsearch的写入性能？","slug":"_17-如何优化elasticsearch的写入性能","link":"#_17-如何优化elasticsearch的写入性能","children":[]}]},{"level":2,"title":"💡 总结","slug":"💡-总结","link":"#💡-总结","children":[]}],"git":{"createdTime":1760959407000,"updatedTime":1760959407000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java-backend/elasticsearch/06-Elasticsearch面试题.md"}');export{m as comp,h as data};
