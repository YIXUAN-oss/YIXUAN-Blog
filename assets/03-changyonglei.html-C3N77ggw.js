import{_ as l,c,d as o,e as a,f as s,b as p,w as e,r as i,o as u}from"./app-CzE7hWk8.js";const r={};function d(k,n){const t=i("RouteLink");return u(),c("div",null,[n[7]||(n[7]=o(`<h1 id="java-常用类" tabindex="-1"><a class="header-anchor" href="#java-常用类"><span>Java 常用类</span></a></h1><blockquote><p><strong>本章重点：</strong> 包装类、String、StringBuilder、StringBuffer、Math、日期类</p><p><strong>面试频率：</strong> ⭐⭐⭐⭐⭐</p></blockquote><hr><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#%E4%B8%80%E5%8C%85%E8%A3%85%E7%B1%BB">一、包装类</a></li><li><a href="#%E4%BA%8Cstring%E7%B1%BB">二、String类</a></li><li><a href="#%E4%B8%89stringbuffer%E7%B1%BB">三、StringBuffer类</a></li><li><a href="#%E5%9B%9Bstringbuilder%E7%B1%BB">四、StringBuilder类</a></li><li><a href="#%E4%BA%94math%E7%B1%BB">五、Math类</a></li><li><a href="#%E5%85%AD%E6%97%A5%E6%9C%9F%E7%B1%BB">六、日期类</a></li><li><a href="#%E4%B8%83%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">七、面试常见问题</a></li></ul><hr><h2 id="一、包装类" tabindex="-1"><a class="header-anchor" href="#一、包装类"><span>一、包装类</span></a></h2><h3 id="_1-1-包装类的概念" tabindex="-1"><a class="header-anchor" href="#_1-1-包装类的概念"><span>1.1 包装类的概念</span></a></h3><p><strong>包装类（Wrapper Class）：</strong> 将基本数据类型封装成对象。</p><p><strong>为什么需要包装类？</strong></p><ul><li>基本类型不是对象，无法调用方法</li><li>泛型不支持基本类型</li><li>需要 null 值表示&quot;无&quot;</li></ul><h3 id="_1-2-八大包装类" tabindex="-1"><a class="header-anchor" href="#_1-2-八大包装类"><span>1.2 八大包装类</span></a></h3><table><thead><tr><th>基本类型</th><th>包装类</th><th>父类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td><td>Number</td></tr><tr><td>short</td><td>Short</td><td>Number</td></tr><tr><td>int</td><td><strong>Integer</strong></td><td>Number</td></tr><tr><td>long</td><td>Long</td><td>Number</td></tr><tr><td>float</td><td>Float</td><td>Number</td></tr><tr><td>double</td><td>Double</td><td>Number</td></tr><tr><td>char</td><td><strong>Character</strong></td><td>Object</td></tr><tr><td>boolean</td><td>Boolean</td><td>Object</td></tr></tbody></table><h3 id="_1-3-装箱和拆箱" tabindex="-1"><a class="header-anchor" href="#_1-3-装箱和拆箱"><span>1.3 装箱和拆箱</span></a></h3><p><strong>装箱：</strong> 基本类型 → 包装类 <strong>拆箱：</strong> 包装类 → 基本类型</p><p><strong>手动装箱拆箱（JDK 5之前）：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 手动装箱</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 方式1</span></span>
<span class="line"><span class="token class-name">Integer</span> integer2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 方式2（推荐）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 手动拆箱</span></span>
<span class="line"><span class="token keyword">int</span> n2 <span class="token operator">=</span> integer1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自动装箱拆箱（JDK 5之后，推荐）：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 自动装箱</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Integer</span> integer <span class="token operator">=</span> n1<span class="token punctuation">;</span>  <span class="token comment">// 底层：Integer.valueOf(n1)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 自动拆箱</span></span>
<span class="line"><span class="token keyword">int</span> n2 <span class="token operator">=</span> integer<span class="token punctuation">;</span>  <span class="token comment">// 底层：integer.intValue()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-包装类型转换" tabindex="-1"><a class="header-anchor" href="#_1-4-包装类型转换"><span>1.4 包装类型转换</span></a></h3><p><strong>包装类 ↔ String：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// Integer → String</span></span>
<span class="line"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>                <span class="token comment">// 方式1</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 方式2</span></span>
<span class="line"><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 方式3（推荐）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// String → Integer</span></span>
<span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 方式1（自动装箱）</span></span>
<span class="line"><span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 方式2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-integer-常用方法" tabindex="-1"><a class="header-anchor" href="#_1-5-integer-常用方法"><span>1.5 Integer 常用方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 常量</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -2147483648</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2147483647</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方法</span></span>
<span class="line"><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 字符串转int</span></span>
<span class="line"><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 字符串转Integer</span></span>
<span class="line"><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 十进制转二进制字符串</span></span>
<span class="line"><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 十进制转十六进制字符串</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-character-常用方法" tabindex="-1"><a class="header-anchor" href="#_1-6-character-常用方法"><span>1.6 Character 常用方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token char">&#39;5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 判断是否是数字</span></span>
<span class="line"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetter</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 判断是否是字母</span></span>
<span class="line"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 判断是否是大写</span></span>
<span class="line"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 判断是否是小写</span></span>
<span class="line"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isWhitespace</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断是否是空白字符</span></span>
<span class="line"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 转大写</span></span>
<span class="line"><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 转小写</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-包装类的缓存机制" tabindex="-1"><a class="header-anchor" href="#_1-7-包装类的缓存机制"><span>1.7 包装类的缓存机制</span></a></h3><p><strong>Integer 缓存：</strong> -128 ~ 127</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true（使用缓存）</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false（超出缓存范围，创建新对象）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 建议：包装类比较使用 equals()</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、string类" tabindex="-1"><a class="header-anchor" href="#二、string类"><span>二、String类</span></a></h2><h3 id="_2-1-string-的特点" tabindex="-1"><a class="header-anchor" href="#_2-1-string-的特点"><span>2.1 String 的特点</span></a></h3><p><strong>特点：</strong></p><ol><li>String 对象用于保存字符串（字符序列）</li><li>字符串使用 Unicode 编码，一个字符占 2 个字节</li><li>String 是 final 类，不能被继承</li><li>String 实现了 Serializable（可序列化）、Comparable（可比较）接口</li><li>底层是 <code>char[] value</code>（JDK 8）或 <code>byte[] value</code>（JDK 9+）</li><li><strong>String 是不可变的</strong>（value 数组是 final 的）</li></ol><h3 id="_2-2-string-的创建方式" tabindex="-1"><a class="header-anchor" href="#_2-2-string-的创建方式"><span>2.2 String 的创建方式</span></a></h3><p><strong>方式一：直接赋值（推荐）</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 指向常量池</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 复用常量池中的对象</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式二：使用构造器</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在堆中创建对象</span></span>
<span class="line"><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在堆中创建新对象</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>内存分析：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">栈         常量池        堆</span>
<span class="line">s1 ────→  &quot;hello&quot;</span>
<span class="line">s2 ────→    ↑</span>
<span class="line">s3 ────────────────→ String对象 ──→ &quot;hello&quot;</span>
<span class="line">s4 ────────────────→ String对象 ──→ &quot;hello&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-string-的拼接" tabindex="-1"><a class="header-anchor" href="#_2-3-string-的拼接"><span>2.3 String 的拼接</span></a></h3><p><strong>规则：</strong></p><ol><li>常量相加：在常量池</li><li>变量相加：在堆中（通过 StringBuilder 实现）</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 1. 常量相加</span></span>
<span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 编译优化为 &quot;helloworld&quot;，在常量池</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 变量相加</span></span>
<span class="line"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token comment">// 在堆中创建新对象</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 底层实现：</span></span>
<span class="line"><span class="token comment">// StringBuilder sb = new StringBuilder();</span></span>
<span class="line"><span class="token comment">// sb.append(a);</span></span>
<span class="line"><span class="token comment">// sb.append(b);</span></span>
<span class="line"><span class="token comment">// String s2 = sb.toString();</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-string-常用方法" tabindex="-1"><a class="header-anchor" href="#_2-4-string-常用方法"><span>2.4 String 常用方法</span></a></h3><p><strong>判断类：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// false（比较内容，区分大小写）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true（忽略大小写）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// false（判断是否为空）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;He&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// true（是否以指定字符串开头）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;ld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// true（是否以指定字符串结尾）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;lo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// true（是否包含）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查找类：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 11（字符串长度）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// &#39;h&#39;（获取指定索引的字符）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 4（第一次出现的索引）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 7（最后一次出现的索引）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提取类：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// &quot;World&quot;（从索引6到末尾）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// &quot;Hello&quot;（从索引0到5，不含5）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>转换类：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// &quot;HELLO WORLD&quot;（转大写）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// &quot;hello world&quot;（转小写）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 去除前后空格</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// &quot;HeLLo WorLd&quot;（替换字符）</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Hello Java&quot;（替换字符串）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分割类：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;apple,banana,orange&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 特殊字符需要转义</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;a|b|c&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\|&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>转换为字符数组：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>格式化字符串：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> score <span class="token operator">=</span> <span class="token number">95.5</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;姓名：%s，年龄：%d，成绩：%.2f&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 姓名：张三，年龄：20，成绩：95.50</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-string-常见面试题" tabindex="-1"><a class="header-anchor" href="#_2-5-string-常见面试题"><span>2.5 String 常见面试题</span></a></h3><p><strong>题目1：创建了几个对象？</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>答案：</strong> 2个</p><ul><li>常量池中的 &quot;hello&quot;</li><li>堆中的 String 对象</li></ul><p><strong>题目2：下面代码的输出？</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ?</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ?</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><ul><li><code>s1 == s2</code>：true（指向同一个常量池对象）</li><li><code>s1 == s3</code>：false（s3 在堆中）</li><li><code>s1.equals(s3)</code>：true（内容相同）</li></ul><hr><h2 id="三、stringbuffer类" tabindex="-1"><a class="header-anchor" href="#三、stringbuffer类"><span>三、StringBuffer类</span></a></h2><h3 id="_3-1-stringbuffer-的特点" tabindex="-1"><a class="header-anchor" href="#_3-1-stringbuffer-的特点"><span>3.1 StringBuffer 的特点</span></a></h3><p><strong>特点：</strong></p><ol><li>代表<strong>可变的字符序列</strong></li><li>线程安全（方法加了 synchronized）</li><li>效率比 String 高（修改时不创建新对象）</li><li>底层：<code>char[] value</code>（可变数组）</li><li>是 final 类，不能被继承</li></ol><h3 id="_3-2-string-vs-stringbuffer" tabindex="-1"><a class="header-anchor" href="#_3-2-string-vs-stringbuffer"><span>3.2 String vs StringBuffer</span></a></h3><table><thead><tr><th>特性</th><th>String</th><th>StringBuffer</th></tr></thead><tbody><tr><td>可变性</td><td>不可变</td><td>可变</td></tr><tr><td>线程安全</td><td>安全</td><td>安全</td></tr><tr><td>效率</td><td>低（频繁创建对象）</td><td>高</td></tr><tr><td>使用场景</td><td>字符串不变</td><td>频繁修改</td></tr></tbody></table><h3 id="_3-3-stringbuffer-的创建" tabindex="-1"><a class="header-anchor" href="#_3-3-stringbuffer-的创建"><span>3.3 StringBuffer 的创建</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 方式1：无参构造器（初始容量16）</span></span>
<span class="line"><span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式2：指定容量</span></span>
<span class="line"><span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式3：通过字符串创建</span></span>
<span class="line"><span class="token class-name">StringBuffer</span> sb3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-string-和-stringbuffer-的转换" tabindex="-1"><a class="header-anchor" href="#_3-4-string-和-stringbuffer-的转换"><span>3.4 String 和 StringBuffer 的转换</span></a></h3><p><strong>String → StringBuffer：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式1：使用构造器</span></span>
<span class="line"><span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式2：使用 append()</span></span>
<span class="line"><span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>StringBuffer → String：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式1：使用 toString()（推荐）</span></span>
<span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式2：使用构造器</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-stringbuffer-常用方法" tabindex="-1"><a class="header-anchor" href="#_3-5-stringbuffer-常用方法"><span>3.5 StringBuffer 常用方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. append()：追加</span></span>
<span class="line">sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// &quot;hello world&quot;</span></span>
<span class="line">sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// &quot;hello world123&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. delete()：删除</span></span>
<span class="line">sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// &quot;hello123&quot;（删除索引5到11，不含11）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. replace()：替换</span></span>
<span class="line">sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &quot;hi123&quot;（替换索引0到5）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. indexOf()：查找</span></span>
<span class="line"><span class="token keyword">int</span> index <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5. insert()：插入</span></span>
<span class="line">sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// &quot;hiaa123&quot;（在索引2处插入）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 6. length()：获取长度</span></span>
<span class="line"><span class="token keyword">int</span> len <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 7</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 7. reverse()：反转</span></span>
<span class="line">sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// &quot;321aahi&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、stringbuilder类" tabindex="-1"><a class="header-anchor" href="#四、stringbuilder类"><span>四、StringBuilder类</span></a></h2><h3 id="_4-1-stringbuilder-的特点" tabindex="-1"><a class="header-anchor" href="#_4-1-stringbuilder-的特点"><span>4.1 StringBuilder 的特点</span></a></h3><p><strong>特点：</strong></p><ol><li>代表<strong>可变的字符序列</strong></li><li><strong>线程不安全</strong>（方法没有 synchronized）</li><li><strong>效率最高</strong></li><li>底层：<code>char[] value</code>（可变数组）</li><li>与 StringBuffer 方法完全相同</li></ol><h3 id="_4-2-三者对比" tabindex="-1"><a class="header-anchor" href="#_4-2-三者对比"><span>4.2 三者对比</span></a></h3><table><thead><tr><th>特性</th><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>可变性</td><td>不可变</td><td>可变</td><td>可变</td></tr><tr><td>线程安全</td><td>安全</td><td>安全</td><td><strong>不安全</strong></td></tr><tr><td>效率</td><td>低</td><td>较高</td><td><strong>最高</strong></td></tr><tr><td>使用场景</td><td>少量修改</td><td>多线程频繁修改</td><td><strong>单线程频繁修改</strong></td></tr></tbody></table><p><strong>效率测试：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// String：最慢</span></span>
<span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    s <span class="token operator">+=</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// StringBuffer：较快</span></span>
<span class="line"><span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// StringBuilder：最快</span></span>
<span class="line"><span class="token class-name">StringBuilder</span> sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sbd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效率：</strong> StringBuilder &gt; StringBuffer &gt; String</p><h3 id="_4-3-使用原则" tabindex="-1"><a class="header-anchor" href="#_4-3-使用原则"><span>4.3 使用原则</span></a></h3><p><strong>选择建议：</strong></p><ol><li>字符串很少修改 → <strong>String</strong></li><li>单线程大量修改 → <strong>StringBuilder</strong>（推荐）</li><li>多线程大量修改 → <strong>StringBuffer</strong></li></ol><hr><h2 id="五、math类" tabindex="-1"><a class="header-anchor" href="#五、math类"><span>五、Math类</span></a></h2><h3 id="_5-1-math-常用方法" tabindex="-1"><a class="header-anchor" href="#_5-1-math-常用方法"><span>5.1 Math 常用方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 1. abs()：绝对值</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 10</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. pow()：幂运算</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 8.0（2的3次方）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. sqrt()：平方根</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 4.0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. ceil()：向上取整</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 4.0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5. floor()：向下取整</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 6. round()：四舍五入</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 7. random()：随机数 [0, 1)</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 0.xxxx</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 8. max()、min()：最大最小值</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 20</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 10</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 9. PI、E常量</span></span>
<span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>                <span class="token comment">// 3.141592653589793</span></span>
<span class="line"><span class="token class-name">Math<span class="token punctuation">.</span>E</span><span class="token punctuation">;</span>                 <span class="token comment">// 2.718281828459045</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-生成随机数" tabindex="-1"><a class="header-anchor" href="#_5-2-生成随机数"><span>5.2 生成随机数</span></a></h3><p><strong>生成 [a, b] 范围的随机整数：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 公式：(int)(Math.random() * (b - a + 1)) + a</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例：生成 [10, 20] 的随机数</span></span>
<span class="line"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、日期类" tabindex="-1"><a class="header-anchor" href="#六、日期类"><span>六、日期类</span></a></h2><h3 id="_6-1-date-类-第一代" tabindex="-1"><a class="header-anchor" href="#_6-1-date-类-第一代"><span>6.1 Date 类（第一代）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 获取当前时间</span></span>
<span class="line"><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Thu Jan 18 18:30:00 CST 2025</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 格式化日期</span></span>
<span class="line"><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> dateStr <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2025-01-18 18:30:00</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 字符串 → Date</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;2025-01-18 18:30:00&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Date</span> date2 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-calendar-类-第二代" tabindex="-1"><a class="header-anchor" href="#_6-2-calendar-类-第二代"><span>6.2 Calendar 类（第二代）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 获取Calendar实例</span></span>
<span class="line"><span class="token class-name">Calendar</span> cal <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 获取日期信息</span></span>
<span class="line"><span class="token keyword">int</span> year <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> month <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 月份从0开始，要+1</span></span>
<span class="line"><span class="token keyword">int</span> day <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> hour <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">HOUR_OF_DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 24小时制</span></span>
<span class="line"><span class="token keyword">int</span> minute <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MINUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> second <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 设置日期</span></span>
<span class="line">cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2025</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置为2025年1月18日</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. 日期计算</span></span>
<span class="line">cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 加10天</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-localdatetime-类-第三代-jdk-8-推荐" tabindex="-1"><a class="header-anchor" href="#_6-3-localdatetime-类-第三代-jdk-8-推荐"><span>6.3 LocalDateTime 类（第三代，JDK 8+，推荐）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 获取当前时间</span></span>
<span class="line"><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2025-01-18T18:30:00</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 获取日期信息</span></span>
<span class="line"><span class="token keyword">int</span> year <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> month <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> day <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> hour <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> minute <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> second <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 格式化</span></span>
<span class="line"><span class="token class-name">DateTimeFormatter</span> dtf <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> dateStr <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dtf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2025-01-18 18:30:00</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. 字符串 → LocalDateTime</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;2025-01-18 18:30:00&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">LocalDateTime</span> ldt <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> dtf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5. 日期计算</span></span>
<span class="line"><span class="token class-name">LocalDateTime</span> future <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 加10天</span></span>
<span class="line"><span class="token class-name">LocalDateTime</span> past <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 减2个月</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="七、面试常见问题" tabindex="-1"><a class="header-anchor" href="#七、面试常见问题"><span>七、面试常见问题</span></a></h2><h3 id="q1-string-为什么设计成不可变的" tabindex="-1"><a class="header-anchor" href="#q1-string-为什么设计成不可变的"><span>Q1: String 为什么设计成不可变的？</span></a></h3><p><strong>答案：</strong></p><ol><li><strong>安全性</strong>：String 常用于网络传输、文件路径、参数传递</li><li><strong>线程安全</strong>：不可变对象天然线程安全</li><li><strong>常量池优化</strong>：可以复用对象，节省内存</li><li><strong>hashCode 缓存</strong>：不可变，hashCode 只需计算一次</li></ol><hr><h3 id="q2-string、stringbuffer、stringbuilder-的区别" tabindex="-1"><a class="header-anchor" href="#q2-string、stringbuffer、stringbuilder-的区别"><span>Q2: String、StringBuffer、StringBuilder 的区别？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>可变性</td><td>不可变</td><td>可变</td><td>可变</td></tr><tr><td>线程安全</td><td>安全</td><td>安全</td><td>不安全</td></tr><tr><td>效率</td><td>低</td><td>较高</td><td>最高</td></tr></tbody></table><p><strong>选择建议：</strong></p><ul><li>少量修改 → String</li><li>单线程频繁修改 → StringBuilder</li><li>多线程频繁修改 → StringBuffer</li></ul><hr><h3 id="q3-和-equals-对于-string-的区别" tabindex="-1"><a class="header-anchor" href="#q3-和-equals-对于-string-的区别"><span>Q3: == 和 equals() 对于 String 的区别？</span></a></h3><p><strong>答案：</strong></p><ul><li><code>==</code>：比较引用（地址）</li><li><code>equals()</code>：比较内容</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">s1 <span class="token operator">==</span> s2<span class="token punctuation">;</span>        <span class="token comment">// true（指向同一个常量池对象）</span></span>
<span class="line">s1 <span class="token operator">==</span> s3<span class="token punctuation">;</span>        <span class="token comment">// false（s3 在堆中）</span></span>
<span class="line">s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true（内容相同）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="q4-string-s-new-string-hello-创建了几个对象" tabindex="-1"><a class="header-anchor" href="#q4-string-s-new-string-hello-创建了几个对象"><span>Q4: String s = new String(&quot;hello&quot;) 创建了几个对象？</span></a></h3><p><strong>答案：</strong> 2个</p><ol><li>常量池中的 &quot;hello&quot;</li><li>堆中的 String 对象</li></ol><hr><h3 id="q5-string-的-intern-方法的作用" tabindex="-1"><a class="header-anchor" href="#q5-string-的-intern-方法的作用"><span>Q5: String 的 intern() 方法的作用？</span></a></h3><p><strong>答案：</strong></p><p><code>intern()</code> 方法会在常量池中查找是否有相同内容的字符串：</p><ul><li>如果有，返回常量池中的引用</li><li>如果没有，将字符串添加到常量池，并返回引用</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,140)),a("p",null,[n[1]||(n[1]=a("strong",null,"上一章：",-1)),n[2]||(n[2]=s()),p(t,{to:"/tutorials/java/%E7%AC%AC03%E7%AB%A0-%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B/02-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%88%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89.html"},{default:e(()=>[...n[0]||(n[0]=[s("异常处理",-1)])]),_:1})]),a("p",null,[n[4]||(n[4]=a("strong",null,"下一章：",-1)),n[5]||(n[5]=s()),p(t,{to:"/tutorials/java/%E7%AC%AC03%E7%AB%A0-%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B/04-%E9%9B%86%E5%90%88%E7%B1%BB.html"},{default:e(()=>[...n[3]||(n[3]=[s("集合框架",-1)])]),_:1}),n[6]||(n[6]=s(" →",-1))])])}const v=l(r,[["render",d]]),g=JSON.parse('{"path":"/tutorials/java/di03zhang-jinjiebiancheng/03-changyonglei.html","title":"Java 常用类","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"一、包装类","slug":"一、包装类","link":"#一、包装类","children":[{"level":3,"title":"1.1 包装类的概念","slug":"_1-1-包装类的概念","link":"#_1-1-包装类的概念","children":[]},{"level":3,"title":"1.2 八大包装类","slug":"_1-2-八大包装类","link":"#_1-2-八大包装类","children":[]},{"level":3,"title":"1.3 装箱和拆箱","slug":"_1-3-装箱和拆箱","link":"#_1-3-装箱和拆箱","children":[]},{"level":3,"title":"1.4 包装类型转换","slug":"_1-4-包装类型转换","link":"#_1-4-包装类型转换","children":[]},{"level":3,"title":"1.5 Integer 常用方法","slug":"_1-5-integer-常用方法","link":"#_1-5-integer-常用方法","children":[]},{"level":3,"title":"1.6 Character 常用方法","slug":"_1-6-character-常用方法","link":"#_1-6-character-常用方法","children":[]},{"level":3,"title":"1.7 包装类的缓存机制","slug":"_1-7-包装类的缓存机制","link":"#_1-7-包装类的缓存机制","children":[]}]},{"level":2,"title":"二、String类","slug":"二、string类","link":"#二、string类","children":[{"level":3,"title":"2.1 String 的特点","slug":"_2-1-string-的特点","link":"#_2-1-string-的特点","children":[]},{"level":3,"title":"2.2 String 的创建方式","slug":"_2-2-string-的创建方式","link":"#_2-2-string-的创建方式","children":[]},{"level":3,"title":"2.3 String 的拼接","slug":"_2-3-string-的拼接","link":"#_2-3-string-的拼接","children":[]},{"level":3,"title":"2.4 String 常用方法","slug":"_2-4-string-常用方法","link":"#_2-4-string-常用方法","children":[]},{"level":3,"title":"2.5 String 常见面试题","slug":"_2-5-string-常见面试题","link":"#_2-5-string-常见面试题","children":[]}]},{"level":2,"title":"三、StringBuffer类","slug":"三、stringbuffer类","link":"#三、stringbuffer类","children":[{"level":3,"title":"3.1 StringBuffer 的特点","slug":"_3-1-stringbuffer-的特点","link":"#_3-1-stringbuffer-的特点","children":[]},{"level":3,"title":"3.2 String vs StringBuffer","slug":"_3-2-string-vs-stringbuffer","link":"#_3-2-string-vs-stringbuffer","children":[]},{"level":3,"title":"3.3 StringBuffer 的创建","slug":"_3-3-stringbuffer-的创建","link":"#_3-3-stringbuffer-的创建","children":[]},{"level":3,"title":"3.4 String 和 StringBuffer 的转换","slug":"_3-4-string-和-stringbuffer-的转换","link":"#_3-4-string-和-stringbuffer-的转换","children":[]},{"level":3,"title":"3.5 StringBuffer 常用方法","slug":"_3-5-stringbuffer-常用方法","link":"#_3-5-stringbuffer-常用方法","children":[]}]},{"level":2,"title":"四、StringBuilder类","slug":"四、stringbuilder类","link":"#四、stringbuilder类","children":[{"level":3,"title":"4.1 StringBuilder 的特点","slug":"_4-1-stringbuilder-的特点","link":"#_4-1-stringbuilder-的特点","children":[]},{"level":3,"title":"4.2 三者对比","slug":"_4-2-三者对比","link":"#_4-2-三者对比","children":[]},{"level":3,"title":"4.3 使用原则","slug":"_4-3-使用原则","link":"#_4-3-使用原则","children":[]}]},{"level":2,"title":"五、Math类","slug":"五、math类","link":"#五、math类","children":[{"level":3,"title":"5.1 Math 常用方法","slug":"_5-1-math-常用方法","link":"#_5-1-math-常用方法","children":[]},{"level":3,"title":"5.2 生成随机数","slug":"_5-2-生成随机数","link":"#_5-2-生成随机数","children":[]}]},{"level":2,"title":"六、日期类","slug":"六、日期类","link":"#六、日期类","children":[{"level":3,"title":"6.1 Date 类（第一代）","slug":"_6-1-date-类-第一代","link":"#_6-1-date-类-第一代","children":[]},{"level":3,"title":"6.2 Calendar 类（第二代）","slug":"_6-2-calendar-类-第二代","link":"#_6-2-calendar-类-第二代","children":[]},{"level":3,"title":"6.3 LocalDateTime 类（第三代，JDK 8+，推荐）","slug":"_6-3-localdatetime-类-第三代-jdk-8-推荐","link":"#_6-3-localdatetime-类-第三代-jdk-8-推荐","children":[]}]},{"level":2,"title":"七、面试常见问题","slug":"七、面试常见问题","link":"#七、面试常见问题","children":[{"level":3,"title":"Q1: String 为什么设计成不可变的？","slug":"q1-string-为什么设计成不可变的","link":"#q1-string-为什么设计成不可变的","children":[]},{"level":3,"title":"Q2: String、StringBuffer、StringBuilder 的区别？","slug":"q2-string、stringbuffer、stringbuilder-的区别","link":"#q2-string、stringbuffer、stringbuilder-的区别","children":[]},{"level":3,"title":"Q3: == 和 equals() 对于 String 的区别？","slug":"q3-和-equals-对于-string-的区别","link":"#q3-和-equals-对于-string-的区别","children":[]},{"level":3,"title":"Q4: String s = new String(\\"hello\\") 创建了几个对象？","slug":"q4-string-s-new-string-hello-创建了几个对象","link":"#q4-string-s-new-string-hello-创建了几个对象","children":[]},{"level":3,"title":"Q5: String 的 intern() 方法的作用？","slug":"q5-string-的-intern-方法的作用","link":"#q5-string-的-intern-方法的作用","children":[]}]}],"git":{"createdTime":1760859744000,"updatedTime":1760859744000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java/第03章-进阶编程/03-常用类.md"}');export{v as comp,g as data};
