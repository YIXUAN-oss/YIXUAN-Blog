import{_ as c,c as o,d as l,e as a,f as s,b as p,w as e,r as i,o as u}from"./app-I6OnLCmc.js";const r="/YIXUAN-Blog/assets/image-20241101183527666-D8uEGbXQ.png",k="/YIXUAN-Blog/assets/image-20241101183600005-BEjC2FaP.png",d={};function m(v,n){const t=i("RouteLink");return u(),o("div",null,[n[10]||(n[10]=l(`<h1 id="java-集合框架" tabindex="-1"><a class="header-anchor" href="#java-集合框架"><span>Java 集合框架</span></a></h1><blockquote><p><strong>本章重点：</strong> Collection、List、Set、Map、泛型集合、Collections工具类</p><p><strong>面试频率：</strong> ⭐⭐⭐⭐⭐</p></blockquote><hr><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#%E4%B8%80%E9%9B%86%E5%90%88%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB">一、集合与数组的区别</a></li><li><a href="#%E4%BA%8C%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%BD%93%E7%B3%BB">二、集合框架体系</a></li><li><a href="#%E4%B8%89collection%E6%8E%A5%E5%8F%A3">三、Collection接口</a></li><li><a href="#%E5%9B%9Blist%E6%8E%A5%E5%8F%A3">四、List接口</a></li><li><a href="#%E4%BA%94set%E6%8E%A5%E5%8F%A3">五、Set接口</a></li><li><a href="#%E5%85%ADmap%E6%8E%A5%E5%8F%A3">六、Map接口</a></li><li><a href="#%E4%B8%83%E9%9B%86%E5%90%88%E9%80%89%E6%8B%A9%E6%8C%87%E5%8D%97">七、集合选择指南</a></li><li><a href="#%E5%85%ABcollections%E5%B7%A5%E5%85%B7%E7%B1%BB">八、Collections工具类</a></li><li><a href="#%E4%B9%9D%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">九、面试常见问题</a></li></ul><hr><h2 id="一、集合与数组的区别" tabindex="-1"><a class="header-anchor" href="#一、集合与数组的区别"><span>一、集合与数组的区别</span></a></h2><h3 id="_1-1-对比表格" tabindex="-1"><a class="header-anchor" href="#_1-1-对比表格"><span>1.1 对比表格</span></a></h3><table><thead><tr><th>特性</th><th>数组</th><th>集合</th></tr></thead><tbody><tr><td>长度</td><td>固定，创建后不可变</td><td>动态，可自动扩容</td></tr><tr><td>类型</td><td>只能存储同一类型</td><td>可以存储不同类型（Object）</td></tr><tr><td>操作</td><td>需要手动扩容，麻烦</td><td>提供丰富的API方法</td></tr><tr><td>存储</td><td>基本类型和引用类型</td><td>只能存储引用类型</td></tr><tr><td>性能</td><td>访问快</td><td>功能强大，易用</td></tr></tbody></table><h3 id="_1-2-数组的局限性" tabindex="-1"><a class="header-anchor" href="#_1-2-数组的局限性"><span>1.2 数组的局限性</span></a></h3><p><strong>数组扩容示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 数组扩容很麻烦</span></span>
<span class="line"><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">persons<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 需要添加新元素，必须创建新数组</span></span>
<span class="line"><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newPersons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span>persons<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> persons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    newPersons<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> persons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 复制原数组</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">newPersons<span class="token punctuation">[</span>newPersons<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 添加新元素</span></span>
<span class="line">persons <span class="token operator">=</span> newPersons<span class="token punctuation">;</span>  <span class="token comment">// 指向新数组</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-集合的优势" tabindex="-1"><a class="header-anchor" href="#_1-3-集合的优势"><span>1.3 集合的优势</span></a></h3><p><strong>集合操作简单：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 集合自动扩容，操作简单</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 直接添加，无需手动扩容</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 直接删除</span></span>
<span class="line"><span class="token class-name">Person</span> p <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 直接获取</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、集合框架体系" tabindex="-1"><a class="header-anchor" href="#二、集合框架体系"><span>二、集合框架体系</span></a></h2><h3 id="_2-1-框架结构图" tabindex="-1"><a class="header-anchor" href="#_2-1-框架结构图"><span>2.1 框架结构图</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">                    Collection (接口)</span>
<span class="line">                    /              \\</span>
<span class="line">                List (接口)        Set (接口)</span>
<span class="line">               /     |     \\           |      \\</span>
<span class="line">         ArrayList Vector LinkedList HashSet TreeSet</span>
<span class="line">                                          |</span>
<span class="line">                                   LinkedHashSet</span>
<span class="line"></span>
<span class="line">                    Map (接口)</span>
<span class="line">                    /     |      \\</span>
<span class="line">              HashMap Hashtable TreeMap</span>
<span class="line">                 |</span>
<span class="line">            LinkedHashMap</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-两大接口体系" tabindex="-1"><a class="header-anchor" href="#_2-2-两大接口体系"><span>2.2 两大接口体系</span></a></h3><p><strong>1. Collection 接口（单列集合）</strong></p><ul><li><p><strong>List</strong>：有序、可重复</p><ul><li>ArrayList：动态数组</li><li>LinkedList：双向链表</li><li>Vector：线程安全的动态数组</li></ul></li><li><p><strong>Set</strong>：无序、不可重复</p><ul><li>HashSet：基于HashMap</li><li>LinkedHashSet：保持插入顺序</li><li>TreeSet：自动排序</li></ul></li></ul><p><strong>2. Map 接口（双列集合）</strong></p><ul><li>HashMap：键值对存储，无序</li><li>LinkedHashMap：保持插入顺序</li><li>TreeMap：按键排序</li><li>Hashtable：线程安全</li><li>Properties：配置文件</li></ul><hr><h2 id="三、collection接口" tabindex="-1"><a class="header-anchor" href="#三、collection接口"><span>三、Collection接口</span></a></h2><h3 id="_3-1-collection接口特点" tabindex="-1"><a class="header-anchor" href="#_3-1-collection接口特点"><span>3.1 Collection接口特点</span></a></h3><p><strong>接口定义：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ol><li>可以存放多个元素，每个元素是Object类型</li><li>有些实现类可以存放重复元素（List），有些不可以（Set）</li><li>有些实现类是有序的（List），有些是无序的（Set）</li><li>Collection没有直接实现类，通过子接口List和Set实现</li></ol><h3 id="_3-2-常用方法" tabindex="-1"><a class="header-anchor" href="#_3-2-常用方法"><span>3.2 常用方法</span></a></h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>add(E e)</code></td><td>添加单个元素</td></tr><tr><td><code>remove(Object o)</code></td><td>删除指定元素</td></tr><tr><td><code>contains(Object o)</code></td><td>判断是否包含某元素</td></tr><tr><td><code>size()</code></td><td>获取元素个数</td></tr><tr><td><code>isEmpty()</code></td><td>判断是否为空</td></tr><tr><td><code>clear()</code></td><td>清空集合</td></tr><tr><td><code>addAll(Collection c)</code></td><td>添加多个元素</td></tr><tr><td><code>containsAll(Collection c)</code></td><td>判断是否包含所有元素</td></tr><tr><td><code>removeAll(Collection c)</code></td><td>删除多个元素</td></tr></tbody></table><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token constant">D829</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionMethod</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// add:添加单个元素</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//list.add(new Integer(10))</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// remove:删除指定元素</span></span>
<span class="line">        <span class="token comment">// list.remove(0);//删除第一个元素</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定删除某个元素</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// contains:查找元素是否存在</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//T</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// size:获取元素个数</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// isEmpty:判断是否为空</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//F</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// clear:清空</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// addAll:添加多个元素</span></span>
<span class="line">        <span class="token class-name">ArrayList</span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;红楼梦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;三国演义&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// containsAll:查找多个元素是否都存在</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//T</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// removeAll：删除多个元素</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;聊斋&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[聊斋]</span></span>
<span class="line">        <span class="token comment">//说明：以ArrayList实现类来演示.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-collection-遍历方式" tabindex="-1"><a class="header-anchor" href="#_3-3-collection-遍历方式"><span>3.3 Collection 遍历方式</span></a></h3><p>Collection 提供了三种遍历方式：迭代器、增强for循环、forEach（JDK 8+）</p><h4 id="方式一-iterator-迭代器-推荐" tabindex="-1"><a class="header-anchor" href="#方式一-iterator-迭代器-推荐"><span>方式一：Iterator 迭代器（推荐）</span></a></h4><p><strong>特点：</strong></p><ol><li>Iterator 对象称为迭代器，专门用于遍历集合</li><li>所有 Collection 的实现类都有 <code>iterator()</code> 方法</li><li>Iterator 本身不存放对象，只是用于遍历</li></ol><p><strong>基本用法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Iterator 常用方法：</strong></p><ul><li><code>hasNext()</code>：判断是否还有下一个元素</li><li><code>next()</code>：返回下一个元素（指针下移）</li><li><code>remove()</code>：删除当前元素</li></ul><p><strong>快捷键：</strong> 输入 <code>itit</code> 快速生成 while 循环</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionIterator</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Collection</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;三国演义&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;罗贯中&quot;</span><span class="token punctuation">,</span> <span class="token number">10.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;小李飞刀&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;古龙&quot;</span><span class="token punctuation">,</span> <span class="token number">5.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;红楼梦&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;曹雪芹&quot;</span><span class="token punctuation">,</span> <span class="token number">34.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//System.out.println(&quot;col=&quot; + col);</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//遍历 col集合</span></span>
<span class="line">        <span class="token comment">//1. 先得到 col 对应的 迭代器</span></span>
<span class="line">        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> col<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断是否还有数据</span></span>
<span class="line">            <span class="token comment">//返回下一个元素，类型是Object</span></span>
<span class="line">            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;obj=&quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//2. 当退出while 循环后 , 这时iterator迭代器，指向最后的元素</span></span>
<span class="line">        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NoSuchElementException</span></span>
<span class="line">        <span class="token comment">//3. 如果希望再次遍历，需要重置我们的迭代器</span></span>
<span class="line">        iterator <span class="token operator">=</span> col<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===第二次遍历===&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;obj=&quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> author<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> price<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> author<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token class-name">String</span> author<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Book{&quot;</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;, author=&#39;&quot;</span> <span class="token operator">+</span> author <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;, price=&quot;</span> <span class="token operator">+</span> price <span class="token operator">+</span></span>
<span class="line">                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方式二-增强-for-循环" tabindex="-1"><a class="header-anchor" href="#方式二-增强-for-循环"><span>方式二：增强 for 循环</span></a></h4><p><strong>特点：</strong></p><ol><li>增强for循环是 Iterator 的简化版，本质相同</li><li>只能用于遍历集合或数组</li><li>代码更简洁，但功能不如迭代器强大</li></ol><p><strong>语法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>元素类型 元素名 <span class="token operator">:</span> 集合名或数组名<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 访问元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>快捷键：</strong> 输入 <code>iter</code> 快速生成</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionIterator</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Collection</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;三国演义&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;罗贯中&quot;</span><span class="token punctuation">,</span> <span class="token number">10.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;小李飞刀&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;古龙&quot;</span><span class="token punctuation">,</span> <span class="token number">5.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;红楼梦&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;曹雪芹&quot;</span><span class="token punctuation">,</span> <span class="token number">34.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//System.out.println(&quot;col=&quot; + col);</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//使用增强for循环</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> book <span class="token operator">:</span> col<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、list接口" tabindex="-1"><a class="header-anchor" href="#四、list接口"><span>四、List接口</span></a></h2><h3 id="_4-1-list-接口特点" tabindex="-1"><a class="header-anchor" href="#_4-1-list-接口特点"><span>4.1 List 接口特点</span></a></h3><p><strong>List 接口是 Collection 的子接口</strong></p><p><strong>核心特点：</strong></p><ol><li>✅ <strong>有序</strong>：添加顺序和取出顺序一致</li><li>✅ <strong>可重复</strong>：允许存储重复元素</li><li>✅ <strong>有索引</strong>：每个元素都有对应的整数索引（从0开始）</li><li>✅ <strong>可以通过索引精确控制元素</strong></li></ol><p><strong>常用实现类：</strong></p><ul><li><strong>ArrayList</strong>：动态数组，查询快</li><li><strong>LinkedList</strong>：双向链表，增删快</li><li><strong>Vector</strong>：线程安全的动态数组（已过时）</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1.List集合类中元素有序(即添加顺序和取出顺序一致)、且可重复[案例]</span></span>
<span class="line">        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;mary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span><span class="token operator">+</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//2.List集合中的每个元素都有其对应的顺序索引，即支持索引</span></span>
<span class="line">        <span class="token comment">//索引是从0开始的</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hsp</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-list-特有方法" tabindex="-1"><a class="header-anchor" href="#_4-2-list-特有方法"><span>4.2 List 特有方法</span></a></h3><p>List 除了继承 Collection 的方法外，还有一些特有的方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>void add(int index, E element)</code></td><td>在指定位置插入元素</td></tr><tr><td><code>E get(int index)</code></td><td>获取指定位置的元素</td></tr><tr><td><code>E set(int index, E element)</code></td><td>替换指定位置的元素</td></tr><tr><td><code>E remove(int index)</code></td><td>删除指定位置的元素</td></tr><tr><td><code>int indexOf(Object o)</code></td><td>返回元素首次出现的位置</td></tr><tr><td><code>int lastIndexOf(Object o)</code></td><td>返回元素最后出现的位置</td></tr><tr><td><code>List&lt;E&gt; subList(int from, int to)</code></td><td>返回子列表 [from, to)</td></tr></tbody></table><p><strong>示例代码：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListMethod</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;张三丰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;贾宝玉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">        <span class="token comment">// void add(int index, Object ele):在 index 位置插入 ele 元素</span></span>
<span class="line">        <span class="token comment">// 在 index = 1 的位置插入一个对象</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;林黛玉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// boolean addAll(int index, Collection eles):从 index 位置开始将 eles 中的所有元素添加进来</span></span>
<span class="line">        <span class="token class-name">List</span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Object get(int index):获取指定 index 位置的元素</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// int indexOf(Object obj):返回 obj 在集合中首次出现的位置</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// int lastIndexOf(Object obj):返回 obj 在当前集合中末次出现的位置</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;林黛玉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;林黛玉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Object remove(int index):移除指定 index 位置的元素，并返回此元素</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Object set(int index, Object ele):设置指定 index 位置的元素为 ele , 相当于是替换.</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;玛丽&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// List subList(int fromIndex, int toIndex):返回从 fromIndex 到 toIndex 位置的子集合</span></span>
<span class="line">        <span class="token comment">// 注意返回的子集合 fromIndex &lt;= subList &lt; toIndex</span></span>
<span class="line">        <span class="token class-name">List</span> returnlist <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;returnlist=&quot;</span> <span class="token operator">+</span> returnlist<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-list-的三种遍历方式" tabindex="-1"><a class="header-anchor" href="#_4-3-list-的三种遍历方式"><span>4.3 List 的三种遍历方式</span></a></h3><p>List 提供了三种遍历方式（适用于 ArrayList、LinkedList、Vector）：</p><table><thead><tr><th>遍历方式</th><th>特点</th><th>推荐度</th></tr></thead><tbody><tr><td><strong>普通for循环</strong></td><td>可以使用索引，灵活</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td><strong>增强for循环</strong></td><td>代码简洁</td><td>⭐⭐⭐⭐</td></tr><tr><td><strong>迭代器</strong></td><td>功能强大，可以删除</td><td>⭐⭐⭐⭐</td></tr></tbody></table><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListFor</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//List 接口的实现子类 Vector LinkedList</span></span>
<span class="line">        <span class="token comment">//List list = new ArrayList();</span></span>
<span class="line">        <span class="token comment">//List list = new Vector();</span></span>
<span class="line">        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;鱼香肉丝&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;北京烤鸭子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//遍历</span></span>
<span class="line">        <span class="token comment">//1. 迭代器</span></span>
<span class="line">        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=====增强 for=====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//2. 增强 for</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;o=&quot;</span> <span class="token operator">+</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=====普通 for====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//3. 使用普通 for</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对象=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-arraylist-底层分析" tabindex="-1"><a class="header-anchor" href="#_4-4-arraylist-底层分析"><span>4.4 ArrayList 底层分析</span></a></h3><h4 id="_4-4-1-arraylist-特点" tabindex="-1"><a class="header-anchor" href="#_4-4-1-arraylist-特点"><span>4.4.1 ArrayList 特点</span></a></h4><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td><strong>底层实现</strong></td><td>动态数组 <code>Object[] elementData</code></td></tr><tr><td><strong>初始容量</strong></td><td>无参构造：0，第一次添加扩容为10</td></tr><tr><td><strong>扩容机制</strong></td><td>扩容为原来的 1.5 倍</td></tr><tr><td><strong>允许null</strong></td><td>可以存储 null，且可以多个</td></tr><tr><td><strong>线程安全</strong></td><td>不安全（效率高）</td></tr><tr><td><strong>适用场景</strong></td><td>查询多，增删少</td></tr></tbody></table><h4 id="_4-4-2-arraylist-扩容机制" tabindex="-1"><a class="header-anchor" href="#_4-4-2-arraylist-扩容机制"><span>4.4.2 ArrayList 扩容机制</span></a></h4><p><strong>无参构造器：</strong></p><ol><li>初始容量为 0</li><li>第一次 <code>add()</code> 时扩容为 10</li><li>后续扩容为当前容量的 1.5 倍</li></ol><p><strong>有参构造器：</strong></p><ol><li>初始容量为指定大小</li><li>扩容为当前容量的 1.5 倍</li></ol><p><strong>底层源码关键点：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 底层数组（transient 表示不参与序列化）</span></span>
<span class="line"><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 扩容核心代码</span></span>
<span class="line"><span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1.5倍</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListSource</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 解读源码：</span></span>
<span class="line">        <span class="token comment">// 注意，注意，注意，Idea 默认情况下，Debug 显示的数据是简化后的，如果希望看到完整的数据</span></span>
<span class="line">        <span class="token comment">// 需要做设置. </span></span>
<span class="line">        <span class="token comment">// 使用无参构造器创建 ArrayList 对象</span></span>
<span class="line">        <span class="token comment">// ArrayList list = new ArrayList();</span></span>
<span class="line">        <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//使用 for 给 list 集合添加 1 - 10 数据</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//使用 for 给 list 集合添加 11-15 数据</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+r+'" alt="image-20241101183527666" style="zoom:50%;"><img src="'+k+`" alt="image-20241101183600005" style="zoom:50%;"><h3 id="_4-5-vector-底层分析" tabindex="-1"><a class="header-anchor" href="#_4-5-vector-底层分析"><span>4.5 Vector 底层分析</span></a></h3><h4 id="_4-5-1-vector-特点" tabindex="-1"><a class="header-anchor" href="#_4-5-1-vector-特点"><span>4.5.1 Vector 特点</span></a></h4><p><strong>类定义：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点对比：</strong></p><table><thead><tr><th>特点</th><th>Vector</th><th>ArrayList</th></tr></thead><tbody><tr><td><strong>底层实现</strong></td><td>动态数组</td><td>动态数组</td></tr><tr><td><strong>初始容量</strong></td><td>10</td><td>0（第一次添加扩容为10）</td></tr><tr><td><strong>扩容机制</strong></td><td>扩容为原来的 <strong>2倍</strong></td><td>扩容为原来的 <strong>1.5倍</strong></td></tr><tr><td><strong>线程安全</strong></td><td>安全（synchronized）</td><td>不安全</td></tr><tr><td><strong>效率</strong></td><td>低</td><td>高</td></tr><tr><td><strong>推荐度</strong></td><td>⭐（已过时）</td><td>⭐⭐⭐⭐⭐</td></tr></tbody></table><p><strong>线程安全示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> elementCount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-5-2-vector-扩容机制" tabindex="-1"><a class="header-anchor" href="#_4-5-2-vector-扩容机制"><span>4.5.2 Vector 扩容机制</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Vector</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VectorTest</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//无参构造器</span></span>
<span class="line">        <span class="token comment">//有参数的构造</span></span>
<span class="line">        <span class="token class-name">Vector</span> vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;vector=&quot;</span> <span class="token operator">+</span> vector<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        //解读源码</span>
<span class="line">        //1. new Vector() 底层</span>
<span class="line">        public Vector() {</span>
<span class="line">            this(10);</span>
<span class="line">        }</span>
<span class="line">        补充：如果是 Vector vector = new Vector(8);</span>
<span class="line">        走的方法是:</span>
<span class="line">        public Vector(int initialCapacity) {</span>
<span class="line">            this(initialCapacity, 0);</span>
<span class="line">        }</span>
<span class="line">        </span>
<span class="line">        2. vector.add(i)</span>
<span class="line">        2.1 //下面这个方法就添加数据到 vector 集合</span>
<span class="line">        public synchronized boolean add(E e) {</span>
<span class="line">            modCount++;</span>
<span class="line">            ensureCapacityHelper(elementCount + 1);</span>
<span class="line">            elementData[elementCount++] = e;</span>
<span class="line">            return true;</span>
<span class="line">        }</span>
<span class="line">        </span>
<span class="line">        2.2 //确定是否需要扩容 条件 ： minCapacity - elementData.length&gt;0</span>
<span class="line">        private void ensureCapacityHelper(int minCapacity) {</span>
<span class="line">        // overflow-conscious code</span>
<span class="line">        if (minCapacity - elementData.length &gt; 0)</span>
<span class="line">        grow(minCapacity);</span>
<span class="line">        }</span>
<span class="line">        </span>
<span class="line">        2.3 //如果 需要的数组大小 不够用，就扩容 , 扩容的算法</span>
<span class="line">        //newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span>
<span class="line">        // capacityIncrement : oldCapacity);</span>
<span class="line">        //就是扩容两倍. private void grow(int minCapacity) {</span>
<span class="line">        // overflow-conscious code</span>
<span class="line">        int oldCapacity = elementData.length;</span>
<span class="line">        int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span>
<span class="line">        capacityIncrement : oldCapacity);</span>
<span class="line">        if (newCapacity - minCapacity &lt; 0)</span>
<span class="line">            newCapacity = minCapacity;</span>
<span class="line">        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span>
<span class="line">            newCapacity = hugeCapacity(minCapacity);</span>
<span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span>
<span class="line">        }</span>
<span class="line">        */</span></span>
<span class="line">        </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-arraylist-vs-vector-对比" tabindex="-1"><a class="header-anchor" href="#_4-6-arraylist-vs-vector-对比"><span>4.6 ArrayList vs Vector 对比</span></a></h3><table><thead><tr><th>特性</th><th>ArrayList</th><th>Vector</th></tr></thead><tbody><tr><td>版本</td><td>JDK 1.2</td><td>JDK 1.0</td></tr><tr><td>线程安全</td><td>不安全</td><td>安全</td></tr><tr><td>扩容倍数</td><td>1.5倍</td><td>2倍</td></tr><tr><td>效率</td><td>高</td><td>低</td></tr><tr><td>使用场景</td><td>单线程（推荐）</td><td>多线程（已过时）</td></tr></tbody></table><p><strong>推荐：</strong> 单线程用 ArrayList，多线程用 <code>Collections.synchronizedList()</code> 或 <code>CopyOnWriteArrayList</code></p><hr><h2 id="五、set接口" tabindex="-1"><a class="header-anchor" href="#五、set接口"><span>五、Set接口</span></a></h2><h3 id="_5-1-set-接口特点" tabindex="-1"><a class="header-anchor" href="#_5-1-set-接口特点"><span>5.1 Set 接口特点</span></a></h3><p><strong>Set 接口是 Collection 的子接口</strong></p><p><strong>核心特点：</strong></p><ol><li>❌ <strong>无序</strong>：存取顺序不一致（但取出顺序固定）</li><li>❌ <strong>不可重复</strong>：不允许存储重复元素</li><li>✅ <strong>允许null</strong>：最多一个 null 元素</li><li>❌ <strong>无索引</strong>：不能通过索引访问元素</li></ol><p><strong>常用实现类：</strong></p><ul><li><strong>HashSet</strong>：无序，基于 HashMap</li><li><strong>LinkedHashSet</strong>：保持插入顺序</li><li><strong>TreeSet</strong>：自动排序</li></ul><h3 id="_5-2-set-常用方法" tabindex="-1"><a class="header-anchor" href="#_5-2-set-常用方法"><span>5.2 Set 常用方法</span></a></h3><p>Set 的方法和 Collection 接口完全相同，没有特有方法。</p><h3 id="_5-3-set-的遍历方式" tabindex="-1"><a class="header-anchor" href="#_5-3-set-的遍历方式"><span>5.3 Set 的遍历方式</span></a></h3><p>Set 不支持索引访问，只能使用：</p><ol><li>✅ <strong>迭代器</strong>（推荐）</li><li>✅ <strong>增强for循环</strong></li><li>❌ <strong>普通for循环</strong>（不支持）</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetMethod</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line"><span class="token comment">//1. 以 Set 接口的实现类 HashSet 来讲解 Set 接口的方法  </span></span>
<span class="line"><span class="token comment">//2. set 接口的实现类的对象(Set 接口对象), 不能存放重复的元素, 可以添加一个 null</span></span>
<span class="line"><span class="token comment">//3. set 接口对象存放数据是无序(即添加的顺序和取出的顺序不一致)  </span></span>
<span class="line"><span class="token comment">//4. 注意：取出的顺序的顺序虽然不是添加的顺序，但是他的固定.   </span></span>
<span class="line">        <span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重复  </span></span>
<span class="line">        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;mary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  </span></span>
<span class="line">        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再次添加 null</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;set=&quot;</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token comment">//遍历  </span></span>
<span class="line">        <span class="token comment">//方式 1： 使用迭代器  </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=====使用迭代器====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;obj=&quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token comment">//方式 2: 增强 for        System.out.println(&quot;=====增强 for====&quot;);  </span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;o=&quot;</span> <span class="token operator">+</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token comment">//set 接口对象，不能通过索引来获取  </span></span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-hashset-底层原理" tabindex="-1"><a class="header-anchor" href="#_5-4-hashset-底层原理"><span>5.4 HashSet 底层原理</span></a></h3><p><strong>HashSet 特点：</strong></p><ol><li>底层是 <strong>HashMap</strong>（存储在 HashMap 的 key 中）</li><li>利用 HashMap 的 key 不重复特性</li><li>添加元素时先计算 <code>hashCode()</code>，再用 <code>equals()</code> 比较</li><li>初始容量 16，加载因子 0.75，扩容为 2 倍</li></ol><p><strong>去重原理：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">添加元素</span>
<span class="line">  ↓</span>
<span class="line">计算 hashCode()</span>
<span class="line">  ↓</span>
<span class="line">找到存储位置</span>
<span class="line">  ↓</span>
<span class="line">位置为空？</span>
<span class="line">  ├─ 是 → 直接存储</span>
<span class="line">  └─ 否 → equals() 比较</span>
<span class="line">          ├─ 相同 → 不添加</span>
<span class="line">          └─ 不同 → 链表/红黑树存储</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>  </span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetTest</span><span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token comment">//1. 构造器走的源码  </span></span>
<span class="line">    <span class="token comment">/*  </span>
<span class="line">    public HashSet() {</span>
<span class="line">        map = new HashMap&lt;&gt;();</span>
<span class="line">    }</span>
<span class="line">    */</span>    </span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 2. HashSet 可以存放 null ,但是只能有一个 null,即元素不能重复  </span></span>
<span class="line">        <span class="token class-name">Set</span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hashSet=&quot;</span> <span class="token operator">+</span> hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-linkedhashset-特点" tabindex="-1"><a class="header-anchor" href="#_5-5-linkedhashset-特点"><span>5.5 LinkedHashSet 特点</span></a></h3><p><strong>LinkedHashSet 特点：</strong></p><ul><li>继承自 HashSet</li><li>底层是 <strong>LinkedHashMap</strong></li><li><strong>保持插入顺序</strong>（额外维护了双向链表）</li><li>其他特性同 HashSet</li></ul><p><strong>适用场景：</strong> 需要去重且保持插入顺序</p><hr><h2 id="六、map接口" tabindex="-1"><a class="header-anchor" href="#六、map接口"><span>六、Map接口</span></a></h2><h3 id="_6-1-map-接口特点" tabindex="-1"><a class="header-anchor" href="#_6-1-map-接口特点"><span>6.1 Map 接口特点</span></a></h3><p><strong>Map 与 Collection 并列存在，用于存储键值对（Key-Value）</strong></p><p><strong>核心特点：</strong></p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>键值对</strong></td><td>存储 Key-Value 映射关系</td></tr><tr><td><strong>key 唯一</strong></td><td>key 不允许重复</td></tr><tr><td><strong>value 可重复</strong></td><td>value 可以重复</td></tr><tr><td><strong>允许 null</strong></td><td>key 和 value 都可以为 null</td></tr><tr><td><strong>key → value</strong></td><td>通过 key 可以找到唯一的 value</td></tr><tr><td><strong>数据类型</strong></td><td>key 和 value 都是引用类型</td></tr></tbody></table><p><strong>常用实现类：</strong></p><ul><li><strong>HashMap</strong>：无序，效率高（推荐）</li><li><strong>LinkedHashMap</strong>：保持插入顺序</li><li><strong>TreeMap</strong>：按 key 排序</li><li><strong>Hashtable</strong>：线程安全（已过时）</li><li><strong>Properties</strong>：配置文件专用</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;no1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;懿轩&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k-v  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;no2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张无忌&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k-v  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;no1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三丰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当有相同的 k , 就等价于替换. </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;no3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三丰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k-v  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//k-v  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等价替换  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;no4&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//k-v  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;no5&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//k-v  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;赵敏&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k-v  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;金毛狮王&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k-v  </span></span>
<span class="line">        <span class="token comment">// 通过 get 方法，传入 key ,会返回对应的 value        </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;no2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//张无忌  </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;map=&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-map-常用方法" tabindex="-1"><a class="header-anchor" href="#_6-2-map-常用方法"><span>6.2 Map 常用方法</span></a></h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>V put(K key, V value)</code></td><td>添加键值对（key存在则替换）</td></tr><tr><td><code>V get(Object key)</code></td><td>根据key获取value</td></tr><tr><td><code>V remove(Object key)</code></td><td>根据key删除键值对</td></tr><tr><td><code>boolean containsKey(Object key)</code></td><td>判断是否包含某个key</td></tr><tr><td><code>boolean containsValue(Object value)</code></td><td>判断是否包含某个value</td></tr><tr><td><code>Set&lt;K&gt; keySet()</code></td><td>获取所有key的集合</td></tr><tr><td><code>Collection&lt;V&gt; values()</code></td><td>获取所有value的集合</td></tr><tr><td><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></td><td>获取所有键值对的集合</td></tr><tr><td><code>int size()</code></td><td>获取键值对个数</td></tr><tr><td><code>void clear()</code></td><td>清空所有键值对</td></tr></tbody></table><p><strong>示例代码：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapMethod</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">//演示 map 接口常用方法  </span></span>
<span class="line">        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;邓超&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//OK  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;邓超&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;孙俪&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//替换-&gt; 一会分析源码  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;王宝强&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;马蓉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//OK  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;宋喆&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;马蓉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//OK  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;刘令博&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//OK  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;刘亦菲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//OK  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;鹿晗&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;关晓彤&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//OK  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;hsp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hsp 的老婆&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;map=&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// remove:根据键删除映射关系  </span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;map=&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// get：根据键获取值  </span></span>
<span class="line">        <span class="token class-name">Object</span> val <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;鹿晗&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;val=&quot;</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// size:获取元素个数  </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;k-v=&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// isEmpty:判断个数是否为 0        </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//F  </span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// clear:清除 k-v        </span></span>
<span class="line">        <span class="token comment">// map.clear();        </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;map=&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// containsKey:查找键是否存在  </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结果=&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;hsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//T  </span></span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-map-的四种遍历方式" tabindex="-1"><a class="header-anchor" href="#_6-3-map-的四种遍历方式"><span>6.3 Map 的四种遍历方式</span></a></h3><p>Map 提供了四种遍历方式：</p><table><thead><tr><th>遍历方式</th><th>特点</th><th>推荐度</th></tr></thead><tbody><tr><td><strong>keySet() + get()</strong></td><td>通过key获取value</td><td>⭐⭐⭐</td></tr><tr><td><strong>values()</strong></td><td>只遍历value</td><td>⭐⭐</td></tr><tr><td><strong>entrySet() + Entry</strong></td><td>同时获取key和value</td><td>⭐⭐⭐⭐⭐（推荐）</td></tr><tr><td><strong>forEach（JDK 8+）</strong></td><td>Lambda表达式</td><td>⭐⭐⭐⭐</td></tr></tbody></table><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapFor</span><span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;邓超&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;孙俪&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;王宝强&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;马蓉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;宋喆&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;马蓉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;刘令博&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;刘亦菲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;鹿晗&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;关晓彤&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//第一组: 先取出 所有的 Key , 通过 Key 取出对应的 Value        </span></span>
<span class="line">        <span class="token class-name">Set</span> keyset <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token comment">//(1) 增强 for        </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----第一种方式-------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> key <span class="token operator">:</span> keyset<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token comment">//(2) 迭代器  </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----第二种方式--------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> keyset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token class-name">Object</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">          </span>
<span class="line">        <span class="token comment">//第二组: 把所有的 values 取出  </span></span>
<span class="line">        <span class="token class-name">Collection</span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token comment">//这里可以使用所有的 Collections 使用的遍历方法  </span></span>
<span class="line">        <span class="token comment">//(1) 增强 for        </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---取出所有的 value 增强 for----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token comment">//(2) 迭代器  </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---取出所有的 value 迭代器----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">Iterator</span> iterator2 <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token class-name">Object</span> value <span class="token operator">=</span> iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">          </span>
<span class="line">        <span class="token comment">//第三组: 通过 EntrySet 来获取 k-v        </span></span>
<span class="line">        <span class="token class-name">Set</span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;  </span></span>
<span class="line">        <span class="token comment">//(1) 增强 for        </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----使用 EntrySet 的 for 增强(第 3 种)----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token comment">//将 entry 转成 Map.Entry            </span></span>
<span class="line">            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> entry<span class="token punctuation">;</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token comment">//(2) 迭代器  </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----使用 EntrySet 的 迭代器(第 4 种)----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">Iterator</span> iterator3 <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token class-name">Object</span> entry <span class="token operator">=</span> iterator3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">            <span class="token comment">//System.out.println(next.getClass());</span></span>
<span class="line">            <span class="token comment">//HashMap$Node -实现-&gt; Map.Entry (getKey,getValue)  </span></span>
<span class="line">            <span class="token comment">//向下转型 Map.Entry            </span></span>
<span class="line">            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> entry<span class="token punctuation">;</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-hashmap-底层原理" tabindex="-1"><a class="header-anchor" href="#_6-4-hashmap-底层原理"><span>6.4 HashMap 底层原理</span></a></h3><h4 id="_6-4-1-hashmap-特点" tabindex="-1"><a class="header-anchor" href="#_6-4-1-hashmap-特点"><span>6.4.1 HashMap 特点</span></a></h4><p><strong>类定义：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心特点：</strong></p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>底层实现</strong></td><td>JDK 7：数组 + 链表<br>JDK 8+：数组 + 链表 + 红黑树</td></tr><tr><td><strong>初始容量</strong></td><td>16</td></tr><tr><td><strong>加载因子</strong></td><td>0.75（扩容阈值 = 容量 × 0.75）</td></tr><tr><td><strong>扩容机制</strong></td><td>扩容为原来的 2 倍</td></tr><tr><td><strong>key唯一性</strong></td><td>通过 hashCode() 和 equals() 保证</td></tr><tr><td><strong>允许null</strong></td><td>key 和 value 都可以为 null（key只能一个）</td></tr><tr><td><strong>线程安全</strong></td><td>不安全（效率高）</td></tr><tr><td><strong>有序性</strong></td><td>无序（不保证顺序）</td></tr></tbody></table><h4 id="_6-4-2-hashmap-底层结构" tabindex="-1"><a class="header-anchor" href="#_6-4-2-hashmap-底层结构"><span>6.4.2 HashMap 底层结构</span></a></h4><p><strong>JDK 8 之后的结构：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">数组（Node[] table）</span>
<span class="line">  ↓</span>
<span class="line">每个数组元素是一个链表的头节点</span>
<span class="line">  ↓</span>
<span class="line">链表长度 &gt; 8 &amp;&amp; 数组长度 ≥ 64</span>
<span class="line">  ↓</span>
<span class="line">链表转换为红黑树（提高查询效率）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Node 节点结构：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>    <span class="token comment">// 哈希值</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>       <span class="token comment">// 键</span></span>
<span class="line">    <span class="token class-name">V</span> value<span class="token punctuation">;</span>           <span class="token comment">// 值</span></span>
<span class="line">    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>    <span class="token comment">// 下一个节点</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-4-3-hashmap-扩容机制" tabindex="-1"><a class="header-anchor" href="#_6-4-3-hashmap-扩容机制"><span>6.4.3 HashMap 扩容机制</span></a></h4><p><strong>扩容时机：</strong></p><ol><li>元素个数超过阈值（capacity × loadFactor）</li><li>首次添加元素时初始化</li></ol><p><strong>扩容过程：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 1. 创建新数组（容量为原来的2倍）</span></span>
<span class="line">newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 左移1位，相当于 × 2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 重新计算每个元素的位置（rehash）</span></span>
<span class="line"><span class="token comment">// 3. 将元素移动到新数组</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapSource</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;php&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;map=&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        解读HashMap源码：</span>
<span class="line">        </span>
<span class="line">        1. HashMap map = new HashMap();</span>
<span class="line">           创建HashMap对象，底层：</span>
<span class="line">           public HashMap() {</span>
<span class="line">               this.loadFactor = DEFAULT_LOAD_FACTOR; // 0.75</span>
<span class="line">           }</span>
<span class="line">           注意：此时table数组还未创建</span>
<span class="line">        </span>
<span class="line">        2. map.put(&quot;java&quot;, 10);</span>
<span class="line">           执行put方法：</span>
<span class="line">           public V put(K key, V value) {</span>
<span class="line">               return putVal(hash(key), key, value, false, true);</span>
<span class="line">           }</span>
<span class="line">           </span>
<span class="line">           2.1 计算key的hash值：</span>
<span class="line">           static final int hash(Object key) {</span>
<span class="line">               int h;</span>
<span class="line">               return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span>
<span class="line">           }</span>
<span class="line">           </span>
<span class="line">           2.2 执行putVal方法：</span>
<span class="line">           - 首次添加时，table数组为null，进行扩容</span>
<span class="line">           - 扩容到16，阈值为12（16 × 0.75）</span>
<span class="line">           - 根据hash值计算存储位置：(n - 1) &amp; hash</span>
<span class="line">           - 如果位置为空，直接存储</span>
<span class="line">           - 如果位置有元素，判断key是否相同</span>
<span class="line">             - 相同：替换value</span>
<span class="line">             - 不同：以链表形式存储（JDK 8：尾插法）</span>
<span class="line">           </span>
<span class="line">           2.3 链表转红黑树：</span>
<span class="line">           - 链表长度 &gt; 8 &amp;&amp; 数组长度 ≥ 64</span>
<span class="line">           - 转换为红黑树，提高查询效率（O(log n)）</span>
<span class="line">        </span>
<span class="line">        3. 扩容机制：</span>
<span class="line">           - 当size &gt; threshold时扩容</span>
<span class="line">           - 新容量 = 旧容量 × 2</span>
<span class="line">           - 重新计算元素位置（rehash）</span>
<span class="line">        */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-4-4-hashmap-去重原理" tabindex="-1"><a class="header-anchor" href="#_6-4-4-hashmap-去重原理"><span>6.4.4 HashMap 去重原理</span></a></h4><p><strong>添加元素流程：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">添加 key-value</span>
<span class="line">  ↓</span>
<span class="line">计算 key 的 hashCode()</span>
<span class="line">  ↓</span>
<span class="line">根据 hash 值找到数组位置：(n-1) &amp; hash</span>
<span class="line">  ↓</span>
<span class="line">位置为空？</span>
<span class="line">  ├─ 是 → 直接存储</span>
<span class="line">  └─ 否 → equals() 比较 key</span>
<span class="line">          ├─ 相同 → 替换 value</span>
<span class="line">          └─ 不同 → 链表/红黑树存储</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重要方法：</strong></p><ol><li><strong>hashCode()</strong>：确定存储位置</li><li><strong>equals()</strong>：确认是否为同一个key</li></ol><p><strong>为什么重写 equals() 必须重写 hashCode()？</strong></p><ul><li>如果两个对象 equals() 返回 true，它们的 hashCode() 必须相同</li><li>否则在 HashMap 中会被当作不同的 key</li></ul><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 必须同时重写 hashCode 和 equals</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> age <span class="token operator">==</span> person<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-hashtable-底层原理" tabindex="-1"><a class="header-anchor" href="#_6-5-hashtable-底层原理"><span>6.5 Hashtable 底层原理</span></a></h3><h4 id="_6-5-1-hashtable-特点" tabindex="-1"><a class="header-anchor" href="#_6-5-1-hashtable-特点"><span>6.5.1 Hashtable 特点</span></a></h4><p><strong>类定义：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Dictionary</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心特点：</strong></p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>底层实现</strong></td><td>数组 + 链表（没有红黑树）</td></tr><tr><td><strong>初始容量</strong></td><td>11</td></tr><tr><td><strong>加载因子</strong></td><td>0.75</td></tr><tr><td><strong>扩容机制</strong></td><td>扩容为原来的 2倍 + 1</td></tr><tr><td><strong>线程安全</strong></td><td>安全（synchronized）</td></tr><tr><td><strong>允许null</strong></td><td>key 和 value 都不允许 null</td></tr><tr><td><strong>效率</strong></td><td>低（因为同步）</td></tr><tr><td><strong>继承</strong></td><td>Dictionary（古老的类）</td></tr></tbody></table><h4 id="_6-5-2-hashtable-底层结构" tabindex="-1"><a class="header-anchor" href="#_6-5-2-hashtable-底层结构"><span>6.5.2 Hashtable 底层结构</span></a></h4><p><strong>底层数组：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">V</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>  <span class="token comment">// 链表结构</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>与 HashMap 的区别：</strong></p><ol><li>线程安全：所有方法都加了 <code>synchronized</code></li><li>不允许 null：key 和 value 都不能为 null</li><li>扩容方式：2n + 1（HashMap 是 2n）</li><li>初始容量：11（HashMap 是 16）</li></ol><p><strong>示例代码：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashtableSource</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Hashtable</span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hashtable=&quot;</span> <span class="token operator">+</span> hashtable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        解读Hashtable源码：</span>
<span class="line">        </span>
<span class="line">        1. Hashtable hashtable = new Hashtable();</span>
<span class="line">           底层：</span>
<span class="line">           public Hashtable() {</span>
<span class="line">               this(11, 0.75f);  // 初始容量11，加载因子0.75</span>
<span class="line">           }</span>
<span class="line">           创建大小为11的Entry数组</span>
<span class="line">        </span>
<span class="line">        2. hashtable.put(&quot;john&quot;, 100);</span>
<span class="line">           public synchronized V put(K key, V value) {</span>
<span class="line">               // 不允许value为null</span>
<span class="line">               if (value == null) {</span>
<span class="line">                   throw new NullPointerException();</span>
<span class="line">               }</span>
<span class="line">               // 不允许key为null（因为要调用key.hashCode()）</span>
<span class="line">               int hash = key.hashCode();</span>
<span class="line">               int index = (hash &amp; 0x7FFFFFFF) % tab.length;</span>
<span class="line">               // 存储元素</span>
<span class="line">           }</span>
<span class="line">        </span>
<span class="line">        3. 扩容机制：</span>
<span class="line">           - 临界值：threshold = capacity * loadFactor</span>
<span class="line">           - 扩容大小：int newCapacity = (oldCapacity &lt;&lt; 1) + 1;  // 2n + 1</span>
<span class="line">           - 例如：11 → 23 → 47 → 95</span>
<span class="line">        */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-6-hashmap-和-hashtable-对比" tabindex="-1"><a class="header-anchor" href="#_6-6-hashmap-和-hashtable-对比"><span>6.6 HashMap 和 Hashtable 对比</span></a></h3><p><strong>详细对比表：</strong></p><table><thead><tr><th>特性</th><th>HashMap</th><th>Hashtable</th></tr></thead><tbody><tr><td><strong>版本</strong></td><td>JDK 1.2</td><td>JDK 1.0</td></tr><tr><td><strong>线程安全</strong></td><td>不安全</td><td>安全（synchronized）</td></tr><tr><td><strong>效率</strong></td><td>高</td><td>低</td></tr><tr><td><strong>null键</strong></td><td>允许1个null键</td><td>不允许</td></tr><tr><td><strong>null值</strong></td><td>允许多个null值</td><td>不允许</td></tr><tr><td><strong>初始容量</strong></td><td>16</td><td>11</td></tr><tr><td><strong>扩容倍数</strong></td><td>2倍</td><td>2倍 + 1</td></tr><tr><td><strong>底层结构</strong></td><td>数组+链表+红黑树</td><td>数组+链表</td></tr><tr><td><strong>继承</strong></td><td>AbstractMap</td><td>Dictionary</td></tr><tr><td><strong>推荐度</strong></td><td>⭐⭐⭐⭐⭐</td><td>⭐（已过时）</td></tr></tbody></table><p><strong>性能对比：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// HashMap - 效率高（无同步）</span></span>
<span class="line"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 快</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Hashtable - 效率低（同步锁）</span></span>
<span class="line"><span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 慢（每次操作都加锁）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用建议：</strong></p><ol><li>✅ <strong>单线程</strong>：使用 HashMap</li><li>✅ <strong>多线程</strong>： <ul><li>推荐：<code>ConcurrentHashMap</code>（分段锁，效率高）</li><li>或者：<code>Collections.synchronizedMap(new HashMap&lt;&gt;())</code></li><li>不推荐：Hashtable（已过时）</li></ul></li></ol><p><strong>示例对比：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapComparison</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. HashMap - 推荐（单线程）</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ✅ 允许null键</span></span>
<span class="line">        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ✅ 允许null值</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 2. Hashtable - 不推荐（已过时）</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// hashtable.put(null, 1);     // ❌ 抛出NullPointerException</span></span>
<span class="line">        <span class="token comment">// hashtable.put(&quot;key&quot;, null); // ❌ 抛出NullPointerException</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 3. ConcurrentHashMap - 推荐（多线程）</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> concurrentMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        concurrentMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ✅ 线程安全且高效</span></span>
<span class="line">        <span class="token comment">// concurrentMap.put(null, 1); // ❌ 不允许null</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 4. SynchronizedMap - 备选（多线程）</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> syncMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        syncMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ✅ 线程安全</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-7-properties-底层原理" tabindex="-1"><a class="header-anchor" href="#_6-7-properties-底层原理"><span>6.7 Properties 底层原理</span></a></h3><h4 id="_6-7-1-properties-特点" tabindex="-1"><a class="header-anchor" href="#_6-7-1-properties-特点"><span>6.7.1 Properties 特点</span></a></h4><p><strong>类定义：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Properties</span> <span class="token keyword">extends</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>核心特点：</strong></p><ol><li>✅ Properties 继承自 Hashtable，也是键值对存储</li><li>✅ key 和 value 都是 String 类型（建议）</li><li>✅ 专门用于读写配置文件（.properties）</li><li>✅ 线程安全（继承自Hashtable）</li><li>❌ key 和 value 都不能为 null</li></ol><p><strong>配置文件格式：</strong></p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 这是注释</span></span>
<span class="line"><span class="token key attr-name">username</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span></span>
<span class="line"><span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span></span>
<span class="line"><span class="token key attr-name">url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/db</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-7-2-properties-常用方法" tabindex="-1"><a class="header-anchor" href="#_6-7-2-properties-常用方法"><span>6.7.2 Properties 常用方法</span></a></h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>setProperty(String key, String value)</code></td><td>设置属性</td></tr><tr><td><code>getProperty(String key)</code></td><td>获取属性值</td></tr><tr><td><code>getProperty(String key, String defaultValue)</code></td><td>获取属性值（带默认值）</td></tr><tr><td><code>load(InputStream inStream)</code></td><td>从输入流加载配置</td></tr><tr><td><code>load(Reader reader)</code></td><td>从字符流加载配置</td></tr><tr><td><code>store(OutputStream out, String comments)</code></td><td>保存到输出流</td></tr><tr><td><code>store(Writer writer, String comments)</code></td><td>保存到字符流</td></tr><tr><td><code>list(PrintStream out)</code></td><td>列出所有属性</td></tr></tbody></table><h4 id="_6-7-3-基本使用" tabindex="-1"><a class="header-anchor" href="#_6-7-3-基本使用"><span>6.7.3 基本使用</span></a></h4>`,197)),a("p",null,[n[1]||(n[1]=a("strong",null,"说明：",-1)),n[2]||(n[2]=s(" 工作中 xxx.properties 文件通常作为配置文件使用，详细内容可参考 ",-1)),p(t,{to:"/tutorials/java-backend/java/%E7%AC%AC03%E7%AB%A0-%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B/07-IO%E6%B5%81%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html"},{default:e(()=>[...n[0]||(n[0]=[s("IO流章节",-1)])]),_:1})]),n[11]||(n[11]=l(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Properties_</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token comment">//解读  </span></span>
<span class="line">        <span class="token comment">//1. Properties 继承 Hashtable        </span></span>
<span class="line">        <span class="token comment">//2. 可以通过 k-v 存放数据，当然 key 和 value 不能为 null        </span></span>
<span class="line">        <span class="token comment">//增加  </span></span>
<span class="line">        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token comment">//properties.put(null, &quot;abc&quot;);//抛出 空指针异常  </span></span>
<span class="line">        <span class="token comment">//properties.put(&quot;abc&quot;, null);//抛出 空指针异常  </span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k-v  </span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;lic&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;lic&quot;</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果有相同的 key ， value 被替换  </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;properties=&quot;</span> <span class="token operator">+</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token comment">//通过 k 获取对应值  </span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;lic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//88  </span></span>
<span class="line">        <span class="token comment">//删除  </span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;lic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;properties=&quot;</span> <span class="token operator">+</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token comment">//修改  </span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;约翰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;properties=&quot;</span> <span class="token operator">+</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="七、集合选择指南" tabindex="-1"><a class="header-anchor" href="#七、集合选择指南"><span>七、集合选择指南</span></a></h2><h3 id="_7-1-选择流程图" tabindex="-1"><a class="header-anchor" href="#_7-1-选择流程图"><span>7.1 选择流程图</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">存储数据</span>
<span class="line">  ├─ 单个对象 → Collection</span>
<span class="line">  │   ├─ 允许重复 → List</span>
<span class="line">  │   │   ├─ 查询多 → ArrayList</span>
<span class="line">  │   │   └─ 增删多 → LinkedList</span>
<span class="line">  │   └─ 不允许重复 → Set</span>
<span class="line">  │       ├─ 无序 → HashSet</span>
<span class="line">  │       ├─ 排序 → TreeSet</span>
<span class="line">  │       └─ 保持顺序 → LinkedHashSet</span>
<span class="line">  └─ 键值对 → Map</span>
<span class="line">      ├─ 无序 → HashMap</span>
<span class="line">      ├─ 排序 → TreeMap</span>
<span class="line">      ├─ 保持顺序 → LinkedHashMap</span>
<span class="line">      └─ 配置文件 → Properties</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-选择建议表" tabindex="-1"><a class="header-anchor" href="#_7-2-选择建议表"><span>7.2 选择建议表</span></a></h3><table><thead><tr><th>需求</th><th>推荐集合</th><th>理由</th></tr></thead><tbody><tr><td>频繁查询</td><td>ArrayList</td><td>底层数组，查询O(1)</td></tr><tr><td>频繁增删</td><td>LinkedList</td><td>双向链表，增删O(1)</td></tr><tr><td>去重</td><td>HashSet</td><td>基于HashMap，去重快</td></tr><tr><td>去重+排序</td><td>TreeSet</td><td>红黑树，自动排序</td></tr><tr><td>键值对存储</td><td>HashMap</td><td>哈希表，效率高</td></tr><tr><td>键值对+排序</td><td>TreeMap</td><td>红黑树，按key排序</td></tr><tr><td>保持插入顺序</td><td>LinkedHashMap</td><td>额外维护链表</td></tr><tr><td>线程安全</td><td>ConcurrentHashMap</td><td>分段锁，效率高</td></tr></tbody></table><hr><h2 id="八、collections工具类" tabindex="-1"><a class="header-anchor" href="#八、collections工具类"><span>八、Collections工具类</span></a></h2><h3 id="_8-1-collections-简介" tabindex="-1"><a class="header-anchor" href="#_8-1-collections-简介"><span>8.1 Collections 简介</span></a></h3><p><strong>Collections 是操作集合的工具类</strong>（注意与 Collection 接口区分）</p><p><strong>特点：</strong></p><ul><li>提供了一系列 <strong>static</strong> 方法</li><li>用于对集合进行排序、查找、修改等操作</li><li>类似于数组的工具类 Arrays</li></ul><h3 id="_8-2-collections-常用方法" tabindex="-1"><a class="header-anchor" href="#_8-2-collections-常用方法"><span>8.2 Collections 常用方法</span></a></h3><h4 id="排序操作" tabindex="-1"><a class="header-anchor" href="#排序操作"><span>排序操作</span></a></h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>reverse(List)</code></td><td>反转List中元素的顺序</td></tr><tr><td><code>shuffle(List)</code></td><td>随机排序</td></tr><tr><td><code>sort(List)</code></td><td>自然顺序升序排序</td></tr><tr><td><code>sort(List, Comparator)</code></td><td>自定义排序规则</td></tr><tr><td><code>swap(List, int i, int j)</code></td><td>交换i和j位置的元素</td></tr></tbody></table><h4 id="查找操作" tabindex="-1"><a class="header-anchor" href="#查找操作"><span>查找操作</span></a></h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>max(Collection)</code></td><td>返回最大元素</td></tr><tr><td><code>min(Collection)</code></td><td>返回最小元素</td></tr><tr><td><code>frequency(Collection, Object)</code></td><td>返回元素出现次数</td></tr></tbody></table><h4 id="修改操作" tabindex="-1"><a class="header-anchor" href="#修改操作"><span>修改操作</span></a></h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>copy(List dest, List src)</code></td><td>复制集合</td></tr><tr><td><code>replaceAll(List, oldVal, newVal)</code></td><td>替换所有旧值</td></tr><tr><td><code>fill(List, Object)</code></td><td>用指定元素填充</td></tr></tbody></table><h3 id="_8-3-示例代码" tabindex="-1"><a class="header-anchor" href="#_8-3-示例代码"><span>8.3 示例代码</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Collections_</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//创建 ArrayList 集合，用于测试. </span></span>
<span class="line">        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;smith&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;king&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;milan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// reverse(List)：反转 List 中元素的顺序</span></span>
<span class="line">        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// shuffle(List)：对 List 集合元素进行随机排序</span></span>
<span class="line">        <span class="token comment">// for (int i = 0; i &lt; 5; i++) {</span></span>
<span class="line">        <span class="token comment">// Collections.shuffle(list);</span></span>
<span class="line">        <span class="token comment">// System.out.println(&quot;list=&quot; + list);</span></span>
<span class="line">        <span class="token comment">// }</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span>
<span class="line">        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;自然排序后&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span>
<span class="line">        <span class="token comment">//我们希望按照 字符串的长度大小排序</span></span>
<span class="line">        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//可以加入校验代码. </span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字符串长度大小排序=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span>
<span class="line">        <span class="token comment">//比如</span></span>
<span class="line">        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换后的情况&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;自然顺序最大元素=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span>
<span class="line">        <span class="token comment">//比如，我们要返回长度最大的元素</span></span>
<span class="line">        <span class="token class-name">Object</span> maxObject <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;长度最大的元素=&quot;</span> <span class="token operator">+</span> maxObject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//Object min(Collection)</span></span>
<span class="line">        <span class="token comment">//Object min(Collection，Comparator)</span></span>
<span class="line">        <span class="token comment">//上面的两个方法，参考 max 即可</span></span>
<span class="line">        <span class="token comment">//int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;tom 出现的次数=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">frequency</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//void copy(List dest,List src)：将 src 中的内容复制到 dest 中</span></span>
<span class="line">        <span class="token class-name">ArrayList</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//为了完成一个完整拷贝，我们需要先给 dest 赋值，大小和 list.size()一样</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            dest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//拷贝</span></span>
<span class="line">        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;dest=&quot;</span> <span class="token operator">+</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span>
<span class="line">        <span class="token comment">//如果 list 中，有 tom 就替换成 汤姆</span></span>
<span class="line">        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;汤姆&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list 替换后=&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4-使用注意事项" tabindex="-1"><a class="header-anchor" href="#_8-4-使用注意事项"><span>8.4 使用注意事项</span></a></h3><p><strong>重要提示：</strong></p><ol><li><p><strong>静态方法调用</strong></p><ul><li>所有方法都是 <code>static</code> 方法</li><li>直接通过 <code>Collections.方法名()</code> 调用</li><li>无需创建 Collections 对象</li></ul></li><li><p><strong>copy() 方法特殊要求</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// ❌ 错误：目标集合为空</span></span>
<span class="line"><span class="token class-name">List</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 抛出异常</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 正确：目标集合大小 ≥ 源集合</span></span>
<span class="line"><span class="token class-name">List</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> src<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    dest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先填充元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>自定义排序规则</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 使用 Comparator 自定义排序</span></span>
<span class="line"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 按长度降序</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// JDK 8+ Lambda 表达式</span></span>
<span class="line"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>线程安全转换</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 将线程不安全的集合转为线程安全</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> syncList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> syncMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>常用工具方法总结：</strong></p><table><thead><tr><th>分类</th><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><strong>查找</strong></td><td><code>max(Collection)</code></td><td>返回最大元素（自然顺序）</td></tr><tr><td></td><td><code>min(Collection)</code></td><td>返回最小元素（自然顺序）</td></tr><tr><td></td><td><code>max(Collection, Comparator)</code></td><td>返回最大元素（自定义规则）</td></tr><tr><td></td><td><code>min(Collection, Comparator)</code></td><td>返回最小元素（自定义规则）</td></tr><tr><td></td><td><code>frequency(Collection, Object)</code></td><td>统计元素出现次数</td></tr><tr><td><strong>修改</strong></td><td><code>copy(List dest, List src)</code></td><td>复制集合</td></tr><tr><td></td><td><code>replaceAll(List, old, new)</code></td><td>替换所有旧值</td></tr><tr><td></td><td><code>fill(List, Object)</code></td><td>用指定元素填充</td></tr><tr><td><strong>排序</strong></td><td><code>sort(List)</code></td><td>自然顺序排序</td></tr><tr><td></td><td><code>sort(List, Comparator)</code></td><td>自定义排序</td></tr><tr><td></td><td><code>reverse(List)</code></td><td>反转列表</td></tr><tr><td></td><td><code>shuffle(List)</code></td><td>随机打乱</td></tr><tr><td><strong>线程安全</strong></td><td><code>synchronizedList(List)</code></td><td>返回线程安全的List</td></tr><tr><td></td><td><code>synchronizedSet(Set)</code></td><td>返回线程安全的Set</td></tr><tr><td></td><td><code>synchronizedMap(Map)</code></td><td>返回线程安全的Map</td></tr></tbody></table><hr><h2 id="九、面试常见问题" tabindex="-1"><a class="header-anchor" href="#九、面试常见问题"><span>九、面试常见问题</span></a></h2><h3 id="q1-arraylist-和-linkedlist-的区别" tabindex="-1"><a class="header-anchor" href="#q1-arraylist-和-linkedlist-的区别"><span>Q1: ArrayList 和 LinkedList 的区别？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>ArrayList</th><th>LinkedList</th></tr></thead><tbody><tr><td>底层实现</td><td>动态数组</td><td>双向链表</td></tr><tr><td>随机访问</td><td>快 O(1)</td><td>慢 O(n)</td></tr><tr><td>插入删除</td><td>慢（需要移动元素）</td><td>快（只需改变指针）</td></tr><tr><td>内存占用</td><td>连续空间</td><td>额外指针开销</td></tr><tr><td>适用场景</td><td>查询多</td><td>增删多</td></tr></tbody></table><hr><h3 id="q2-hashmap-和-hashtable-的区别" tabindex="-1"><a class="header-anchor" href="#q2-hashmap-和-hashtable-的区别"><span>Q2: HashMap 和 Hashtable 的区别？</span></a></h3><p><strong>答案：</strong></p><table><thead><tr><th>特性</th><th>HashMap</th><th>Hashtable</th></tr></thead><tbody><tr><td>线程安全</td><td>不安全</td><td>安全（synchronized）</td></tr><tr><td>效率</td><td>高</td><td>低</td></tr><tr><td>null键值</td><td>允许</td><td>不允许</td></tr><tr><td>继承</td><td>AbstractMap</td><td>Dictionary</td></tr><tr><td>推荐度</td><td>⭐⭐⭐⭐⭐</td><td>⭐（已过时）</td></tr></tbody></table><hr><h3 id="q3-hashset-如何保证元素不重复" tabindex="-1"><a class="header-anchor" href="#q3-hashset-如何保证元素不重复"><span>Q3: HashSet 如何保证元素不重复？</span></a></h3><p><strong>答案：</strong></p><p>HashSet 底层是 HashMap，利用 HashMap 的 key 不重复特性：</p><ol><li>添加元素时调用 <code>hashCode()</code> 计算哈希值</li><li>根据哈希值找到存储位置</li><li>如果位置为空，直接存储</li><li>如果位置有元素，调用 <code>equals()</code> 比较</li><li>相同则不添加，不同则以链表或红黑树形式存储</li></ol><hr><h3 id="q4-collection-和-collections-的区别" tabindex="-1"><a class="header-anchor" href="#q4-collection-和-collections-的区别"><span>Q4: Collection 和 Collections 的区别？</span></a></h3><p><strong>答案：</strong></p><ul><li><strong>Collection</strong>：集合接口，定义了集合的基本操作</li><li><strong>Collections</strong>：工具类，提供了操作集合的静态方法（排序、查找等）</li></ul><hr><h3 id="q5-如何选择合适的集合" tabindex="-1"><a class="header-anchor" href="#q5-如何选择合适的集合"><span>Q5: 如何选择合适的集合？</span></a></h3><p><strong>答案：</strong></p><p><strong>单列集合（Collection）：</strong></p><ul><li>需要有序、可重复 → List <ul><li>查询多 → ArrayList</li><li>增删多 → LinkedList</li></ul></li><li>需要无序、不重复 → Set <ul><li>无序 → HashSet</li><li>排序 → TreeSet</li><li>保持插入顺序 → LinkedHashSet</li></ul></li></ul><p><strong>双列集合（Map）：</strong></p><ul><li>无序 → HashMap</li><li>排序 → TreeMap</li><li>保持插入顺序 → LinkedHashMap</li><li>线程安全 → ConcurrentHashMap</li></ul><hr>`,53)),a("p",null,[n[4]||(n[4]=a("strong",null,"上一章：",-1)),n[5]||(n[5]=s()),p(t,{to:"/tutorials/java-backend/java/%E7%AC%AC03%E7%AB%A0-%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B/03-%E5%B8%B8%E7%94%A8%E7%B1%BB%EF%BC%88%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89.html"},{default:e(()=>[...n[3]||(n[3]=[s("常用类",-1)])]),_:1})]),a("p",null,[n[7]||(n[7]=a("strong",null,"下一章：",-1)),n[8]||(n[8]=s()),p(t,{to:"/tutorials/java-backend/java/%E7%AC%AC03%E7%AB%A0-%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B/05-%E6%B3%9B%E5%9E%8B.html"},{default:e(()=>[...n[6]||(n[6]=[s("泛型",-1)])]),_:1}),n[9]||(n[9]=s(" →",-1))])])}const h=c(d,[["render",m]]),g=JSON.parse('{"path":"/tutorials/java-backend/java/di03zhang-jinjiebiancheng/04-jihelei.html","title":"Java 集合框架","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"一、集合与数组的区别","slug":"一、集合与数组的区别","link":"#一、集合与数组的区别","children":[{"level":3,"title":"1.1 对比表格","slug":"_1-1-对比表格","link":"#_1-1-对比表格","children":[]},{"level":3,"title":"1.2 数组的局限性","slug":"_1-2-数组的局限性","link":"#_1-2-数组的局限性","children":[]},{"level":3,"title":"1.3 集合的优势","slug":"_1-3-集合的优势","link":"#_1-3-集合的优势","children":[]}]},{"level":2,"title":"二、集合框架体系","slug":"二、集合框架体系","link":"#二、集合框架体系","children":[{"level":3,"title":"2.1 框架结构图","slug":"_2-1-框架结构图","link":"#_2-1-框架结构图","children":[]},{"level":3,"title":"2.2 两大接口体系","slug":"_2-2-两大接口体系","link":"#_2-2-两大接口体系","children":[]}]},{"level":2,"title":"三、Collection接口","slug":"三、collection接口","link":"#三、collection接口","children":[{"level":3,"title":"3.1 Collection接口特点","slug":"_3-1-collection接口特点","link":"#_3-1-collection接口特点","children":[]},{"level":3,"title":"3.2 常用方法","slug":"_3-2-常用方法","link":"#_3-2-常用方法","children":[]},{"level":3,"title":"3.3 Collection 遍历方式","slug":"_3-3-collection-遍历方式","link":"#_3-3-collection-遍历方式","children":[]}]},{"level":2,"title":"四、List接口","slug":"四、list接口","link":"#四、list接口","children":[{"level":3,"title":"4.1 List 接口特点","slug":"_4-1-list-接口特点","link":"#_4-1-list-接口特点","children":[]},{"level":3,"title":"4.2 List 特有方法","slug":"_4-2-list-特有方法","link":"#_4-2-list-特有方法","children":[]},{"level":3,"title":"4.3 List 的三种遍历方式","slug":"_4-3-list-的三种遍历方式","link":"#_4-3-list-的三种遍历方式","children":[]},{"level":3,"title":"4.4 ArrayList 底层分析","slug":"_4-4-arraylist-底层分析","link":"#_4-4-arraylist-底层分析","children":[]},{"level":3,"title":"4.5 Vector 底层分析","slug":"_4-5-vector-底层分析","link":"#_4-5-vector-底层分析","children":[]},{"level":3,"title":"4.6 ArrayList vs Vector 对比","slug":"_4-6-arraylist-vs-vector-对比","link":"#_4-6-arraylist-vs-vector-对比","children":[]}]},{"level":2,"title":"五、Set接口","slug":"五、set接口","link":"#五、set接口","children":[{"level":3,"title":"5.1 Set 接口特点","slug":"_5-1-set-接口特点","link":"#_5-1-set-接口特点","children":[]},{"level":3,"title":"5.2 Set 常用方法","slug":"_5-2-set-常用方法","link":"#_5-2-set-常用方法","children":[]},{"level":3,"title":"5.3 Set 的遍历方式","slug":"_5-3-set-的遍历方式","link":"#_5-3-set-的遍历方式","children":[]},{"level":3,"title":"5.4 HashSet 底层原理","slug":"_5-4-hashset-底层原理","link":"#_5-4-hashset-底层原理","children":[]},{"level":3,"title":"5.5 LinkedHashSet 特点","slug":"_5-5-linkedhashset-特点","link":"#_5-5-linkedhashset-特点","children":[]}]},{"level":2,"title":"六、Map接口","slug":"六、map接口","link":"#六、map接口","children":[{"level":3,"title":"6.1 Map 接口特点","slug":"_6-1-map-接口特点","link":"#_6-1-map-接口特点","children":[]},{"level":3,"title":"6.2 Map 常用方法","slug":"_6-2-map-常用方法","link":"#_6-2-map-常用方法","children":[]},{"level":3,"title":"6.3 Map 的四种遍历方式","slug":"_6-3-map-的四种遍历方式","link":"#_6-3-map-的四种遍历方式","children":[]},{"level":3,"title":"6.4 HashMap 底层原理","slug":"_6-4-hashmap-底层原理","link":"#_6-4-hashmap-底层原理","children":[]},{"level":3,"title":"6.5 Hashtable 底层原理","slug":"_6-5-hashtable-底层原理","link":"#_6-5-hashtable-底层原理","children":[]},{"level":3,"title":"6.6 HashMap 和 Hashtable 对比","slug":"_6-6-hashmap-和-hashtable-对比","link":"#_6-6-hashmap-和-hashtable-对比","children":[]},{"level":3,"title":"6.7 Properties 底层原理","slug":"_6-7-properties-底层原理","link":"#_6-7-properties-底层原理","children":[]}]},{"level":2,"title":"七、集合选择指南","slug":"七、集合选择指南","link":"#七、集合选择指南","children":[{"level":3,"title":"7.1 选择流程图","slug":"_7-1-选择流程图","link":"#_7-1-选择流程图","children":[]},{"level":3,"title":"7.2 选择建议表","slug":"_7-2-选择建议表","link":"#_7-2-选择建议表","children":[]}]},{"level":2,"title":"八、Collections工具类","slug":"八、collections工具类","link":"#八、collections工具类","children":[{"level":3,"title":"8.1 Collections 简介","slug":"_8-1-collections-简介","link":"#_8-1-collections-简介","children":[]},{"level":3,"title":"8.2 Collections 常用方法","slug":"_8-2-collections-常用方法","link":"#_8-2-collections-常用方法","children":[]},{"level":3,"title":"8.3 示例代码","slug":"_8-3-示例代码","link":"#_8-3-示例代码","children":[]},{"level":3,"title":"8.4 使用注意事项","slug":"_8-4-使用注意事项","link":"#_8-4-使用注意事项","children":[]}]},{"level":2,"title":"九、面试常见问题","slug":"九、面试常见问题","link":"#九、面试常见问题","children":[{"level":3,"title":"Q1: ArrayList 和 LinkedList 的区别？","slug":"q1-arraylist-和-linkedlist-的区别","link":"#q1-arraylist-和-linkedlist-的区别","children":[]},{"level":3,"title":"Q2: HashMap 和 Hashtable 的区别？","slug":"q2-hashmap-和-hashtable-的区别","link":"#q2-hashmap-和-hashtable-的区别","children":[]},{"level":3,"title":"Q3: HashSet 如何保证元素不重复？","slug":"q3-hashset-如何保证元素不重复","link":"#q3-hashset-如何保证元素不重复","children":[]},{"level":3,"title":"Q4: Collection 和 Collections 的区别？","slug":"q4-collection-和-collections-的区别","link":"#q4-collection-和-collections-的区别","children":[]},{"level":3,"title":"Q5: 如何选择合适的集合？","slug":"q5-如何选择合适的集合","link":"#q5-如何选择合适的集合","children":[]}]}],"git":{"createdTime":1760859744000,"updatedTime":1761053181000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":3}]},"filePathRelative":"tutorials/java-backend/java/第03章-进阶编程/04-集合类.md"}');export{h as comp,g as data};
