import{_ as l,c as o,d as c,e as a,f as s,b as t,w as p,r as i,o as r}from"./app-DOpRTEVU.js";const u={};function d(k,n){const e=i("RouteLink");return r(),o("div",null,[n[7]||(n[7]=c(`<h1 id="java-变量与数据类型" tabindex="-1"><a class="header-anchor" href="#java-变量与数据类型"><span>Java 变量与数据类型</span></a></h1><blockquote><p><strong>本章重点：</strong> 八大基本数据类型、类型转换、String类型转换</p><p><strong>面试频率：</strong> ⭐⭐⭐⭐</p></blockquote><hr><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#%E4%B8%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">一、变量的基本概念</a></li><li><a href="#%E4%BA%8Cjava%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">二、Java数据类型</a></li><li><a href="#%E4%B8%89%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">三、简单类型与引用类型</a></li><li><a href="#%E5%9B%9B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3">四、基本数据类型详解</a></li><li><a href="#%E4%BA%94%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">五、类型转换</a></li><li><a href="#%E5%85%ADstring%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">六、String类型转换</a></li><li><a href="#%E4%B8%83%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">七、运算符中的类型转换</a></li></ul><hr><h2 id="一、变量的基本概念" tabindex="-1"><a class="header-anchor" href="#一、变量的基本概念"><span>一、变量的基本概念</span></a></h2><h3 id="_1-1-什么是变量" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是变量"><span>1.1 什么是变量</span></a></h3><p><strong>变量：</strong> 程序中可以变化的量，用于存储数据。</p><p><strong>变量三要素：</strong></p><ol><li><strong>变量类型</strong>：数据类型</li><li><strong>变量名</strong>：标识符</li><li><strong>变量值</strong>：存储的数据</li></ol><h3 id="_1-2-变量的声明和使用" tabindex="-1"><a class="header-anchor" href="#_1-2-变量的声明和使用"><span>1.2 变量的声明和使用</span></a></h3><p><strong>语法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">数据类型 变量名 <span class="token operator">=</span> 初始值<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>           <span class="token comment">// 整型变量</span></span>
<span class="line"><span class="token keyword">double</span> salary <span class="token operator">=</span> <span class="token number">8888.88</span><span class="token punctuation">;</span> <span class="token comment">// 浮点型变量</span></span>
<span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>    <span class="token comment">// 字符串变量</span></span>
<span class="line"><span class="token keyword">boolean</span> isStudent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 布尔型变量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-变量命名规范" tabindex="-1"><a class="header-anchor" href="#_1-3-变量命名规范"><span>1.3 变量命名规范</span></a></h3><p><strong>命名规则：</strong></p><ol><li>由字母、数字、下划线、$ 组成</li><li>不能以数字开头</li><li>不能使用关键字</li><li>区分大小写</li></ol><p><strong>命名建议：</strong></p><ul><li>使用驼峰命名法：<code>userName</code>、<code>studentAge</code></li><li>见名知义：<code>age</code> 而不是 <code>a</code></li><li>常量使用大写：<code>MAX_VALUE</code></li></ul><hr><h2 id="二、java数据类型" tabindex="-1"><a class="header-anchor" href="#二、java数据类型"><span>二、Java数据类型</span></a></h2><h3 id="_2-1-数据类型分类" tabindex="-1"><a class="header-anchor" href="#_2-1-数据类型分类"><span>2.1 数据类型分类</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Java数据类型</span>
<span class="line">├── 基本数据类型（8种）</span>
<span class="line">│   ├── 整型（4种）</span>
<span class="line">│   │   ├── byte (1字节)</span>
<span class="line">│   │   ├── short (2字节)</span>
<span class="line">│   │   ├── int (4字节)</span>
<span class="line">│   │   └── long (8字节)</span>
<span class="line">│   ├── 浮点型（2种）</span>
<span class="line">│   │   ├── float (4字节)</span>
<span class="line">│   │   └── double (8字节)</span>
<span class="line">│   ├── 字符型（1种）</span>
<span class="line">│   │   └── char (2字节)</span>
<span class="line">│   └── 布尔型（1种）</span>
<span class="line">│       └── boolean (1字节)</span>
<span class="line">└── 引用数据类型</span>
<span class="line">    ├── 类（class）</span>
<span class="line">    ├── 接口（interface）</span>
<span class="line">    ├── 数组（array）</span>
<span class="line">    └── 枚举（enum）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-基本数据类型一览表" tabindex="-1"><a class="header-anchor" href="#_2-2-基本数据类型一览表"><span>2.2 基本数据类型一览表</span></a></h3><table><thead><tr><th>类型</th><th>字节数</th><th>位数</th><th>取值范围</th><th>默认值</th><th>包装类</th></tr></thead><tbody><tr><td><code>byte</code></td><td>1</td><td>8</td><td>-128 ~ 127</td><td>0</td><td>Byte</td></tr><tr><td><code>short</code></td><td>2</td><td>16</td><td>-32768 ~ 32767</td><td>0</td><td>Short</td></tr><tr><td><code>int</code></td><td>4</td><td>32</td><td>-2^31 ~ 2^31-1</td><td>0</td><td>Integer</td></tr><tr><td><code>long</code></td><td>8</td><td>64</td><td>-2^63 ~ 2^63-1</td><td>0L</td><td>Long</td></tr><tr><td><code>float</code></td><td>4</td><td>32</td><td>±3.4E+38</td><td>0.0f</td><td>Float</td></tr><tr><td><code>double</code></td><td>8</td><td>64</td><td>±1.7E+308</td><td>0.0d</td><td>Double</td></tr><tr><td><code>char</code></td><td>2</td><td>16</td><td>0 ~ 65535</td><td>&#39;\\u0000&#39;</td><td>Character</td></tr><tr><td><code>boolean</code></td><td>-</td><td>-</td><td>true/false</td><td>false</td><td>Boolean</td></tr></tbody></table><hr><h2 id="三、简单类型与引用类型" tabindex="-1"><a class="header-anchor" href="#三、简单类型与引用类型"><span>三、简单类型与引用类型</span></a></h2><h3 id="_3-1-两种类型的区别" tabindex="-1"><a class="header-anchor" href="#_3-1-两种类型的区别"><span>3.1 两种类型的区别</span></a></h3><p>在Java中，数据类型分为两大类：<strong>简单类型（基本类型）<strong>和</strong>引用类型</strong>。理解这两种类型的区别对于掌握Java内存管理至关重要。</p><h4 id="简单类型-primitive-types" tabindex="-1"><a class="header-anchor" href="#简单类型-primitive-types"><span>简单类型（Primitive Types）</span></a></h4><p>简单类型是直接包含值的数据类型，它们存储的是实际的数据而不是指向数据的引用。</p><p><strong>8种简单类型：</strong></p><ul><li><strong>整数类型</strong>: <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code></li><li><strong>浮点类型</strong>: <code>float</code>, <code>double</code></li><li><strong>字符类型</strong>: <code>char</code></li><li><strong>布尔类型</strong>: <code>boolean</code></li></ul><h4 id="引用类型-reference-types" tabindex="-1"><a class="header-anchor" href="#引用类型-reference-types"><span>引用类型（Reference Types）</span></a></h4><p>引用类型存储的是对象的引用（地址），而不是对象本身。</p><p><strong>引用类型包括：</strong></p><ul><li>类（Class）</li><li>接口（Interface）</li><li>数组（Array）</li><li>枚举（Enum）</li></ul><h3 id="_3-2-核心区别对比" tabindex="-1"><a class="header-anchor" href="#_3-2-核心区别对比"><span>3.2 核心区别对比</span></a></h3><table><thead><tr><th>特性</th><th>简单类型</th><th>引用类型</th></tr></thead><tbody><tr><td><strong>存储内容</strong></td><td>直接存储值</td><td>存储对象的引用（地址）</td></tr><tr><td><strong>存储位置</strong></td><td>栈内存</td><td>对象在堆内存，引用在栈内存</td></tr><tr><td><strong>内存大小</strong></td><td>固定大小</td><td>动态大小</td></tr><tr><td><strong>默认值</strong></td><td>0、false、&#39;\\u0000&#39;</td><td>null</td></tr><tr><td><strong>比较方式</strong></td><td>使用 <code>==</code> 比较值</td><td><code>==</code> 比较引用，<code>equals()</code> 比较内容</td></tr><tr><td><strong>传递方式</strong></td><td>值传递（副本）</td><td>值传递（引用的副本）</td></tr></tbody></table><h3 id="_3-3-代码示例" tabindex="-1"><a class="header-anchor" href="#_3-3-代码示例"><span>3.3 代码示例</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 简单类型示例</span></span>
<span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>      <span class="token comment">// b获得a的值的一个副本</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token comment">// 修改b不会影响a</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a = &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b = &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 20</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 引用类型示例</span></span>
<span class="line"><span class="token class-name">StringBuilder</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">StringBuilder</span> sb2 <span class="token operator">=</span> sb1<span class="token punctuation">;</span>  <span class="token comment">// sb2获得sb1引用的对象</span></span>
<span class="line">sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 修改sb2也会影响sb1</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sb1 = &quot;</span> <span class="token operator">+</span> sb1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello World</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sb2 = &quot;</span> <span class="token operator">+</span> sb2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello World</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-值传递机制" tabindex="-1"><a class="header-anchor" href="#_3-4-值传递机制"><span>3.4 值传递机制</span></a></h3><p><strong>重要：Java中只有值传递，没有引用传递！</strong></p><ul><li><strong>简单类型</strong>：传递的是值的副本</li><li><strong>引用类型</strong>：传递的是引用的副本（地址值的副本）</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PassByValueDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 简单类型</span></span>
<span class="line">        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">changeValue</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;num = &quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10（未改变）</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 引用类型</span></span>
<span class="line">        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">changeReference</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sb = &quot;</span> <span class="token operator">+</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Hello World（已改变）</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 引用类型 - 改变引用本身</span></span>
<span class="line">        <span class="token class-name">StringBuilder</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">reassignReference</span><span class="token punctuation">(</span>sb2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sb2 = &quot;</span> <span class="token operator">+</span> sb2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello（未改变）</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 简单类型：传递值的副本</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment">// 只改变副本，不影响原变量</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 引用类型：传递引用的副本，可以修改对象内容</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">changeReference</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过引用修改对象</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 引用类型：重新赋值不影响原引用</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reassignReference</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;New&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 只改变副本引用</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-常见误区" tabindex="-1"><a class="header-anchor" href="#_3-5-常见误区"><span>3.5 常见误区</span></a></h3><p><strong>❌ 错误理解：</strong></p><ul><li>Java有引用传递</li><li>引用类型传递的是对象本身</li></ul><p><strong>✅ 正确理解：</strong></p><ul><li>Java只有值传递</li><li>引用类型传递的是引用的副本（地址值的副本）</li><li>通过引用的副本可以修改对象内容，但不能改变原引用指向</li></ul><hr><h2 id="四、基本数据类型详解" tabindex="-1"><a class="header-anchor" href="#四、基本数据类型详解"><span>四、基本数据类型详解</span></a></h2><h3 id="_4-1-整数类型" tabindex="-1"><a class="header-anchor" href="#_4-1-整数类型"><span>4.1 整数类型</span></a></h3><h4 id="四种整型对比" tabindex="-1"><a class="header-anchor" href="#四种整型对比"><span>四种整型对比</span></a></h4><table><thead><tr><th>类型</th><th>字节</th><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td><code>byte</code></td><td>1</td><td>-128 ~ 127</td><td>节省空间，用于大量数据</td></tr><tr><td><code>short</code></td><td>2</td><td>-32768 ~ 32767</td><td>较少使用</td></tr><tr><td><code>int</code></td><td>4</td><td>-2147483648 ~ 2147483647</td><td><strong>最常用</strong></td></tr><tr><td><code>long</code></td><td>8</td><td>-9223372036854775808 ~ 9223372036854775807</td><td>超大整数</td></tr></tbody></table><h4 id="整型使用细节" tabindex="-1"><a class="header-anchor" href="#整型使用细节"><span>整型使用细节</span></a></h4><p><strong>1. Java 整型常量默认为 int 型</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// ✅ 正确</span></span>
<span class="line"><span class="token keyword">long</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// ✅ 正确（自动转换）</span></span>
<span class="line"><span class="token keyword">long</span> n3 <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>      <span class="token comment">// ✅ 正确（推荐）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 声明 long 型常量需要加 L 或 l</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">long</span> n1 <span class="token operator">=</span> <span class="token number">9999999999</span><span class="token punctuation">;</span>   <span class="token comment">// ❌ 错误：超出 int 范围</span></span>
<span class="line"><span class="token keyword">long</span> n2 <span class="token operator">=</span> <span class="token number">9999999999L</span><span class="token punctuation">;</span>  <span class="token comment">// ✅ 正确</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 不同进制表示</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>      <span class="token comment">// 十进制</span></span>
<span class="line"><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">0b1100100</span><span class="token punctuation">;</span><span class="token comment">// 二进制（0b开头）</span></span>
<span class="line"><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">0144</span><span class="token punctuation">;</span>     <span class="token comment">// 八进制（0开头）</span></span>
<span class="line"><span class="token keyword">int</span> n4 <span class="token operator">=</span> <span class="token number">0x64</span><span class="token punctuation">;</span>     <span class="token comment">// 十六进制（0x开头）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-2-浮点类型" tabindex="-1"><a class="header-anchor" href="#_4-2-浮点类型"><span>4.2 浮点类型</span></a></h3><h4 id="两种浮点型对比" tabindex="-1"><a class="header-anchor" href="#两种浮点型对比"><span>两种浮点型对比</span></a></h4><table><thead><tr><th>类型</th><th>字节</th><th>精度</th><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td><code>float</code></td><td>4</td><td>7位</td><td>±3.4E+38</td><td>单精度</td></tr><tr><td><code>double</code></td><td>8</td><td>15位</td><td>±1.7E+308</td><td><strong>双精度（推荐）</strong></td></tr></tbody></table><h4 id="浮点型使用细节" tabindex="-1"><a class="header-anchor" href="#浮点型使用细节"><span>浮点型使用细节</span></a></h4><p><strong>1. Java 浮点型常量默认为 double 型</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>     <span class="token comment">// ❌ 错误：不能将 double 赋给 float</span></span>
<span class="line"><span class="token keyword">float</span> f2 <span class="token operator">=</span> <span class="token number">1.1f</span><span class="token punctuation">;</span>    <span class="token comment">// ✅ 正确（加 f 或 F）</span></span>
<span class="line"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>    <span class="token comment">// ✅ 正确</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 浮点数表示形式</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">5.12</span><span class="token punctuation">;</span>           <span class="token comment">// 十进制</span></span>
<span class="line"><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">5.12e2</span><span class="token punctuation">;</span>         <span class="token comment">// 科学计数法（512.0）</span></span>
<span class="line"><span class="token keyword">double</span> d3 <span class="token operator">=</span> <span class="token number">5.12E-2</span><span class="token punctuation">;</span>        <span class="token comment">// 科学计数法（0.0512）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 浮点数使用陷阱</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">8.1</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 2.6999999999999997（精度问题）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 比较浮点数是否相等</span></span>
<span class="line"><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">8.1</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> d3 <span class="token operator">=</span> <span class="token number">2.7</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>d2 <span class="token operator">-</span> d3<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.000001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 使用差值比较</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;相等&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重要提示：</strong> 如果需要精确计算（如金额），使用 <code>BigDecimal</code> 类！</p><hr><h3 id="_4-3-字符类型-char" tabindex="-1"><a class="header-anchor" href="#_4-3-字符类型-char"><span>4.3 字符类型（char）</span></a></h3><h4 id="字符类型特点" tabindex="-1"><a class="header-anchor" href="#字符类型特点"><span>字符类型特点</span></a></h4><ul><li>用单引号 <code>&#39;&#39;</code> 表示</li><li>只能存放单个字符</li><li>占 2 个字节（可以存储中文字符）</li><li>本质是整数（Unicode 编码）</li></ul><h4 id="字符表示方式" tabindex="-1"><a class="header-anchor" href="#字符表示方式"><span>字符表示方式</span></a></h4><p><strong>1. 普通字符</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>      <span class="token comment">// 英文字符</span></span>
<span class="line"><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span><span class="token punctuation">;</span>     <span class="token comment">// 中文字符</span></span>
<span class="line"><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">;</span>      <span class="token comment">// 数字字符</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 转义字符</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>     <span class="token comment">// 换行</span></span>
<span class="line"><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span>     <span class="token comment">// 制表符</span></span>
<span class="line"><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;\\\\&#39;</span><span class="token punctuation">;</span>     <span class="token comment">// 反斜杠</span></span>
<span class="line"><span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token char">&#39;\\&#39;&#39;</span><span class="token punctuation">;</span>     <span class="token comment">// 单引号</span></span>
<span class="line"><span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token char">&#39;\\&quot;&#39;</span><span class="token punctuation">;</span>     <span class="token comment">// 双引号</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. Unicode 编码</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;\\u0061&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;a&#39; 的 Unicode 编码</span></span>
<span class="line"><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;\\u4e2d&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;中&#39; 的 Unicode 编码</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. ASCII 码表示</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>       <span class="token comment">// ASCII 码 97 对应 &#39;a&#39;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符运算" tabindex="-1"><a class="header-anchor" href="#字符运算"><span>字符运算</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> c1<span class="token punctuation">;</span>                <span class="token comment">// 字符可以自动转为 int</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 97</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">// 98 -&gt; &#39;b&#39;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// b</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-4-布尔类型-boolean" tabindex="-1"><a class="header-anchor" href="#_4-4-布尔类型-boolean"><span>4.4 布尔类型（boolean）</span></a></h3><p><strong>特点：</strong></p><ul><li>只有两个值：<code>true</code> 和 <code>false</code></li><li>不能用 0 或非 0 表示（不同于 C 语言）</li><li>常用于条件判断和循环控制</li></ul><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>b1<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b1 是 true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">boolean</span> isPass <span class="token operator">=</span> <span class="token number">85</span> <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">;</span>  <span class="token comment">// 条件表达式的结果</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isPass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>❌ 错误用法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// ❌ 错误：不能用整数</span></span>
<span class="line"><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// ❌ 错误：不能用整数</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>          <span class="token comment">// ❌ 错误：条件必须是 boolean</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、类型转换" tabindex="-1"><a class="header-anchor" href="#五、类型转换"><span>五、类型转换</span></a></h2><h3 id="_5-1-自动类型转换-隐式转换" tabindex="-1"><a class="header-anchor" href="#_5-1-自动类型转换-隐式转换"><span>5.1 自动类型转换（隐式转换）</span></a></h3><p><strong>定义：</strong> 将容量小的类型自动转换为容量大的类型。</p><p><strong>转换路径：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">byte → short → int → long → float → double</span>
<span class="line">       char  →</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> d1 <span class="token operator">=</span> n1<span class="token punctuation">;</span>     <span class="token comment">// 自动转换：int → double</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 100.0</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n2 <span class="token operator">=</span> c1<span class="token punctuation">;</span>        <span class="token comment">// 自动转换：char → int</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 97</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n3 <span class="token operator">=</span> b1<span class="token punctuation">;</span>        <span class="token comment">// 自动转换：byte → int</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-自动类型转换的细节" tabindex="-1"><a class="header-anchor" href="#_5-2-自动类型转换的细节"><span>5.2 自动类型转换的细节</span></a></h3><p><strong>1. 多种类型混合运算，自动转换为容量最大的类型</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> d2 <span class="token operator">=</span> n1 <span class="token operator">+</span> d1<span class="token punctuation">;</span>    <span class="token comment">// int → double，结果为 double</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 11.1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. byte、short、char 之间不能相互自动转换</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">short</span> s1 <span class="token operator">=</span> b1<span class="token punctuation">;</span>      <span class="token comment">// ❌ 错误：不能自动转换</span></span>
<span class="line"><span class="token keyword">short</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> b1<span class="token punctuation">;</span>  <span class="token comment">// ✅ 正确：需要强制转换</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. byte、short、char 三者在计算时首先转换为 int</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">byte</span> b3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span>  <span class="token comment">// ❌ 错误：b1 + b2 的结果是 int</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span>   <span class="token comment">// ✅ 正确</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. boolean 不参与类型转换</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> b1<span class="token punctuation">;</span>        <span class="token comment">// ❌ 错误：boolean 不能转换为其他类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-3-强制类型转换-显式转换" tabindex="-1"><a class="header-anchor" href="#_5-3-强制类型转换-显式转换"><span>5.3 强制类型转换（显式转换）</span></a></h3><p><strong>定义：</strong> 将容量大的类型转换为容量小的类型（可能损失精度）。</p><p><strong>语法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">目标类型 变量名 <span class="token operator">=</span> <span class="token punctuation">(</span>目标类型<span class="token punctuation">)</span> 原值<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 1. double → int（丢失小数部分）</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1.9</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. int → byte（可能溢出）</span></span>
<span class="line"><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> n2<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 44（发生溢出）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 字符运算</span></span>
<span class="line"><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> n3<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// d</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-强制类型转换的细节" tabindex="-1"><a class="header-anchor" href="#_5-4-强制类型转换的细节"><span>5.4 强制类型转换的细节</span></a></h3><p><strong>1. 精度降低</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> d1<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3（小数部分丢失）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 溢出</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> n1<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -128（溢出）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 强制转换只对最近的操作数有效</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">3.5</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">;</span>  <span class="token comment">// ❌ 错误：编译错误</span></span>
<span class="line"><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">3.5</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ✅ 正确：结果为 44</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、string类型转换" tabindex="-1"><a class="header-anchor" href="#六、string类型转换"><span>六、String类型转换</span></a></h2><h3 id="_6-1-基本类型转-string" tabindex="-1"><a class="header-anchor" href="#_6-1-基本类型转-string"><span>6.1 基本类型转 String</span></a></h3><p><strong>方式一：使用 + 号（推荐）</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;100&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> d1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;3.14&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s3 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;true&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式二：使用 String.valueOf()</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-string-转基本类型" tabindex="-1"><a class="header-anchor" href="#_6-2-string-转基本类型"><span>6.2 String 转基本类型</span></a></h3><p><strong>使用包装类的 parseXxx() 方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// String → int</span></span>
<span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 123</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// String → double</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;3.14&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3.14</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// String → boolean</span></span>
<span class="line"><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// String → long</span></span>
<span class="line"><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">&quot;9999999999&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> l1 <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 9999999999</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-string-转-char" tabindex="-1"><a class="header-anchor" href="#_6-3-string-转-char"><span>6.3 String 转 char</span></a></h3><p><strong>使用 charAt() 方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> c1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取第一个字符</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// h</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">char</span> c2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取第五个字符</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// o</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-注意事项" tabindex="-1"><a class="header-anchor" href="#_6-4-注意事项"><span>6.4 注意事项</span></a></h3><p><strong>1. 字符串必须能转换为有效数据</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ✅ 正确</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ❌ 运行时错误：NumberFormatException</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 空字符串和null的处理</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ❌ NumberFormatException</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ❌ NullPointerException</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="七、运算符中的类型转换" tabindex="-1"><a class="header-anchor" href="#七、运算符中的类型转换"><span>七、运算符中的类型转换</span></a></h2><h3 id="_7-1-号的作用" tabindex="-1"><a class="header-anchor" href="#_7-1-号的作用"><span>7.1 + 号的作用</span></a></h3><p><strong>1. 数值相加</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 198</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>2. 字符串连接</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span> <span class="token operator">+</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;10098&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3. 混合运算（从左到右）</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;103hello&quot;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span> <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;hello1003&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-运算中的自动转换" tabindex="-1"><a class="header-anchor" href="#_7-2-运算中的自动转换"><span>7.2 运算中的自动转换</span></a></h3><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// byte b3 = b1 + b2;  // ❌ 错误：结果是 int</span></span>
<span class="line"><span class="token keyword">int</span> n1 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span>      <span class="token comment">// ✅ 正确</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// short s2 = s1 + n2; // ❌ 错误：结果是 int</span></span>
<span class="line"><span class="token keyword">int</span> n3 <span class="token operator">=</span> s1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>      <span class="token comment">// ✅ 正确</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="📚-快速记忆" tabindex="-1"><a class="header-anchor" href="#📚-快速记忆"><span>📚 快速记忆</span></a></h2><p><strong>1. 八大基本类型：</strong></p><ul><li>整型：byte、short、int、long</li><li>浮点：float、double</li><li>字符：char</li><li>布尔：boolean</li></ul><p><strong>2. 类型转换规则：</strong></p><ul><li>小→大：自动转换</li><li>大→小：强制转换（可能损失精度）</li></ul><p><strong>3. String 转换：</strong></p><ul><li>基本类型 → String：<code>值 + &quot;&quot;</code></li><li>String → 基本类型：<code>包装类.parseXxx()</code></li></ul><p><strong>4. 运算中的注意：</strong></p><ul><li>byte、short、char 运算结果都是 int</li><li>有 double 参与运算，结果是 double</li></ul><hr>`,171)),a("p",null,[n[1]||(n[1]=a("strong",null,"上一章：",-1)),n[2]||(n[2]=s()),t(e,{to:"/tutorials/java-backend/java/%E7%AC%AC01%E7%AB%A0-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/01-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E5%85%B7.html"},{default:p(()=>[...n[0]||(n[0]=[s("开发环境与工具",-1)])]),_:1})]),a("p",null,[n[4]||(n[4]=a("strong",null,"下一章：",-1)),n[5]||(n[5]=s()),t(e,{to:"/tutorials/java-backend/java/%E7%AC%AC01%E7%AB%A0-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/03-%E8%BF%90%E7%AE%97%E7%AC%A6.html"},{default:p(()=>[...n[3]||(n[3]=[s("运算符",-1)])]),_:1}),n[6]||(n[6]=s(" →",-1))])])}const v=l(u,[["render",d]]),b=JSON.parse('{"path":"/tutorials/java-backend/java/di01zhang-jichurumen/02-bianliangyushujuleixing.html","title":"Java 变量与数据类型","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"一、变量的基本概念","slug":"一、变量的基本概念","link":"#一、变量的基本概念","children":[{"level":3,"title":"1.1 什么是变量","slug":"_1-1-什么是变量","link":"#_1-1-什么是变量","children":[]},{"level":3,"title":"1.2 变量的声明和使用","slug":"_1-2-变量的声明和使用","link":"#_1-2-变量的声明和使用","children":[]},{"level":3,"title":"1.3 变量命名规范","slug":"_1-3-变量命名规范","link":"#_1-3-变量命名规范","children":[]}]},{"level":2,"title":"二、Java数据类型","slug":"二、java数据类型","link":"#二、java数据类型","children":[{"level":3,"title":"2.1 数据类型分类","slug":"_2-1-数据类型分类","link":"#_2-1-数据类型分类","children":[]},{"level":3,"title":"2.2 基本数据类型一览表","slug":"_2-2-基本数据类型一览表","link":"#_2-2-基本数据类型一览表","children":[]}]},{"level":2,"title":"三、简单类型与引用类型","slug":"三、简单类型与引用类型","link":"#三、简单类型与引用类型","children":[{"level":3,"title":"3.1 两种类型的区别","slug":"_3-1-两种类型的区别","link":"#_3-1-两种类型的区别","children":[]},{"level":3,"title":"3.2 核心区别对比","slug":"_3-2-核心区别对比","link":"#_3-2-核心区别对比","children":[]},{"level":3,"title":"3.3 代码示例","slug":"_3-3-代码示例","link":"#_3-3-代码示例","children":[]},{"level":3,"title":"3.4 值传递机制","slug":"_3-4-值传递机制","link":"#_3-4-值传递机制","children":[]},{"level":3,"title":"3.5 常见误区","slug":"_3-5-常见误区","link":"#_3-5-常见误区","children":[]}]},{"level":2,"title":"四、基本数据类型详解","slug":"四、基本数据类型详解","link":"#四、基本数据类型详解","children":[{"level":3,"title":"4.1 整数类型","slug":"_4-1-整数类型","link":"#_4-1-整数类型","children":[]},{"level":3,"title":"4.2 浮点类型","slug":"_4-2-浮点类型","link":"#_4-2-浮点类型","children":[]},{"level":3,"title":"4.3 字符类型（char）","slug":"_4-3-字符类型-char","link":"#_4-3-字符类型-char","children":[]},{"level":3,"title":"4.4 布尔类型（boolean）","slug":"_4-4-布尔类型-boolean","link":"#_4-4-布尔类型-boolean","children":[]}]},{"level":2,"title":"五、类型转换","slug":"五、类型转换","link":"#五、类型转换","children":[{"level":3,"title":"5.1 自动类型转换（隐式转换）","slug":"_5-1-自动类型转换-隐式转换","link":"#_5-1-自动类型转换-隐式转换","children":[]},{"level":3,"title":"5.2 自动类型转换的细节","slug":"_5-2-自动类型转换的细节","link":"#_5-2-自动类型转换的细节","children":[]},{"level":3,"title":"5.3 强制类型转换（显式转换）","slug":"_5-3-强制类型转换-显式转换","link":"#_5-3-强制类型转换-显式转换","children":[]},{"level":3,"title":"5.4 强制类型转换的细节","slug":"_5-4-强制类型转换的细节","link":"#_5-4-强制类型转换的细节","children":[]}]},{"level":2,"title":"六、String类型转换","slug":"六、string类型转换","link":"#六、string类型转换","children":[{"level":3,"title":"6.1 基本类型转 String","slug":"_6-1-基本类型转-string","link":"#_6-1-基本类型转-string","children":[]},{"level":3,"title":"6.2 String 转基本类型","slug":"_6-2-string-转基本类型","link":"#_6-2-string-转基本类型","children":[]},{"level":3,"title":"6.3 String 转 char","slug":"_6-3-string-转-char","link":"#_6-3-string-转-char","children":[]},{"level":3,"title":"6.4 注意事项","slug":"_6-4-注意事项","link":"#_6-4-注意事项","children":[]}]},{"level":2,"title":"七、运算符中的类型转换","slug":"七、运算符中的类型转换","link":"#七、运算符中的类型转换","children":[{"level":3,"title":"7.1 + 号的作用","slug":"_7-1-号的作用","link":"#_7-1-号的作用","children":[]},{"level":3,"title":"7.2 运算中的自动转换","slug":"_7-2-运算中的自动转换","link":"#_7-2-运算中的自动转换","children":[]}]},{"level":2,"title":"📚 快速记忆","slug":"📚-快速记忆","link":"#📚-快速记忆","children":[]}],"git":{"createdTime":1760859744000,"updatedTime":1760959407000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java-backend/java/第01章-基础入门/02-变量与数据类型.md"}');export{v as comp,b as data};
