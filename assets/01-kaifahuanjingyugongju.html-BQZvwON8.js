import{_ as p,c as e,d as l,e as a,f as s,b as c,w as o,r as i,o as u}from"./app-I6OnLCmc.js";const r={};function d(k,n){const t=i("RouteLink");return u(),e("div",null,[n[4]||(n[4]=l(`<h1 id="java-开发环境与工具" tabindex="-1"><a class="header-anchor" href="#java-开发环境与工具"><span>Java 开发环境与工具</span></a></h1><blockquote><p><strong>本章重点：</strong> IDEA快捷键、Java输入输出、常用工具方法</p><p><strong>面试频率：</strong> ⭐⭐</p></blockquote><hr><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#%E4%B8%80idea-%E5%BF%AB%E6%8D%B7%E9%94%AE">一、IDEA 快捷键</a></li><li><a href="#%E4%BA%8Cjava%E5%B8%B8%E7%94%A8%E5%85%A5%E9%97%A8%E8%AF%AD%E5%8F%A5">二、Java常用入门语句</a></li><li><a href="#%E4%B8%89%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95">三、常用工具方法</a></li><li><a href="#%E5%9B%9B%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">四、面试常见问题</a></li></ul><hr><h2 id="一、idea-快捷键" tabindex="-1"><a class="header-anchor" href="#一、idea-快捷键"><span>一、IDEA 快捷键</span></a></h2><h3 id="_1-1-代码编辑" tabindex="-1"><a class="header-anchor" href="#_1-1-代码编辑"><span>1.1 代码编辑</span></a></h3><table><thead><tr><th>快捷键</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + Alt + L</code></td><td>格式化代码</td><td>自动调整代码格式</td></tr><tr><td><code>Alt + Enter</code></td><td>快速修复错误</td><td>显示修复建议</td></tr><tr><td><code>Ctrl + D</code></td><td>复制当前行</td><td>复制并粘贴到下一行</td></tr><tr><td><code>Ctrl + Y</code></td><td>删除当前行</td><td>快速删除整行</td></tr><tr><td><code>Ctrl + /</code></td><td>单行注释</td><td>注释或取消注释</td></tr><tr><td><code>Ctrl + Shift + /</code></td><td>多行注释</td><td>块注释</td></tr></tbody></table><h3 id="_1-2-代码生成" tabindex="-1"><a class="header-anchor" href="#_1-2-代码生成"><span>1.2 代码生成</span></a></h3><table><thead><tr><th>快捷键</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td><code>Alt + Insert</code></td><td>生成代码</td><td>构造器、getter/setter等</td></tr><tr><td><code>psvm</code> + <code>Tab</code></td><td>生成main方法</td><td>快速生成主方法</td></tr><tr><td><code>sout</code> + <code>Tab</code></td><td>生成打印语句</td><td>System.out.println()</td></tr><tr><td><code>.var</code></td><td>自动分配变量名</td><td>自动生成变量声明</td></tr><tr><td><code>Ctrl + Alt + T</code></td><td>包围代码</td><td>try-catch、if等</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 1. 输入 psvm 按 Tab</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 输入 sout 按 Tab</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 使用 .var</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">var</span>  <span class="token comment">// 自动生成: Scanner scanner = new Scanner(System.in);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-代码导航" tabindex="-1"><a class="header-anchor" href="#_1-3-代码导航"><span>1.3 代码导航</span></a></h3><table><thead><tr><th>快捷键</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + B</code></td><td>跳转到定义</td><td>查看方法实现或类定义</td></tr><tr><td><code>Ctrl + Alt + B</code></td><td>跳转到实现</td><td>查看接口的实现类</td></tr><tr><td><code>Ctrl + H</code></td><td>查看类继承关系</td><td>显示类的层次结构</td></tr><tr><td><code>Ctrl + E</code></td><td>最近打开的文件</td><td>快速切换文件</td></tr><tr><td><code>Ctrl + F12</code></td><td>查看类结构</td><td>显示类的所有成员</td></tr><tr><td><code>Alt + F7</code></td><td>查找使用位置</td><td>查找方法或变量的使用</td></tr></tbody></table><h3 id="_1-4-其他实用快捷键" tabindex="-1"><a class="header-anchor" href="#_1-4-其他实用快捷键"><span>1.4 其他实用快捷键</span></a></h3><table><thead><tr><th>快捷键</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td><code>Shift + F6</code></td><td>重命名</td><td>重命名变量、方法、类</td></tr><tr><td><code>Ctrl + Shift + U</code></td><td>大小写切换</td><td>转换选中文本的大小写</td></tr><tr><td><code>Ctrl + W</code></td><td>扩大选择范围</td><td>逐步选择代码块</td></tr><tr><td><code>Ctrl + Shift + W</code></td><td>缩小选择范围</td><td>逐步缩小选择</td></tr></tbody></table><h3 id="_1-5-项目管理" tabindex="-1"><a class="header-anchor" href="#_1-5-项目管理"><span>1.5 项目管理</span></a></h3><p><strong>防止包重合在一起：</strong></p><ul><li>点击文件右上角三个点</li><li>关闭 <code>Compact Middle Packages</code> 选项</li></ul><p><strong>查看类图：</strong></p><ul><li>右键点击类名</li><li>选择 <code>Diagrams</code> → <code>Show Diagram</code></li></ul><hr><h2 id="二、java常用入门语句" tabindex="-1"><a class="header-anchor" href="#二、java常用入门语句"><span>二、Java常用入门语句</span></a></h2><h3 id="_2-1-程序结构" tabindex="-1"><a class="header-anchor" href="#_2-1-程序结构"><span>2.1 程序结构</span></a></h3><h4 id="基本程序结构" tabindex="-1"><a class="header-anchor" href="#基本程序结构"><span>基本程序结构</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 主方法 - 程序入口</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 代码内容</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键说明：</strong></p><ul><li><code>public class</code> - 公共类声明</li><li><code>HelloWorld</code> - 类名（必须与文件名一致）</li><li><code>main</code> - 主方法，程序执行的入口</li><li><code>String[] args</code> - 命令行参数</li></ul><h3 id="_2-2-注释" tabindex="-1"><a class="header-anchor" href="#_2-2-注释"><span>2.2 注释</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 这是单行注释</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> 这是</span>
<span class="line"> 多行注释</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 这是文档注释（JavaDoc）</span>
<span class="line"> * <span class="token keyword">@author</span> 作者名</span>
<span class="line"> * <span class="token keyword">@version</span> 1.0</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 这是方法注释</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">name</span> 参数说明</span>
<span class="line">     * <span class="token keyword">@return</span> 返回值说明</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注释类型：</strong></p><table><thead><tr><th>类型</th><th>语法</th><th>使用场景</th></tr></thead><tbody><tr><td><strong>单行注释</strong></td><td><code>//</code></td><td>简短说明</td></tr><tr><td><strong>多行注释</strong></td><td><code>/* */</code></td><td>较长说明</td></tr><tr><td><strong>文档注释</strong></td><td><code>/** */</code></td><td>类、方法文档</td></tr></tbody></table><h3 id="_2-3-输入语句" tabindex="-1"><a class="header-anchor" href="#_2-3-输入语句"><span>2.3 输入语句</span></a></h3><p>Java 使用 <code>Scanner</code> 类来接收用户输入。</p><p><strong>基本使用：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 整型输入</span></span>
<span class="line"><span class="token keyword">byte</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">short</span> s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> l <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token comment">// 浮点型输入</span></span>
<span class="line"><span class="token keyword">float</span> f <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> d <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 布尔型输入</span></span>
<span class="line"><span class="token keyword">boolean</span> bool <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 字符输入</span></span>
<span class="line"><span class="token keyword">char</span> ch <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 字符串输入</span></span>
<span class="line"><span class="token class-name">String</span> str1 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遇到空格结束</span></span>
<span class="line"><span class="token class-name">String</span> str2 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 遇到回车结束</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 释放资源</span></span>
<span class="line">sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-next-与-nextline-区别" tabindex="-1"><a class="header-anchor" href="#_2-4-next-与-nextline-区别"><span>2.4 next() 与 nextLine() 区别</span></a></h3><table><thead><tr><th>特性</th><th>next()</th><th>nextLine()</th></tr></thead><tbody><tr><td>空格处理</td><td>遇到空格结束输入</td><td>可以获取空格</td></tr><tr><td>结束符</td><td>空格或回车</td><td>回车</td></tr><tr><td>前导空白</td><td>自动去除</td><td>不去除</td></tr><tr><td>使用场景</td><td>单个单词</td><td>整行文本</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// next() - 不能获取带空格的字符串</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入姓名：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输入 &quot;Zhang San&quot;，只得到 &quot;Zhang&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// nextLine() - 可以获取带空格的字符串</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入地址：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> address <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输入 &quot;Beijing China&quot;，得到完整字符串</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-输出语句" tabindex="-1"><a class="header-anchor" href="#_2-5-输出语句"><span>2.5 输出语句</span></a></h3><p>Java 提供了三种输出方式：</p><h4 id="_1-println-自动换行" tabindex="-1"><a class="header-anchor" href="#_1-println-自动换行"><span>① println() - 自动换行</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 输出：</span></span>
<span class="line"><span class="token comment">// Hello</span></span>
<span class="line"><span class="token comment">// World</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-print-不自动换行" tabindex="-1"><a class="header-anchor" href="#_2-print-不自动换行"><span>② print() - 不自动换行</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 输出：HelloWorld</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-printf-格式化输出" tabindex="-1"><a class="header-anchor" href="#_3-printf-格式化输出"><span>③ printf() - 格式化输出</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;姓名：%s，年龄：%d，成绩：%.2f\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">95.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 输出：姓名：张三，年龄：18，成绩：95.50</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>格式化说明符：</strong></p><table><thead><tr><th>格式符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>%d</code></td><td>整数</td><td><code>System.out.printf(&quot;%d&quot;, 100);</code> → 100</td></tr><tr><td><code>%f</code></td><td>浮点数</td><td><code>System.out.printf(&quot;%.2f&quot;, 3.14159);</code> → 3.14</td></tr><tr><td><code>%s</code></td><td>字符串</td><td><code>System.out.printf(&quot;%s&quot;, &quot;Hello&quot;);</code> → Hello</td></tr><tr><td><code>%c</code></td><td>字符</td><td><code>System.out.printf(&quot;%c&quot;, &#39;A&#39;);</code> → A</td></tr><tr><td><code>%md</code></td><td>占m列的整数</td><td><code>System.out.printf(&quot;%5d&quot;, 10);</code> → &quot; 10&quot;</td></tr><tr><td><code>%m.nf</code></td><td>占m列，保留n位小数</td><td><code>System.out.printf(&quot;%6.2f&quot;, 3.14);</code> → &quot; 3.14&quot;</td></tr></tbody></table><h3 id="_2-6-条件语句" tabindex="-1"><a class="header-anchor" href="#_2-6-条件语句"><span>2.6 条件语句</span></a></h3><h4 id="if-else-语句" tabindex="-1"><a class="header-anchor" href="#if-else-语句"><span>if-else 语句</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 单分支</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码块</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 双分支</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 条件为true执行</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 条件为false执行</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 多分支</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码块1</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码块2</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码块3</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;良好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;不及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="switch-语句" tabindex="-1"><a class="header-anchor" href="#switch-语句"><span>switch 语句</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">// 代码块1</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">// 代码块2</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">// 默认代码</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> dayName<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">        dayName <span class="token operator">=</span> <span class="token string">&quot;星期一&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">        dayName <span class="token operator">=</span> <span class="token string">&quot;星期二&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">        dayName <span class="token operator">=</span> <span class="token string">&quot;星期三&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">        dayName <span class="token operator">=</span> <span class="token string">&quot;无效&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dayName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 星期三</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项：</strong></p><ul><li><code>break</code> 必须加，否则会穿透执行</li><li><code>default</code> 可以省略，但建议加上</li><li>Java 12+ 支持新语法：<code>case 1 -&gt; &quot;Monday&quot;;</code></li></ul><h3 id="_2-7-循环语句" tabindex="-1"><a class="header-anchor" href="#_2-7-循环语句"><span>2.7 循环语句</span></a></h3><h4 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 基本 for 循环</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 条件<span class="token punctuation">;</span> 迭代<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 循环体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例：打印 1-10</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 增强 for 循环（for-each）</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// while 循环</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 循环体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例：求和 1+2+...+100</span></span>
<span class="line"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span></span>
<span class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5050</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-while-循环" tabindex="-1"><a class="header-anchor" href="#do-while-循环"><span>do-while 循环</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// do-while 循环（至少执行一次）</span></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 循环体</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例</span></span>
<span class="line"> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    num<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>循环控制：</strong></p><table><thead><tr><th>关键字</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>break</code></td><td>结束循环</td><td><code>if (i == 5) break;</code></td></tr><tr><td><code>continue</code></td><td>跳过本次循环</td><td><code>if (i % 2 == 0) continue;</code></td></tr></tbody></table><h3 id="_2-8-数组声明与初始化" tabindex="-1"><a class="header-anchor" href="#_2-8-数组声明与初始化"><span>2.8 数组声明与初始化</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 方式一：声明后初始化</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 创建长度为5的数组</span></span>
<span class="line">arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式二：声明时初始化</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式三：完整形式</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 二维数组</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 遍历数组</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 增强 for遍历</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-9-方法定义" tabindex="-1"><a class="header-anchor" href="#_2-9-方法定义"><span>2.9 方法定义</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 基本方法结构</span></span>
<span class="line">访问修饰符 返回类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 方法体</span></span>
<span class="line">    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例1：无参数无返回值</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例2：有参数有返回值</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例3：可变参数</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        total <span class="token operator">+=</span> num<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> total<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用方法</span></span>
<span class="line"><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-10-常用快捷输入模板" tabindex="-1"><a class="header-anchor" href="#_2-10-常用快捷输入模板"><span>2.10 常用快捷输入模板</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputTemplate</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 读取整数</span></span>
<span class="line">        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 读取数组</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 读取字符串</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 读取一行（包含空格）</span></span>
<span class="line">        sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 清空缓冲区</span></span>
<span class="line">        <span class="token class-name">String</span> line <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 关闭资源</span></span>
<span class="line">        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、常用工具方法" tabindex="-1"><a class="header-anchor" href="#三、常用工具方法"><span>三、常用工具方法</span></a></h2><h3 id="_3-1-字符串转换" tabindex="-1"><a class="header-anchor" href="#_3-1-字符串转换"><span>3.1 字符串转换</span></a></h3><h4 id="charat-获取字符串中的字符" tabindex="-1"><a class="header-anchor" href="#charat-获取字符串中的字符"><span>charAt() - 获取字符串中的字符</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;H&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 字符转数字（常用于处理数字字符）</span></span>
<span class="line"><span class="token class-name">String</span> numStr <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> digit <span class="token operator">=</span> numStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span></span>
<span class="line"><span class="token comment">// 解释：&#39;3&#39; 的 ASCII 值是 51，&#39;0&#39; 的 ASCII 值是 48，相减得到 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-valueof-其他类型转字符串" tabindex="-1"><a class="header-anchor" href="#string-valueof-其他类型转字符串"><span>String.valueOf() - 其他类型转字符串</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;100&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &quot;3.14&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &quot;true&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 特殊情况：null</span></span>
<span class="line"><span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;null&quot;（字符串）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="integer-parseint-字符串转整数" tabindex="-1"><a class="header-anchor" href="#integer-parseint-字符串转整数"><span>Integer.parseInt() - 字符串转整数</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 基本用法</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 100</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 指定进制转换</span></span>
<span class="line"><span class="token class-name">String</span> hexStr <span class="token operator">=</span> <span class="token string">&quot;FF&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> decimal <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>hexStr<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 255（十六进制转十进制）</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> binStr <span class="token operator">=</span> <span class="token string">&quot;1010&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> decimal2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>binStr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10（二进制转十进制）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-字符串分割" tabindex="-1"><a class="header-anchor" href="#_3-2-字符串分割"><span>3.2 字符串分割</span></a></h3><h4 id="split-分割字符串" tabindex="-1"><a class="header-anchor" href="#split-分割字符串"><span>split() - 分割字符串</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 基本用法</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;apple,banana,orange&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fruits <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 分数处理示例</span></span>
<span class="line"><span class="token class-name">String</span> fraction <span class="token operator">=</span> <span class="token string">&quot;3/4&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts <span class="token operator">=</span> fraction<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> numerator <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 分子：3</span></span>
<span class="line"><span class="token keyword">int</span> denominator <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 分母：4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="split-的高级用法" tabindex="-1"><a class="header-anchor" href="#split-的高级用法"><span>split() 的高级用法</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 使用正则表达式分割</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;2018年11月18日abcd85gg688&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 按数字分割</span></span>
<span class="line"><span class="token comment">// parts = [&quot;&quot;, &quot;年&quot;, &quot;月&quot;, &quot;日abcd&quot;, &quot;gg&quot;, &quot;&quot;]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// limit 参数</span></span>
<span class="line"><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// parts2 = [&quot;a&quot;, &quot;b,c,d&quot;]（最多分割1次，得到2个元素）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>split() 的 limit 参数说明：</strong></p><table><thead><tr><th>limit值</th><th>行为</th><th>示例</th></tr></thead><tbody><tr><td><code>limit &gt; 0</code></td><td>最多分割 limit-1 次</td><td><code>&quot;a,b,c&quot;.split(&quot;,&quot;, 2)</code> → [&quot;a&quot;, &quot;b,c&quot;]</td></tr><tr><td><code>limit &lt; 0</code></td><td>分割所有，保留尾部空串</td><td><code>&quot;a,b,c,&quot;.split(&quot;,&quot;, -1)</code> → [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;&quot;]</td></tr><tr><td><code>limit = 0</code></td><td>分割所有，丢弃尾部空串</td><td><code>&quot;a,b,c,&quot;.split(&quot;,&quot;, 0)</code> → [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</td></tr></tbody></table><h3 id="_3-3-数学计算" tabindex="-1"><a class="header-anchor" href="#_3-3-数学计算"><span>3.3 数学计算</span></a></h3><h4 id="最大公约数-gcd" tabindex="-1"><a class="header-anchor" href="#最大公约数-gcd"><span>最大公约数（GCD）</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 方法一：循环实现</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> temp <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span></span>
<span class="line">        a <span class="token operator">=</span> b<span class="token punctuation">;</span></span>
<span class="line">        b <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> a<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方法二：递归实现</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用示例</span></span>
<span class="line"><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="最小公倍数-lcm" tabindex="-1"><a class="header-anchor" href="#最小公倍数-lcm"><span>最小公倍数（LCM）</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用示例</span></span>
<span class="line"><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 36</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-数组、字符串、集合的长度" tabindex="-1"><a class="header-anchor" href="#_3-4-数组、字符串、集合的长度"><span>3.4 数组、字符串、集合的长度</span></a></h3><table><thead><tr><th>类型</th><th>方法/属性</th><th>使用场景</th><th>示例</th></tr></thead><tbody><tr><td><strong>数组</strong></td><td><code>length</code></td><td>获取数组长度（属性）</td><td><code>int[] arr = {1,2,3}; arr.length</code> → 3</td></tr><tr><td><strong>字符串</strong></td><td><code>length()</code></td><td>获取字符串长度（方法）</td><td><code>&quot;Hello&quot;.length()</code> → 5</td></tr><tr><td><strong>集合</strong></td><td><code>size()</code></td><td>获取集合大小（方法）</td><td><code>list.size()</code> → 集合元素个数</td></tr></tbody></table><p><strong>记忆技巧：</strong></p><ul><li>数组是<strong>属性</strong>（length），不加括号</li><li>字符串和集合是<strong>方法</strong>（length()、size()），需要加括号</li></ul><hr><h2 id="四、面试常见问题" tabindex="-1"><a class="header-anchor" href="#四、面试常见问题"><span>四、面试常见问题</span></a></h2><h3 id="q1-java中的输入输出流是什么" tabindex="-1"><a class="header-anchor" href="#q1-java中的输入输出流是什么"><span>Q1: Java中的输入输出流是什么？</span></a></h3><p><strong>答案：</strong></p><p>Java的输入输出（I/O）基于流（Stream）的概念：</p><ul><li><strong>输入流</strong>：从数据源读取数据到程序（如：Scanner、InputStream）</li><li><strong>输出流</strong>：从程序写数据到目的地（如：System.out、OutputStream）</li></ul><p><strong>标准输入输出：</strong></p><ul><li><code>System.in</code> - 标准输入流（键盘）</li><li><code>System.out</code> - 标准输出流（控制台）</li><li><code>System.err</code> - 标准错误流（控制台）</li></ul><hr><h3 id="q2-next-和-nextline-混合使用时要注意什么" tabindex="-1"><a class="header-anchor" href="#q2-next-和-nextline-混合使用时要注意什么"><span>Q2: next() 和 nextLine() 混合使用时要注意什么？</span></a></h3><p><strong>答案：</strong></p><p><strong>问题：</strong> nextLine() 前面如果有 next()、nextInt() 等方法，会导致 nextLine() 读取到空字符串。</p><p><strong>原因：</strong> next()、nextInt() 等方法不会读取换行符，换行符会残留在输入缓冲区中，导致 nextLine() 直接读取到这个换行符。</p><p><strong>解决方案：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方案一：在需要的地方多调用一次 nextLine() 清空缓冲区</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 清空缓冲区中的换行符</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入姓名：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 正常读取</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方案二：统一使用 nextLine() + 类型转换</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入姓名：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="q3-为什么字符-0-可以转换成数字-0" tabindex="-1"><a class="header-anchor" href="#q3-为什么字符-0-可以转换成数字-0"><span>Q3: 为什么字符 &#39;0&#39; 可以转换成数字 0？</span></a></h3><p><strong>答案：</strong></p><p>这是基于 <strong>ASCII 编码</strong> 的原理：</p><ul><li>字符 <code>&#39;0&#39;</code> 的 ASCII 值是 48</li><li>字符 <code>&#39;1&#39;</code> 的 ASCII 值是 49</li><li>...</li><li>字符 <code>&#39;9&#39;</code> 的 ASCII 值是 57</li></ul><p>因此：<code>ch - &#39;0&#39;</code> 就能将字符转换为对应的数字。</p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 53 - 48 = 5</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 应用：将数字字符串转为整数</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="q4-string-valueof-null-和-null-有什么区别" tabindex="-1"><a class="header-anchor" href="#q4-string-valueof-null-和-null-有什么区别"><span>Q4: String.valueOf(null) 和 &quot;&quot;+null 有什么区别？</span></a></h3><p><strong>答案：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 情况一：String.valueOf(null)</span></span>
<span class="line"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;null&quot;（字符串）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 情况二：&quot;&quot; + null</span></span>
<span class="line"><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;null&quot;（字符串）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 情况三：直接赋值 null</span></span>
<span class="line"><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// null（引用为空）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>区别：</strong></p><ul><li><code>String.valueOf(null)</code> 和 <code>&quot;&quot; + null</code> 都会得到字符串 <code>&quot;null&quot;</code></li><li>直接赋值 <code>null</code> 得到的是空引用，调用方法会抛出 <code>NullPointerException</code></li></ul><hr><h3 id="q5-如何判断一个字符串是否为数字" tabindex="-1"><a class="header-anchor" href="#q5-如何判断一个字符串是否为数字"><span>Q5: 如何判断一个字符串是否为数字？</span></a></h3><p><strong>答案：</strong></p><p><strong>方法一：使用 try-catch</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法二：使用正则表达式</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;-?\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 匹配整数（包括负数）</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isDecimal</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;-?\\\\d+(\\\\.\\\\d+)?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 匹配小数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="📚-本章总结" tabindex="-1"><a class="header-anchor" href="#📚-本章总结"><span>📚 本章总结</span></a></h2><ol><li><strong>IDEA快捷键</strong> 能大幅提升开发效率，需要熟练掌握常用快捷键</li><li><strong>输入输出</strong> 是程序与用户交互的基础，理解 Scanner 的使用</li><li><strong>字符串处理</strong> 是编程中最常见的操作，掌握 split()、charAt() 等方法</li><li><strong>类型转换</strong> 需要注意数据类型匹配和异常处理</li></ol><p><strong>重点掌握：</strong></p><ul><li>✅ IDEA 常用快捷键（格式化、生成代码、查看定义）</li><li>✅ Scanner 输入（next() vs nextLine()）</li><li>✅ 字符串处理（split()、charAt()、valueOf()）</li><li>✅ 类型转换（parseInt()、String.valueOf()）</li></ul><hr>`,144)),a("p",null,[n[1]||(n[1]=a("strong",null,"下一章：",-1)),n[2]||(n[2]=s()),c(t,{to:"/tutorials/java-backend/java/%E7%AC%AC01%E7%AB%A0-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/02-%E5%8F%98%E9%87%8F%E6%A6%82%E8%BF%B0.html"},{default:o(()=>[...n[0]||(n[0]=[s("变量与数据类型",-1)])]),_:1}),n[3]||(n[3]=s(" →",-1))])])}const v=p(r,[["render",d]]),b=JSON.parse(`{"path":"/tutorials/java-backend/java/di01zhang-jichurumen/01-kaifahuanjingyugongju.html","title":"Java 开发环境与工具","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"一、IDEA 快捷键","slug":"一、idea-快捷键","link":"#一、idea-快捷键","children":[{"level":3,"title":"1.1 代码编辑","slug":"_1-1-代码编辑","link":"#_1-1-代码编辑","children":[]},{"level":3,"title":"1.2 代码生成","slug":"_1-2-代码生成","link":"#_1-2-代码生成","children":[]},{"level":3,"title":"1.3 代码导航","slug":"_1-3-代码导航","link":"#_1-3-代码导航","children":[]},{"level":3,"title":"1.4 其他实用快捷键","slug":"_1-4-其他实用快捷键","link":"#_1-4-其他实用快捷键","children":[]},{"level":3,"title":"1.5 项目管理","slug":"_1-5-项目管理","link":"#_1-5-项目管理","children":[]}]},{"level":2,"title":"二、Java常用入门语句","slug":"二、java常用入门语句","link":"#二、java常用入门语句","children":[{"level":3,"title":"2.1 程序结构","slug":"_2-1-程序结构","link":"#_2-1-程序结构","children":[]},{"level":3,"title":"2.2 注释","slug":"_2-2-注释","link":"#_2-2-注释","children":[]},{"level":3,"title":"2.3 输入语句","slug":"_2-3-输入语句","link":"#_2-3-输入语句","children":[]},{"level":3,"title":"2.4 next() 与 nextLine() 区别","slug":"_2-4-next-与-nextline-区别","link":"#_2-4-next-与-nextline-区别","children":[]},{"level":3,"title":"2.5 输出语句","slug":"_2-5-输出语句","link":"#_2-5-输出语句","children":[]},{"level":3,"title":"2.6 条件语句","slug":"_2-6-条件语句","link":"#_2-6-条件语句","children":[]},{"level":3,"title":"2.7 循环语句","slug":"_2-7-循环语句","link":"#_2-7-循环语句","children":[]},{"level":3,"title":"2.8 数组声明与初始化","slug":"_2-8-数组声明与初始化","link":"#_2-8-数组声明与初始化","children":[]},{"level":3,"title":"2.9 方法定义","slug":"_2-9-方法定义","link":"#_2-9-方法定义","children":[]},{"level":3,"title":"2.10 常用快捷输入模板","slug":"_2-10-常用快捷输入模板","link":"#_2-10-常用快捷输入模板","children":[]}]},{"level":2,"title":"三、常用工具方法","slug":"三、常用工具方法","link":"#三、常用工具方法","children":[{"level":3,"title":"3.1 字符串转换","slug":"_3-1-字符串转换","link":"#_3-1-字符串转换","children":[]},{"level":3,"title":"3.2 字符串分割","slug":"_3-2-字符串分割","link":"#_3-2-字符串分割","children":[]},{"level":3,"title":"3.3 数学计算","slug":"_3-3-数学计算","link":"#_3-3-数学计算","children":[]},{"level":3,"title":"3.4 数组、字符串、集合的长度","slug":"_3-4-数组、字符串、集合的长度","link":"#_3-4-数组、字符串、集合的长度","children":[]}]},{"level":2,"title":"四、面试常见问题","slug":"四、面试常见问题","link":"#四、面试常见问题","children":[{"level":3,"title":"Q1: Java中的输入输出流是什么？","slug":"q1-java中的输入输出流是什么","link":"#q1-java中的输入输出流是什么","children":[]},{"level":3,"title":"Q2: next() 和 nextLine() 混合使用时要注意什么？","slug":"q2-next-和-nextline-混合使用时要注意什么","link":"#q2-next-和-nextline-混合使用时要注意什么","children":[]},{"level":3,"title":"Q3: 为什么字符 '0' 可以转换成数字 0？","slug":"q3-为什么字符-0-可以转换成数字-0","link":"#q3-为什么字符-0-可以转换成数字-0","children":[]},{"level":3,"title":"Q4: String.valueOf(null) 和 \\"\\"+null 有什么区别？","slug":"q4-string-valueof-null-和-null-有什么区别","link":"#q4-string-valueof-null-和-null-有什么区别","children":[]},{"level":3,"title":"Q5: 如何判断一个字符串是否为数字？","slug":"q5-如何判断一个字符串是否为数字","link":"#q5-如何判断一个字符串是否为数字","children":[]}]},{"level":2,"title":"📚 本章总结","slug":"📚-本章总结","link":"#📚-本章总结","children":[]}],"git":{"createdTime":1760859744000,"updatedTime":1760959407000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":1}]},"filePathRelative":"tutorials/java-backend/java/第01章-基础入门/01-开发环境与工具.md"}`);export{v as comp,b as data};
