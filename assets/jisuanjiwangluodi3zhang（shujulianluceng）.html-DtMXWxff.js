import{_ as e,c as t,d as i,e as a,f as n,b as l,r as o,o as p}from"./app-fRk33CE1.js";const r={},m={href:"https://www.bilibili.com/video/BV1c4411d7jb?p=27",target:"_blank",rel:"noopener noreferrer"};function h(c,s){const g=o("ExternalLinkIcon");return p(),t("div",null,[s[1]||(s[1]=i('<h1 id="计算机网络第3章-数据链路层" tabindex="-1"><a class="header-anchor" href="#计算机网络第3章-数据链路层"><span>计算机网络第3章（数据链路层）</span></a></h1><h2 id="_3-1、数据链路层概述" tabindex="-1"><a class="header-anchor" href="#_3-1、数据链路层概述"><span>3.1、数据链路层概述</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><p><strong>链路</strong>是从一个结点到相邻结点的一段物理线路，<strong>数据链路</strong>则是在链路的基础上增加了一些必要的硬件（如网络适配器）和软件（如协议的实现）</p><p><strong>网络中的主机、路由器等都必须实现数据链路层</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011102531462.png" alt="image-20201011102531462"></p><p><strong>局域网中的主机、交换机等都必须实现数据链路层</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014004326549.png" alt="image-20201014004326549"></p><p><strong>从层次上来看数据的流动</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011102618878.png" alt="image-20201011102618878"></p><p><strong>仅从数据链路层观察帧的流动</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011102653161.png" alt="image-20201011102653161"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011102733584.png" alt="image-20201011102733584"></p><blockquote><p>主机H1 到主机H2 所经过的网络可以是多种不同类型的</p><p><strong>注意：不同的链路层可能采用不同的数据链路层协议</strong></p></blockquote><p><strong>数据链路层使用的信道</strong></p><p>数据链路层属于计算机网路的低层。<strong>数据链路层使用的信道主要有以下两种类型：</strong></p><ul><li>点对点信道</li><li>广播信道</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014004459744.png" alt="image-20201014004459744"></p><blockquote><p><strong>局域网属于数据链路层</strong></p><p>局域网虽然是个网络。但我们并不把局域网放在网络层中讨论。这是因为在网络层要讨论的是多个网络互连的问题，是讨论分组怎么从一个网络，通过路由器，转发到另一个网络。</p><p>而在同一个局域网中，分组怎么从一台主机传送到另一台主机，但并不经过路由器转发。从整个互联网来看，<strong>局域网仍属于数据链路层</strong>的范围</p></blockquote><h3 id="三个重要问题" tabindex="-1"><a class="header-anchor" href="#三个重要问题"><span>三个重要问题</span></a></h3><p>数据链路层传送的协议数据单元是<strong>帧</strong></p><p><strong>封装成帧</strong></p><ul><li><strong>封装成帧</strong> (framing) 就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。</li><li>首部和尾部的一个重要作用就是进行<strong>帧定界</strong>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011103650253.png" alt="image-20201011103650253"></p><p><strong>差错控制</strong></p><p>在传输过程中可能会产生<strong>比特差错</strong>：1 可能会变成 0， 而 0 也可能变成 1。</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011103917512.png" alt="image-20201011103917512"></p><p><strong>可靠传输</strong></p><p>接收方主机收到有误码的帧后，是不会接受该帧的，会将它丢弃</p><p>如果数据链路层向其上层提供的是不可靠服务，那么丢弃就丢弃了，不会再有更多措施</p><p><strong>如果数据链路层向其上层提供的是可靠服务，那就还需要其他措施，来确保接收方主机还可以重新收到被丢弃的这个帧的正确副本</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011105314053.png" alt="image-20201011105314053"></p><blockquote><p>以上三个问题都是使用<strong>点对点信道的数据链路层</strong>来举例的</p></blockquote><p><strong>如果使用广播信道的数据链路层除了包含上面三个问题外，还有一些问题要解决</strong></p><p>如图所示，主机A，B，C，D，E通过一根总线进行互连，主机A要给主机C发送数据，代表帧的信号会通过总线传输到总线上的其他各主机，那么主机B，D，E如何知道所收到的帧不是发送给她们的，主机C如何知道发送的帧是发送给自己的</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011105824466.png" alt="image-20201011105824466"></p><p>可以用编址（地址）的来解决</p><p>将帧的目的地址添加在帧中一起传输</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011110017415.png" alt="image-20201011110017415"></p><p>还有数据碰撞问题</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011110129994.png" alt="image-20201011110129994"></p><blockquote><p>随着技术的发展，交换技术的成熟，</p><p>在 有线（局域网）领域 使用<strong>点对点链路</strong>和<strong>链路层交换机</strong>的<strong>交换式局域网</strong>取代了<s>共享式局域网</s></p><p>在无线局域网中仍然使用的是共享信道技术</p></blockquote><hr><h2 id="_3-2、封装成帧" tabindex="-1"><a class="header-anchor" href="#_3-2、封装成帧"><span>3.2、封装成帧</span></a></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧</p><ul><li><strong>帧头和帧尾中包含有重要的控制信息</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011110851301.png" alt="image-20201011110851301"></p><p>发送方的数据链路层将上层交付下来的协议数据单元封装成帧后，还要通过物理层，将构成帧的各比特，转换成电信号交给传输媒体，那么接收方的数据链路层如何从物理层交付的比特流中提取出一个个的帧？</p><p>答：需要帧头和帧尾来做<strong>帧定界</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011111334052.png" alt="image-20201011111334052"></p><p>但比不是每一种数据链路层协议的帧都包含有帧定界标志，例如下面例子</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011111729324.png" alt="image-20201011111729324"></p><blockquote><p>前导码</p><ul><li>前同步码：作用是使接收方的时钟同步</li><li>帧开始定界符：表明其后面紧跟着的就是MAC帧</li></ul></blockquote><p>另外以太网还规定了帧间间隔为96比特时间，因此，MAC帧不需要帧结束定界符</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011112450187.png" alt="image-20201011112450187"></p><h3 id="透明传输" tabindex="-1"><a class="header-anchor" href="#透明传输"><span>透明传输</span></a></h3><blockquote><p><strong>透明</strong></p><p>指某一个实际存在的事物看起来却好像不存在一样。</p></blockquote><p>透明传输是指<strong>数据链路层对上层交付的传输数据没有任何限制</strong>，好像数据链路层不存在一样</p><p>帧界定标志也就是个特定数据值，如果在上层交付的协议数据单元中， 恰好也包含这个特定数值，接收方就不能正确接收</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011113207944.png" alt="image-20201011113207944"></p><blockquote><p>所以数据链路层应该对上层交付的数据有限制，其内容不能包含帧定界符的值</p></blockquote><p><strong>解决透明传输问题</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011113804721.png" alt="image-20201011113804721"></p><ul><li><strong>解决方法</strong>：面向字节的物理链路使用<strong>字节填充</strong> (byte stuffing) 或<strong>字符填充</strong> (character stuffing)，面向比特的物理链路使用比特填充的方法实现透明传输</li><li>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面<strong>插入一个转义字符“ESC”</strong>(其十六进制编码是1B)。</li><li>接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。</li><li>如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。</li></ul><p><strong>帧的数据部分长度</strong></p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011115008209.png" alt="image-20201011115008209" style="zoom:40%;"><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011115049672.png" alt="image-20201011115049672" style="zoom:40%;"><hr><h2 id="_3-3、差错检测" tabindex="-1"><a class="header-anchor" href="#_3-3、差错检测"><span>3.3、差错检测</span></a></h2><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h3><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011133757804.png" alt="image-20201011133757804" style="zoom:40%;"><h3 id="奇偶校验" tabindex="-1"><a class="header-anchor" href="#奇偶校验"><span>奇偶校验</span></a></h3><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011234428217.png" alt="image-20201011234428217" style="zoom:40%;"><h3 id="循环冗余校验crc-cyclic-redundancy-check" tabindex="-1"><a class="header-anchor" href="#循环冗余校验crc-cyclic-redundancy-check"><span>循环冗余校验CRC(Cyclic Redundancy Check)</span></a></h3><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011234605045.png" alt="image-20201011234605045" style="zoom:40%;"><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011234701845.png" alt="image-20201011234701845" style="zoom:40%;"><p><strong>例题</strong></p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011235128869.png" alt="image-20201011235128869" style="zoom:40%;"><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011235325022.png" alt="image-20201011235325022" style="zoom:40%;"><p><strong>总结</strong></p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201011235726437.png" alt="image-20201011235726437" style="zoom:40%;"><blockquote><p>循环冗余校验 CRC 是一种检错方法，而帧校验序列 FCS 是添加在数据后面的冗余码</p></blockquote><hr><h2 id="_3-4、可靠传输" tabindex="-1"><a class="header-anchor" href="#_3-4、可靠传输"><span>3.4、可靠传输</span></a></h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><p><strong>下面是比特差错</strong></p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012153605893.png" alt="image-20201012153605893" style="zoom:40%;"><p><strong>其他传输差错</strong></p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012153811724.png" alt="image-20201012153811724" style="zoom:40%;"><ul><li>分组丢失</li></ul><p>路由器输入队列快满了，主动丢弃收到的分组</p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012154910921.png" alt="image-20201012154910921" style="zoom:50%;"><ul><li>分组失序</li></ul><p>数据并未按照发送顺序依次到达接收端</p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012155300937.png" alt="image-20201012155300937" style="zoom:50%;"><ul><li>分组重复</li></ul><p>由于某些原因，有些分组在网络中滞留了，没有及时到达接收端，这可能会造成发送端对该分组的重发，重发的分组到达接收端，但一段时间后，滞留在网络的分组也到达了接收端，这就造成<strong>分组重复</strong>的传输差错</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012160026362.png" alt="image-20201012160026362"></p><h3 id="三种可靠协议" tabindex="-1"><a class="header-anchor" href="#三种可靠协议"><span>三种可靠协议</span></a></h3><ul><li>停止-等待协议SW</li><li>回退N帧协议GBN</li><li>选择重传协议SR</li></ul><blockquote><p>这三种可靠传输实现机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中</p></blockquote><h3 id="停止-等待协议" tabindex="-1"><a class="header-anchor" href="#停止-等待协议"><span>停止-等待协议</span></a></h3><h4 id="停止-等待协议可能遇到的四个问题" tabindex="-1"><a class="header-anchor" href="#停止-等待协议可能遇到的四个问题"><span>停止-等待协议可能遇到的四个问题</span></a></h4><p><strong>确认与否认</strong></p><p><strong>超时重传</strong></p><blockquote><p>既然数据分组需要编号，确认分组是否需要编号？</p><p>要。如下图所示</p></blockquote><p><strong>确认迟到</strong></p><blockquote><p>注意，图中最下面那个数据分组与之前序号为0的那个数据分组不是同一个数据分组</p></blockquote><p><strong>注意事项</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012164008780.png" alt="image-20201012164008780"></p><h3 id="停止-等待协议的信道利用率" tabindex="-1"><a class="header-anchor" href="#停止-等待协议的信道利用率"><span>停止-等待协议的信道利用率</span></a></h3><p>假设收发双方之间是一条直通的信道</p><ul><li><strong>TD</strong>：是发送方发送数据分组所耗费的发送时延</li><li><strong>RTT</strong>：是收发双方之间的往返时间</li><li><strong>TA</strong>：是接收方发送确认分组所耗费的发送时延</li></ul><p>TA一般都远小于TD，可以忽略，当RTT远大于TD时，信道利用率会非常低</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012164924635.png" alt="image-20201012164924635"></p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012181005719.png" alt="image-20201012181005719" style="zoom:50%;"><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012181047665.png" alt="image-20201012181047665"></p><blockquote><p>像停止-等待协议这样通过确认和重传机制实现的可靠传输协议，常称为自动请求重传协议ARQ(<strong>A</strong>utomatic <strong>R</strong>epeat re<strong>Q</strong>uest)，意思是重传的请求是自动进行，因为不需要接收方显式地请求，发送方重传某个发送的分组</p></blockquote><h3 id="回退n帧协议gbn" tabindex="-1"><a class="header-anchor" href="#回退n帧协议gbn"><span>回退N帧协议GBN</span></a></h3><h3 id="为什么用回退n帧协议" tabindex="-1"><a class="header-anchor" href="#为什么用回退n帧协议"><span>为什么用回退N帧协议</span></a></h3><p>在相同的时间内，使用停止-等待协议的发送方只能发送一个数据分组，而采用流水线传输的发送方，可以发送多个数据分组</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012190027828.png" alt="image-20201012190027828"></p><p>回退N帧协议在流水线传输的基础上，利用发送窗口来限制发送方可连续发送数据分组的个数</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012190632086.png" alt="image-20201012190632086"></p><h3 id="无差错情况流程" tabindex="-1"><a class="header-anchor" href="#无差错情况流程"><span>无差错情况流程</span></a></h3><p>发送方将序号落在发送窗口内的0~4号数据分组，依次连续发送出去</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012191936466.png" alt="image-20201012191936466"></p><p>他们经过互联网传输正确到达接收方，就是没有乱序和误码，接收方按序接收它们，每接收一个，接收窗口就向前滑动一个位置，并给发送方发送针对所接收分组的确认分组，在通过互联网的传输正确到达了发送方</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012192932035.png" alt="image-20201012192932035"></p><p>发送方每接收一个、发送窗口就向前滑动一个位置，这样就有新的序号落入发送窗口，发送方可以将收到确认的数据分组从缓存中删除了，而接收方可以择机将已接收的数据分组交付上层处理</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012193212419.png" alt="image-20201012193212419"></p><h3 id="累计确认" tabindex="-1"><a class="header-anchor" href="#累计确认"><span><strong>累计确认</strong></span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012194304696.png" alt="image-20201012194304696"></p><blockquote><p>累计确认</p><p>优点:</p><ul><li>即使确认分组丢失，发送方也可能不必重传</li><li>减小接收方的开销</li><li>减小对网络资源的占用</li></ul><p>缺点：</p><ul><li>不能向发送方及时反映出接收方已经正确接收的数据分组信息</li></ul></blockquote><h3 id="有差错情况" tabindex="-1"><a class="header-anchor" href="#有差错情况"><span><strong>有差错情况</strong></span></a></h3><p>例如</p><p>在传输数据分组时，5号数据分组出现误码，接收方通过数据分组中的检错码发现了错误</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012195440780.png" alt="image-20201012195440780"></p><p>于是丢弃该分组，而后续到达的这剩下四个分组与接收窗口的序号不匹配</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012195629368.png" alt="image-20201012195629368"></p><p>接收同样也不能接收它们，讲它们丢弃，并对之前按序接收的最后一个数据分组进行确认，发送ACK4，<strong>每丢弃一个数据分组，就发送一个ACK4</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012195836902.png" alt="image-20201012195836902"></p><p>当收到重复的ACK4时，就知道之前所发送的数据分组出现了差错，于是可以不等超时计时器超时就立刻开始重传，具体收到几个重复确认就立刻重传，根据具体实现决定</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012200120166.png" alt="image-20201012200120166"></p><p>如果收到这4个重复的确认并不会触发发送立刻重传，一段时间后。超时计时器超时，也会将发送窗口内以发送过的这些数据分组全部重传</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012200454557.png" alt="image-20201012200454557"></p><p>若WT超过取值范围，例如WT=8，会出现什么情况？</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012201109774.png" alt="image-20201012201109774"></p><p>习题</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012202419107.png" alt="image-20201012202419107"></p><p><strong>总结</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012202222138.png" alt="image-20201012202222138"></p><ul><li>回退N帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议</li><li>在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议</li><li>由于回退N帧协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高</li></ul><h3 id="选择重传协议sr" tabindex="-1"><a class="header-anchor" href="#选择重传协议sr"><span>选择重传协议SR</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012203638722.png" alt="image-20201012203638722"></p>',157)),a("p",null,[a("a",m,[s[0]||(s[0]=n("具体流程请看视频",-1)),l(g)])]),s[2]||(s[2]=i('<p><strong>习题</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012205250996.png" alt="image-20201012205250996"></p><p><strong>总结</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012204742870.png" alt="image-20201012204742870"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012205133924.png" alt="image-20201012205133924"></p><hr><h2 id="_3-5、点对点协议ppp" tabindex="-1"><a class="header-anchor" href="#_3-5、点对点协议ppp"><span>3.5、点对点协议PPP</span></a></h2><ul><li>点对点协议PPP（Point-to-Point Protocol）是目前使用最广泛的点对点数据链路层协议</li><li>PPP协议是因特网工程任务组IEIF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议已成为因特网的正式标准[RFC1661，RFC1662]</li><li>数据链路层使用的一种协议，它的特点是：简单；只检测差错，而不是纠正差错；不使用序号，也不进行流量控制；可同时支持多种网络层协议</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012210844629.png" alt="image-20201012210844629"></p><ul><li>PPPoE 是为宽带上网的主机使用的链路层协议</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012211423528.png" alt="image-20201012211423528"></p><h3 id="帧格式" tabindex="-1"><a class="header-anchor" href="#帧格式"><span>帧格式</span></a></h3><p>必须规定特殊的字符作为帧定界符</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012211826281.png" alt="image-20201012211826281"></p><h3 id="透明传输-1" tabindex="-1"><a class="header-anchor" href="#透明传输-1"><span>透明传输</span></a></h3><p>必须保证数据传输的透明性</p><p>实现透明传输的方法</p><ul><li>面向字节的异步链路：字节填充法（插入“转义字符”）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012212148803.png" alt="image-20201012212148803"></p><ul><li>面向比特的同步链路：比特填充法（插入“比特0”）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012212255550.png" alt="image-20201012212255550"></p><h3 id="差错检测" tabindex="-1"><a class="header-anchor" href="#差错检测"><span>差错检测</span></a></h3><p>能够对接收端收到的帧进行检测，并立即丢弃有差错的帧。</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012212558654.png" alt="image-20201012212558654"></p><h3 id="工作状态" tabindex="-1"><a class="header-anchor" href="#工作状态"><span>工作状态</span></a></h3><ul><li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</li><li>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。</li><li>这些分组及其响应选择一些 PPP 参数，并进行网络层配置，NCP 给新接入的 PC 机</li><li>分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</li><li>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201012213021860.png" alt="image-20201012213021860"></p><blockquote><p>可见，PPP 协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</p></blockquote><hr><h2 id="_3-6、媒体接入控制-介质访问控制-——广播信道" tabindex="-1"><a class="header-anchor" href="#_3-6、媒体接入控制-介质访问控制-——广播信道"><span>3.6、媒体接入控制（介质访问控制）——广播信道</span></a></h2><p><strong>媒体接入控制（介质访问控制）使用一对多的广播通信方式</strong></p><blockquote><p><strong>Medium Access Control</strong>翻译成媒体接入控制，有些翻译成介质访问控制</p></blockquote><p><strong>局域网的数据链路层</strong></p><ul><li>局域网最主要的<strong>特点</strong>是： <ul><li>网络为一个单位所拥有；</li><li>地理范围和站点数目均有限。</li></ul></li><li>局域网具有如下<strong>主要优点</strong>： <ul><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013201521915.png" alt="image-20201013201521915"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013201533445.png" alt="image-20201013201533445"></p><p><strong>数据链路层的两个子层</strong></p><p>为了使数据链路层能更好地适应多种局域网标准，IEEE 802 委员会就将局域网的数据链路层拆成<strong>两个子层</strong>：</p><ol><li><strong>逻辑链路控制</strong> LLC (Logical Link Control)子层；</li><li><strong>媒体接入控制</strong> MAC (Medium Access Control)子层。</li></ol><p>与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关。 <strong>不管采用何种协议的局域网，对 LLC 子层来说都是透明的。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013201133903.png" alt="image-20201013201133903"></p><h3 id="基本概念-1" tabindex="-1"><a class="header-anchor" href="#基本概念-1"><span>基本概念</span></a></h3><p>为什么要媒体接入控制（介质访问控制）？</p><p><strong>共享信道带来的问题</strong></p><p>若多个设备在共享信道上同时发送数据，则会造成彼此干扰，导致发送失败。</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013152007335.png" alt="image-20201013152007335"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013152453425.png" alt="image-20201013152453425"></p><blockquote><p>随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网仍然使用的是共享媒体技术</p></blockquote><h3 id="静态划分信道" tabindex="-1"><a class="header-anchor" href="#静态划分信道"><span>静态划分信道</span></a></h3><p><strong>信道复用</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013153642544.png" alt="image-20201013153642544"></p><p><strong>频分复用FDM (Frequency Division Multiplexing)</strong></p><ul><li><p>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p></li><li><p><strong>频分复用</strong>的所有用户在同样的时间<strong>占用不同的带宽资源</strong>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013153947668.png" alt="image-20201013153947668"></p><p><strong>时分复用TDM (Time Division Multiplexing)</strong></p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013154142540.png" alt="image-20201013154142540"></p><p><strong>波分复用 WDM(Wavelength Division Multiplexing)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013202218132.png" alt="image-20201013202218132"></p><blockquote><p>波分复用就是光的频分复用，使用一根光纤来同时传输多个光载波信号</p><p>光信号传输一段距离后悔衰减，所以要用 掺铒光纤放大器 放大光信号</p></blockquote><p><strong>码分复用 CDM (Code Division Multiplexing)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013203126625.png" alt="image-20201013203126625"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013203324709.png" alt="image-20201013203324709"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013203459640.png" alt="image-20201013203459640"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013203819578.png" alt="image-20201013203819578"></p><h3 id="动态接入控制" tabindex="-1"><a class="header-anchor" href="#动态接入控制"><span>动态接入控制</span></a></h3><p>受控接入</p><p><strong>受控接入在局域网中使用得较少，本书不再讨论</strong></p><p><strong>随机接入</strong></p><p><strong>重点</strong></p><h3 id="随机接入-csma-cd协议" tabindex="-1"><a class="header-anchor" href="#随机接入-csma-cd协议"><span>随机接入（CSMA/CD协议）</span></a></h3><p><strong>总线局域网使用协议：CSMA/CD</strong></p><h3 id="基本概念-2" tabindex="-1"><a class="header-anchor" href="#基本概念-2"><span>基本概念</span></a></h3><p><strong>最初</strong>的<strong>以太网</strong>是将许多计算机都连接到一根总线上。易于实现广播通信。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件。</p><blockquote><p><strong>以太网（Ethernet）<strong>是一种计算机</strong>局域网技术</strong>。IEEE组织的IEEE 802.3标准制定了**以太网（Ethernet）**的技术标准</p><p>以太网采用无连接的工作方式，对发送的数据帧不进行编号，也不要求对方发回确认。目的站收到有差错帧就把它丢弃，其他什么也不做</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013211620687.png" alt="image-20201013211620687"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013213102777.png" alt="image-20201013213102777"></p><h3 id="多址接入ma" tabindex="-1"><a class="header-anchor" href="#多址接入ma"><span>多址接入MA</span></a></h3><p>表示许多主机以多点接入的方式连接在一根总线上。</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013215400688.png" alt="image-20201013215400688"></p><h3 id="载波监听cs" tabindex="-1"><a class="header-anchor" href="#载波监听cs"><span>载波监听CS</span></a></h3><p>是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013215530979.png" alt="image-20201013215530979"></p><p>总线上并没有什么“载波”。因此， <strong>“载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。</strong></p><h3 id="碰撞检测cd" tabindex="-1"><a class="header-anchor" href="#碰撞检测cd"><span>碰撞检测CD</span></a></h3><ul><li><strong>“碰撞检测”<strong>就是计算机</strong>边发送数据边检测</strong>信道上的信号电压大小。</li><li>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。</li><li>当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。</li><li><strong>所谓“碰撞”就是发生了冲突。因此“碰撞检测”也称为“冲突检测”。</strong></li><li>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。</li><li><strong>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013221240514.png" alt="image-20201013221240514"></p><blockquote><p>为什么要进行碰撞检测？ 因为信号传播时延对载波监听产生了影响</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013221834942.png" alt="image-20201013221834942"></p><p>A 需要单程传播时延的 2 倍的时间，才能检测到与 B 的发送产生了冲突</p></blockquote><h3 id="csma-cd-协议工作流程" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作流程"><span>CSMA/CD 协议工作流程</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013221705893.png" alt="image-20201013221705893"></p><h3 id="csma-cd-协议工作——争用期-碰撞窗口" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——争用期-碰撞窗口"><span>CSMA/CD 协议工作——争用期（碰撞窗口）</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013223235305.png" alt="image-20201013223235305"></p><h3 id="csma-cd-协议工作——最小帧长" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——最小帧长"><span>CSMA/CD 协议工作——最小帧长</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013224051932.png" alt="image-20201013224051932"></p><h3 id="csma-cd-协议工作——最大帧长" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——最大帧长"><span>CSMA/CD 协议工作——最大帧长</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013225400777.png" alt="image-20201013225400777"></p><h3 id="csma-cd-协议工作——截断二进制指数退避算法" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——截断二进制指数退避算法"><span>CSMA/CD 协议工作——截断二进制指数退避算法</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013230717856.png" alt="image-20201013230717856"></p><h3 id="csma-cd-协议工作——信道利用率" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——信道利用率"><span>CSMA/CD 协议工作——信道利用率</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013231430295.png" alt="image-20201013231430295"></p><h3 id="csma-cd-协议工作——帧接收流程" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——帧接收流程"><span>CSMA/CD 协议工作——帧接收流程</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201013231703302.png" alt="image-20201013231703302"></p><h3 id="csma-cd-协议的重要特性" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议的重要特性"><span>CSMA/CD 协议的重要特性</span></a></h3><ul><li>使用 CSMA/CD 协议的以太网不能进行全双工通信而<strong>只能进行双向交替通信（半双工通信）。</strong></li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。</li><li>这种<strong>发送的不确定性</strong>使整个以太网的平均通信量远小于以太网的最高数据率。</li></ul><blockquote><p>CSMA/CD协议曾经用于各种总线结构以太网和双绞线以太网的早起版本中。</p><p><strong>现在的以太网基于交换机和全双工连接，不会有碰撞，因此没有必要使用CSMA/CS协议</strong></p></blockquote><h3 id="随机接入-csma-ca协议" tabindex="-1"><a class="header-anchor" href="#随机接入-csma-ca协议"><span>随机接入（CSMA/CA协议）</span></a></h3><p><strong>无线局域网使用的协议：CSMA/CA</strong></p><h3 id="为什么无线局域网要使用csma-ca协议" tabindex="-1"><a class="header-anchor" href="#为什么无线局域网要使用csma-ca协议"><span>为什么无线局域网要使用CSMA/CA协议</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014192811760.png" alt="image-20201014192811760"></p><h3 id="帧间间隔ifs-interframe-space" tabindex="-1"><a class="header-anchor" href="#帧间间隔ifs-interframe-space"><span>帧间间隔IFS（InterFrame Space）</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014200149717.png" alt="image-20201014200149717"></p><h3 id="csma-ca协议的工作原理" tabindex="-1"><a class="header-anchor" href="#csma-ca协议的工作原理"><span>CSMA/CA协议的工作原理</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014200833233.png" alt="image-20201014200833233"></p><blockquote><p><strong>源站为什么在检测到信道空闲后还要再等待一段时间DIFS？</strong></p><ul><li>考虑到可能有其他的站有高优先级的帧要发送。若有，就要让高优先级帧先发送</li></ul><p><strong>目的站为什么正确接收数据帧后还要等待一段时间SIFS才能发送ACK帧？</strong></p><ul><li>SIFS是最短的帧间间隔，用来分隔开属于一次对话的各帧，在这段时间内，一个站点应当能够从发送方式切换到接收方式</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014201511741.png" alt="image-20201014201511741"></p><blockquote><p><strong>信道由忙转为空闲且经过DIFS时间后，还要退避一段随机时间才能使用信道？</strong></p><p>防止多个站点同时发送数据而产生碰撞</p></blockquote><p><strong>使用退避算法的时机</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014201927680.png" alt="image-20201014201927680"></p><h3 id="csma-ca协议的退避算法" tabindex="-1"><a class="header-anchor" href="#csma-ca协议的退避算法"><span>CSMA/CA协议的退避算法</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014202213766.png" alt="image-20201014202213766"></p><p><strong>退避算法的示例</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014202819851.png" alt="image-20201014202819851"></p><h3 id="csma-ca协议的信道预约和虚拟载波监听" tabindex="-1"><a class="header-anchor" href="#csma-ca协议的信道预约和虚拟载波监听"><span>CSMA/CA协议的信道预约和虚拟载波监听</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014203119710.png" alt="image-20201014203119710"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014203506878.png" alt="image-20201014203506878"></p><p><strong>虚拟载波监听机制能减少隐蔽站带来的碰撞问题的示例</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014203859033.png" alt="image-20201014203859033"></p><hr><h2 id="_3-7、mac地址、ip地址以及arp协议" tabindex="-1"><a class="header-anchor" href="#_3-7、mac地址、ip地址以及arp协议"><span>3.7、MAC地址、IP地址以及ARP协议</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014222831663.png" alt="image-20201014222831663"></p><h3 id="mac地址" tabindex="-1"><a class="header-anchor" href="#mac地址"><span>MAC地址</span></a></h3><blockquote><ul><li>使用点对点信道的数据链路层不需要使用地址</li><li>使用广播信道的数据链路层必须使用地址来区分各主机</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014223659993.png" alt="image-20201014223659993"></p><h3 id="广播信道的数据链路层必须使用地址-mac" tabindex="-1"><a class="header-anchor" href="#广播信道的数据链路层必须使用地址-mac"><span>广播信道的数据链路层必须使用地址（MAC）</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014224732019.png" alt="image-20201014224732019"></p><blockquote><p><strong>MAC地址又称为硬件地址或物理地址</strong>。请注意：不要被 “物理” 二字误导认为物理地址属于物理层范畴，物理地址属于数据链路层范畴</p></blockquote><h3 id="ieee-802局域网的mac地址格式" tabindex="-1"><a class="header-anchor" href="#ieee-802局域网的mac地址格式"><span>IEEE 802局域网的MAC地址格式</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014225358570.png" alt="image-20201014225358570"></p><blockquote><p><strong>组织唯一标识符OUI</strong></p><ul><li>生产网络设备的厂商，需要向IEEE的注册管理机构申请一个或多个OUI</li></ul><p><strong>网络接口标识符</strong></p><ul><li>由获得OUI的厂商自行随意分配</li></ul><p><strong>EUI-48</strong></p><ul><li>48是这个MAC地址的位数</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014230248959.png" alt="image-20201014230248959"></p><blockquote><p>对于使用EUI-48空间的应用程序，IEEE的目标寿命为100年（直到2080年），但是鼓励采用EUI-64作为替代</p></blockquote><p><strong>关于无效的 MAC 帧</strong></p><ul><li>数据字段的长度与长度字段的值不一致；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。</li><li>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</li></ul><blockquote><p><strong>对于检查出的无效</strong> <strong>MAC</strong> <strong>帧就简单地丢弃。以太网不负责重传丢弃的帧。</strong></p></blockquote><h3 id="ieee-802局域网的mac地址发送顺序" tabindex="-1"><a class="header-anchor" href="#ieee-802局域网的mac地址发送顺序"><span>IEEE 802局域网的MAC地址发送顺序</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014230625182.png" alt="image-20201014230625182"></p><h3 id="单播mac地址举例" tabindex="-1"><a class="header-anchor" href="#单播mac地址举例"><span>单播MAC地址举例</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014230822305.png" alt="image-20201014230822305"></p><blockquote><p>主机B给主机C发送<strong>单播帧</strong>，主机B首先要构建该<strong>单播帧</strong>，<strong>在帧首部中的目的地址字段填入主机C的MAC地址</strong>，源地址字段填入自己的MAC地址，再加上帧首部的其他字段、数据载荷以及帧尾部，就构成了该<strong>单播帧</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014231244655.png" alt="image-20201014231244655"></p><blockquote><p>主机B将该<strong>单播帧</strong>发送出去，主机A和C都会收到该<strong>单播帧</strong></p><p>主机A的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址不匹配，丢弃该帧</p><p>主机C的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址匹配，接受该帧</p><p>并将该帧交给其上层处理</p></blockquote><h3 id="广播mac地址举例" tabindex="-1"><a class="header-anchor" href="#广播mac地址举例"><span>广播MAC地址举例</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014231754669.png" alt="image-20201014231754669"></p><blockquote><p>假设主机B要发送一个<strong>广播帧</strong>，主机B首先要构建该<strong>广播帧</strong>，<strong>在帧首部中的目的地址字段填入广播地址</strong>，也就是十六进制的全F，源地址字段填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>广播帧</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014232132424.png" alt="image-20201014232132424"></p><blockquote><p>主机B讲该<strong>广播帧</strong>发送出去，主机A和C都会收到该<strong>广播帧</strong>，<strong>发现该帧首部中的目的地址字段的内容是广播地址</strong>，就知道该帧是<strong>广播帧</strong>，主机A和主机C都接受该帧，并将该帧交给上层处理</p></blockquote><h3 id="多播mac地址举例" tabindex="-1"><a class="header-anchor" href="#多播mac地址举例"><span>多播MAC地址举例</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201014232714791.png" alt="image-20201014232714791"></p><blockquote><p>假设主机A要发送<strong>多播帧</strong>给该<strong>多播地址</strong>。将该<strong>多播地址</strong>的左起第一个字节写成8个比特，第一个字节的最低比特位是1，这就表明该地址是<strong>多播地址</strong>。</p><p>快速判断地址是不是<strong>多播地址</strong>，就是上图所示箭头所指的第十六进制数不能整除2（1,3,5,7,9,B,D,F），则该地址是<strong>多播地址</strong></p><p>假设主机B，C和D支持多播，各用户给自己的主机配置多播组列表<strong>如下所示</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015001243584.png" alt="image-20201015001243584"></p><blockquote><p>主机B属于两个多播组，主机C也属于两个多播组，而主机D不属于任何多播组</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015001535528.png" alt="image-20201015001535528"></p><blockquote><p>主机A首先要构建该<strong>多播帧</strong>，<strong>在帧首部中的目的地址字段填入该多播地址</strong>，源地址点填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>多播帧</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015002054876.png" alt="image-20201015002054876"></p><blockquote><p>主机A将该<strong>多播帧</strong>发送出去，主机B、C、D都会收到该<strong>多播帧</strong></p><p><strong>主机B和C发现该多播帧的目的MAC地址在自己的多播组列表中</strong>，主机B和C都会接受该帧</p><p>主机D发现该<strong>多播帧</strong>的目的MAC地址不在自己得多播组列表中，则丢弃该<strong>多播帧</strong></p></blockquote><blockquote><p>给主机配置多播组列表进行私有应用时，不得使用公有的标准多播地址</p></blockquote><h3 id="ip地址" tabindex="-1"><a class="header-anchor" href="#ip地址"><span>IP地址</span></a></h3><p>IP地址属于网络层的范畴，不属于数据链路层的范畴</p><p>下面内容讲的是IP地址的使用，详细的IP地址内容在网络层中介绍</p><h3 id="基本概念-3" tabindex="-1"><a class="header-anchor" href="#基本概念-3"><span>基本概念</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015104441580.png" alt="image-20201015104441580"></p><h3 id="从网络体系结构看ip地址与mac地址" tabindex="-1"><a class="header-anchor" href="#从网络体系结构看ip地址与mac地址"><span>从网络体系结构看IP地址与MAC地址</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015104913755.png" alt="image-20201015104913755"></p><h3 id="数据包转发过程中ip地址与mac地址的变化情况" tabindex="-1"><a class="header-anchor" href="#数据包转发过程中ip地址与mac地址的变化情况"><span>数据包转发过程中IP地址与MAC地址的变化情况</span></a></h3><p>图上各主机和路由器各接口的IP地址和MAC地址用简单的标识符来表示</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015105455043.png" alt="image-20201015105455043"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20210103212224961.png" alt="image-20210103212224961"></p><blockquote><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP协议</p></blockquote><h3 id="arp协议" tabindex="-1"><a class="header-anchor" href="#arp协议"><span>ARP协议</span></a></h3><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP（地址解析协议）</p><h3 id="流程" tabindex="-1"><a class="header-anchor" href="#流程"><span>流程</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015113826197.png" alt="image-20201015113826197"></p><p>ARP高速缓存表</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015114052206.png" alt="image-20201015114052206"></p><blockquote><p>当主机B要给主机C发送数据包时，会首先在自己的ARP高速缓存表中查找主机C的IP地址所对应的MAC地址，但未找到，因此，主机B需要发送ARP请求报文，来获取主机C的MAC地址</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015114444263.png" alt="image-20201015114444263"></p><blockquote><p>ARP请求报文有具体的格式，上图的只是简单描述</p><p>ARP请求报文被封装在MAC帧中发送，目的地址为广播地址</p><p>主机B发送封装有ARP请求报文的广播帧，总线上的其他主机都能收到该广播帧</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015114811501.png" alt="image-20201015114811501"></p><blockquote><p>收到ARP请求报文的主机A和主机C会把ARP请求报文交给上层的ARP进程</p><p>主机A发现所询问的IP地址不是自己的IP地址，因此不用理会</p><p>主机C的发现所询问的IP地址是自己的IP地址，需要进行相应</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015115212170.png" alt="image-20201015115212170"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015115236673.png" alt="image-20201015115236673"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015115252972.png" alt="image-20201015115252972"></p><p>动态与静态的区别</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015115831543.png" alt="image-20201015115831543"></p><p><strong>ARP协议只能在一段链路或一个网络上使用，而不能跨网络使用</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015120108028.png" alt="image-20201015120108028"></p><blockquote><p>ARP协议的使用是逐段链路进行的</p></blockquote><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015120707150.png" alt="image-20201015120707150"></p><blockquote><p>ARP表中的IP地址与MAC地址的对应关系记录，是<strong>会定期自动删除的</strong>，<strong>因为IP地址与MAC地址的对应关系不是永久性的</strong></p></blockquote><hr><h2 id="_3-8、集线器与交换机的区别" tabindex="-1"><a class="header-anchor" href="#_3-8、集线器与交换机的区别"><span>3.8、集线器与交换机的区别</span></a></h2><h3 id="集线器-在物理层扩展以太网" tabindex="-1"><a class="header-anchor" href="#集线器-在物理层扩展以太网"><span>集线器-在物理层扩展以太网</span></a></h3><h4 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h4><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015144628691.png" alt="image-20201015144628691"></p><blockquote><ul><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。</li><li>采用双绞线的以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做<strong>集线器</strong> (hub)。</li><li><strong>集线器</strong>是也可以看做多口中继器，每个端口都可以成为一个中继器，中继器是对减弱的信号进行放大和发送的设备</li><li><strong>集线器</strong>的以太网在逻辑上仍是个总线网，需要使用CSMA/CD协议来协调各主机争用总线，只能工作在半双工模式，收发帧不能同时进行</li></ul></blockquote><h3 id="集线器hub在物理层扩展以太网" tabindex="-1"><a class="header-anchor" href="#集线器hub在物理层扩展以太网"><span>集线器HUB在物理层扩展以太网</span></a></h3><p><strong>使用集线器扩展</strong>：将多个以太网段连成更大的、多级星形结构的以太网</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015145732275.png" alt="image-20201015145732275"></p><blockquote><ul><li><strong>优点</strong><ol><li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</li><li>扩大了以太网覆盖的地理范围。</li></ol></li><li><strong>缺点</strong><ol><li>碰撞域增大了，但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</li></ol></li></ul></blockquote><p><strong>碰撞域</strong></p><ul><li><strong>碰撞域（collision domain）<strong>又称为</strong>冲突域</strong>，是指网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。</li><li>碰撞域越大，发生碰撞的概率越高。</li></ul><h3 id="以太网交换机-在数据链路层扩展以太网" tabindex="-1"><a class="header-anchor" href="#以太网交换机-在数据链路层扩展以太网"><span>以太网交换机-在数据链路层扩展以太网</span></a></h3><h4 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h4><ul><li>扩展以太网更常用的方法是在数据链路层进行。</li><li>早期使用<strong>网桥</strong>，现在使用<strong>以太网交换机</strong>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015150620067.png" alt="image-20201015150620067"></p><blockquote><p><strong>网桥</strong></p><ul><li>网桥工作在数据链路层。</li><li>它根据 MAC 帧的目的地址对收到的帧进行转发和过滤。</li><li>当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC 地址，然后再确定将该帧转发到哪一个接口，或把它丢弃。</li></ul><p><strong>交换机</strong></p><ul><li>1990 年问世的交换式集线器 (switching hub) 可明显地提高以太网的性能。</li><li>交换式集线器常称为<strong>以太网交换机</strong> (switch) 或<strong>第二层交换机</strong> (L2 switch)，强调这种交换机工作在数据链路层。</li><li>以太网交换机实质上就是一个<strong>多接口的网桥</strong></li></ul></blockquote><h3 id="集线器hub与交换机switch区别" tabindex="-1"><a class="header-anchor" href="#集线器hub与交换机switch区别"><span><strong>集线器HUB与交换机SWITCH区别</strong></span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015152232158.png" alt="image-20201015152232158"></p><blockquote><p>使用<strong>集线器</strong>互连而成的共享总线式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧会通过共享总线传输到<strong>总线上的其他各个主机</strong></p><p>使用交换机互连而成的交换式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧进入交换机后，交换机会将该单播帧转发给目的主机，<strong>而不是网络中的其他各个主机</strong></p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015152858146.png" alt="image-20201015152858146"></p><blockquote><p><strong>以太网交换机的交换方式</strong></p><ul><li>存储转发方式 <ul><li>把整个数据帧<strong>先缓存</strong>后再进行处理。</li></ul></li><li>直通 (cut-through) 方式 <ul><li>接收数据帧的同时就<strong>立即按数据帧的目的 MAC 地址决定该帧的转发接口</strong>，因而提高了帧的转发速度。</li><li><strong>缺点</strong>是它不检查差错就直接将帧转发出去，因此有可能也将一些无效帧转发给其他的站。</li></ul></li></ul><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>对比集线器和交换机</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015153907268.png" alt="image-20201015153907268"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015154523036.png" alt="image-20201015154523036"></p><blockquote><p>多台主机同时给另一台主机发送单播帧</p><p>集线器以太网：会产生碰撞，遭遇碰撞的帧会传播到总线上的各主机</p><p>交换机以太网：会将它们缓存起来，然后逐个转发给目的主机，不会产生碰撞</p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>集线器扩展以太网和交换机扩展以太网区别</strong></p><p><strong>单播</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015155408692.png" alt="image-20201015155408692"></p><p><strong>广播</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015155440402.png" alt="image-20201015155440402"></p><p><strong>多个单播</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015155526386.png" alt="image-20201015155526386"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015155706698.png" alt="image-20201015155706698"></p><p>广播域（broadcast domain）：指这样一部分网络，其中任何一台设备发出的广播通信都能被该部分网络中的所有其他设备所接收。</p><h2 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015160146482.png" alt="image-20201015160146482"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015160526999.png" alt="image-20201015160526999"></p><blockquote><p>工作在数据链路层的以太网交换机，其性能远远超过工作在物理层的集线器，而且价格并不贵，这就使得集线器逐渐被市场淘汰</p></blockquote><hr><h2 id="_3-9、以太网交换机自学习和转发帧的流程" tabindex="-1"><a class="header-anchor" href="#_3-9、以太网交换机自学习和转发帧的流程"><span>3.9、以太网交换机自学习和转发帧的流程</span></a></h2><h3 id="概念-2" tabindex="-1"><a class="header-anchor" href="#概念-2"><span>概念</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015161015165.png" alt="image-20201015161015165"></p><h3 id="自学习和转发帧的例子" tabindex="-1"><a class="header-anchor" href="#自学习和转发帧的例子"><span>自学习和转发帧的例子</span></a></h3><p>以下例子假设各主机知道网络中其他各主机的MAC地址（无需进行ARP）</p><p><strong>A -&gt; B</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015161458528.png" alt="image-20201015161458528"></p><blockquote><ol><li>A 先向 B 发送一帧。该帧从接口 1 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中左边）交换表中</li><li>交换机向除接口 1 以外的所有的接口广播这个帧</li><li>接口 4到接口 2，先查找（图中右边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中右边）交换表中</li><li>除B主机之外与该帧的目的地址不相符，将丢弃该帧</li><li>主机B发现是给自己的帧，接受该帧</li></ol></blockquote><p><strong>B -&gt; A</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015162310922.png" alt="image-20201015162310922"></p><blockquote><ol><li>B 向 A 发送一帧。该帧从接口 3 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>主机 A 发现目的地址是它，就接受该帧</li><li>交换机把这个帧的源地址 B 和接口 3 写入（图中左边）交换表中</li></ol></blockquote><p><strong>E -&gt; A</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015162622462.png" alt="image-20201015162622462"></p><blockquote><ol><li>E 向 A发送一帧</li><li>交换机收到帧后，先查找（图中右边）交换表。发现（图中右边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口2转发出去。于是就把这个帧传送到接口 2 转发给 接口 4。</li><li>交换机把这个帧的源地址 E 和接口 3 写入（图中右边）交换表中</li><li>接口 4 到 左边的交换机，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>交换机把这个帧的源地址 E 和接口 4 写入（图中左边）交换表中</li><li>主机 A 发现目的地址是它，就接受该帧</li></ol></blockquote><p><strong>G -&gt; A</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015163157140.png" alt="image-20201015163157140"></p><blockquote><p>主机 A、主机 G、交换机 1的接口 1就共享同一条总线（相当于总线式网络，可以想象成用集线器连接了）</p><ol><li>主机 G 发送给 主机 A 一个帧</li><li>主机 A 和 交换机接口 1都能接收到</li><li>主机 A 的网卡收到后，根据帧的目的MAC地址A，就知道是发送给自己的帧，就接受该帧</li><li>交换机 1收到该帧后，首先进行登记工作</li><li>然后交换机 1对该帧进行转发，该帧的MAC地址是A，在（图中左边）交换表查找MAC 地址有 A</li><li>MAC 地址为 A的接口号是1，但是该帧正是从接口 1 进入交换机的，交换机不会再从该接口 1 将帧转发出去，因为这是没有必要，于是丢弃该帧</li></ol></blockquote><p>随着网络中各主机都发送了帧后，网络中的各交换机就可以学习到各主机的MAC地址，以及它们与自己各接口的对应关系</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015164210543.png" alt="image-20201015164210543"></p><blockquote><p>考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目都设有一定的<strong>有效时间</strong>。<strong>过期的项目就自动被删除</strong>。</p><p><strong>以太网交换机的这种自学习方法使得以太网交换机能够即插即用，不必人工进行配置，因此非常方便。</strong></p></blockquote><h2 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3"><span>总结</span></a></h2><p><strong>交换机自学习和转发帧的步骤归纳</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015170656500.png" alt="image-20201015170656500"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015170739679.png" alt="image-20201015170739679"></p><hr><h2 id="_3-10、以太网交换机的生成树协议stp" tabindex="-1"><a class="header-anchor" href="#_3-10、以太网交换机的生成树协议stp"><span>3.10、以太网交换机的生成树协议STP</span></a></h2><h3 id="如何提高以太网的可靠性" tabindex="-1"><a class="header-anchor" href="#如何提高以太网的可靠性"><span>如何提高以太网的可靠性</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015171453001.png" alt="image-20201015171453001"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015171515481.png" alt="image-20201015171515481"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015171900775.png" alt="image-20201015171900775"></p><h3 id="生成树协议stp" tabindex="-1"><a class="header-anchor" href="#生成树协议stp"><span>生成树协议STP</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015172204419.png" alt="image-20201015172204419"></p><blockquote><ul><li>IEEE 802.1D 标准制定了一个<strong>生成树协议 STP</strong> (Spanning Tree Protocol)。</li><li>其<strong>要点</strong>是：<strong>不改变</strong>网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是<strong>无环路的树状结构</strong>，从而消除了兜圈子现象。</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015202257756.png" alt="image-20201015202257756"></p><hr><h2 id="_3-11、虚拟局域网vlan" tabindex="-1"><a class="header-anchor" href="#_3-11、虚拟局域网vlan"><span>3.11、虚拟局域网VLAN</span></a></h2><h3 id="为什么要虚拟局域网vlan" tabindex="-1"><a class="header-anchor" href="#为什么要虚拟局域网vlan"><span>为什么要虚拟局域网VLAN</span></a></h3><p><strong>广播风暴</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015202859124.png" alt="image-20201015202859124"></p><p><strong>分割广播域的方法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015203113654.png" alt="image-20201015203113654"></p><blockquote><p>为了分割广播域，所以虚拟局域网VLAN技术应运而生</p></blockquote><h2 id="概念-3" tabindex="-1"><a class="header-anchor" href="#概念-3"><span>概念</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015203559548.png" alt="image-20201015203559548"></p><blockquote><ul><li>利用以太网交换机可以很方便地实现虚拟局域网 VLAN (Virtual LAN)。</li><li>IEEE 802.1Q 对虚拟局域网 VLAN 的<strong>定义</strong>： <strong>虚拟局域网 VLAN</strong> 是由一些局域网网段构成的<strong>与物理位置无关的逻辑组</strong>，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN。</li><li>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</li><li><strong>虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。</strong></li><li>由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。</li></ul></blockquote><h3 id="虚拟局域网vlan的实现机制" tabindex="-1"><a class="header-anchor" href="#虚拟局域网vlan的实现机制"><span>虚拟局域网VLAN的实现机制</span></a></h3><p>虚拟局域网VLAN技术是在交换机上实现的，需要交换机能够实现以下功能</p><ul><li>能够处理带有VLAN标记的帧——IEEE 802.1 Q帧</li><li>交换机的各端口可以支持不同的端口类型，不同端口类型的端口对帧的处理方式有所不同</li></ul><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015204639599.png" alt="image-20201015204639599"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015204749141.png" alt="image-20201015204749141"></p><p><strong>Access端口</strong></p><p>交换机与用户计算机之间的互连</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015205311757.png" alt="image-20201015205311757"></p><blockquote><p>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</p></blockquote><p><strong>Truck端口</strong></p><p>交换机之间或交换机与路由器之间的互连</p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015205947636.png" alt="image-20201015205947636"></p><p><strong>小例题</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015210417695.png" alt="image-20201015210417695"></p><p><strong>华为交换机私有的Hybrid端口类型</strong></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015211031361.png" alt="image-20201015211031361"></p><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015211349531.png" alt="image-20201015211349531"></p><h2 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4"><span>总结</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/YIXUAN-oss/YIXUAN-blog-image-hosting@main/images/typora/image-20201015211512622.png" alt="image-20201015211512622"></p><blockquote><p><strong>虚拟局域网优点</strong></p><p>虚拟局域网（VLAN）技术具有以下主要优点：</p><ol><li>改善了性能</li><li>简化了管理</li><li>降低了成本</li><li>改善了安全性</li></ol></blockquote>',306))])}const A=e(r,[["render",h]]),b=JSON.parse('{"path":"/tutorials/network/jisuanjiwangluodi3zhang（shujulianluceng）.html","title":"计算机网络第3章（数据链路层）","lang":"zh-CN","frontmatter":{"title":"计算机网络第3章（数据链路层）","date":"2025-10-17T00:00:00.000Z","sidebar":"auto","categories":["计算机网络"],"tags":["数据链路层","MAC地址","教程"]},"headers":[{"level":2,"title":"3.1、数据链路层概述","slug":"_3-1、数据链路层概述","link":"#_3-1、数据链路层概述","children":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"三个重要问题","slug":"三个重要问题","link":"#三个重要问题","children":[]}]},{"level":2,"title":"3.2、封装成帧","slug":"_3-2、封装成帧","link":"#_3-2、封装成帧","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"透明传输","slug":"透明传输","link":"#透明传输","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"3.3、差错检测","slug":"_3-3、差错检测","link":"#_3-3、差错检测","children":[{"level":3,"title":"介绍","slug":"介绍-1","link":"#介绍-1","children":[]},{"level":3,"title":"奇偶校验","slug":"奇偶校验","link":"#奇偶校验","children":[]},{"level":3,"title":"循环冗余校验CRC(Cyclic Redundancy Check)","slug":"循环冗余校验crc-cyclic-redundancy-check","link":"#循环冗余校验crc-cyclic-redundancy-check","children":[]}]},{"level":2,"title":"3.4、可靠传输","slug":"_3-4、可靠传输","link":"#_3-4、可靠传输","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"三种可靠协议","slug":"三种可靠协议","link":"#三种可靠协议","children":[]},{"level":3,"title":"停止-等待协议","slug":"停止-等待协议","link":"#停止-等待协议","children":[]},{"level":3,"title":"停止-等待协议的信道利用率","slug":"停止-等待协议的信道利用率","link":"#停止-等待协议的信道利用率","children":[]},{"level":3,"title":"回退N帧协议GBN","slug":"回退n帧协议gbn","link":"#回退n帧协议gbn","children":[]},{"level":3,"title":"为什么用回退N帧协议","slug":"为什么用回退n帧协议","link":"#为什么用回退n帧协议","children":[]},{"level":3,"title":"无差错情况流程","slug":"无差错情况流程","link":"#无差错情况流程","children":[]},{"level":3,"title":"累计确认","slug":"累计确认","link":"#累计确认","children":[]},{"level":3,"title":"有差错情况","slug":"有差错情况","link":"#有差错情况","children":[]},{"level":3,"title":"选择重传协议SR","slug":"选择重传协议sr","link":"#选择重传协议sr","children":[]}]},{"level":2,"title":"3.5、点对点协议PPP","slug":"_3-5、点对点协议ppp","link":"#_3-5、点对点协议ppp","children":[{"level":3,"title":"帧格式","slug":"帧格式","link":"#帧格式","children":[]},{"level":3,"title":"透明传输","slug":"透明传输-1","link":"#透明传输-1","children":[]},{"level":3,"title":"差错检测","slug":"差错检测","link":"#差错检测","children":[]},{"level":3,"title":"工作状态","slug":"工作状态","link":"#工作状态","children":[]}]},{"level":2,"title":"3.6、媒体接入控制（介质访问控制）——广播信道","slug":"_3-6、媒体接入控制-介质访问控制-——广播信道","link":"#_3-6、媒体接入控制-介质访问控制-——广播信道","children":[{"level":3,"title":"基本概念","slug":"基本概念-1","link":"#基本概念-1","children":[]},{"level":3,"title":"静态划分信道","slug":"静态划分信道","link":"#静态划分信道","children":[]},{"level":3,"title":"动态接入控制","slug":"动态接入控制","link":"#动态接入控制","children":[]},{"level":3,"title":"随机接入（CSMA/CD协议）","slug":"随机接入-csma-cd协议","link":"#随机接入-csma-cd协议","children":[]},{"level":3,"title":"基本概念","slug":"基本概念-2","link":"#基本概念-2","children":[]},{"level":3,"title":"多址接入MA","slug":"多址接入ma","link":"#多址接入ma","children":[]},{"level":3,"title":"载波监听CS","slug":"载波监听cs","link":"#载波监听cs","children":[]},{"level":3,"title":"碰撞检测CD","slug":"碰撞检测cd","link":"#碰撞检测cd","children":[]},{"level":3,"title":"CSMA/CD 协议工作流程","slug":"csma-cd-协议工作流程","link":"#csma-cd-协议工作流程","children":[]},{"level":3,"title":"CSMA/CD 协议工作——争用期（碰撞窗口）","slug":"csma-cd-协议工作——争用期-碰撞窗口","link":"#csma-cd-协议工作——争用期-碰撞窗口","children":[]},{"level":3,"title":"CSMA/CD 协议工作——最小帧长","slug":"csma-cd-协议工作——最小帧长","link":"#csma-cd-协议工作——最小帧长","children":[]},{"level":3,"title":"CSMA/CD 协议工作——最大帧长","slug":"csma-cd-协议工作——最大帧长","link":"#csma-cd-协议工作——最大帧长","children":[]},{"level":3,"title":"CSMA/CD 协议工作——截断二进制指数退避算法","slug":"csma-cd-协议工作——截断二进制指数退避算法","link":"#csma-cd-协议工作——截断二进制指数退避算法","children":[]},{"level":3,"title":"CSMA/CD 协议工作——信道利用率","slug":"csma-cd-协议工作——信道利用率","link":"#csma-cd-协议工作——信道利用率","children":[]},{"level":3,"title":"CSMA/CD 协议工作——帧接收流程","slug":"csma-cd-协议工作——帧接收流程","link":"#csma-cd-协议工作——帧接收流程","children":[]},{"level":3,"title":"CSMA/CD 协议的重要特性","slug":"csma-cd-协议的重要特性","link":"#csma-cd-协议的重要特性","children":[]},{"level":3,"title":"随机接入（CSMA/CA协议）","slug":"随机接入-csma-ca协议","link":"#随机接入-csma-ca协议","children":[]},{"level":3,"title":"为什么无线局域网要使用CSMA/CA协议","slug":"为什么无线局域网要使用csma-ca协议","link":"#为什么无线局域网要使用csma-ca协议","children":[]},{"level":3,"title":"帧间间隔IFS（InterFrame Space）","slug":"帧间间隔ifs-interframe-space","link":"#帧间间隔ifs-interframe-space","children":[]},{"level":3,"title":"CSMA/CA协议的工作原理","slug":"csma-ca协议的工作原理","link":"#csma-ca协议的工作原理","children":[]},{"level":3,"title":"CSMA/CA协议的退避算法","slug":"csma-ca协议的退避算法","link":"#csma-ca协议的退避算法","children":[]},{"level":3,"title":"CSMA/CA协议的信道预约和虚拟载波监听","slug":"csma-ca协议的信道预约和虚拟载波监听","link":"#csma-ca协议的信道预约和虚拟载波监听","children":[]}]},{"level":2,"title":"3.7、MAC地址、IP地址以及ARP协议","slug":"_3-7、mac地址、ip地址以及arp协议","link":"#_3-7、mac地址、ip地址以及arp协议","children":[{"level":3,"title":"MAC地址","slug":"mac地址","link":"#mac地址","children":[]},{"level":3,"title":"广播信道的数据链路层必须使用地址（MAC）","slug":"广播信道的数据链路层必须使用地址-mac","link":"#广播信道的数据链路层必须使用地址-mac","children":[]},{"level":3,"title":"IEEE 802局域网的MAC地址格式","slug":"ieee-802局域网的mac地址格式","link":"#ieee-802局域网的mac地址格式","children":[]},{"level":3,"title":"IEEE 802局域网的MAC地址发送顺序","slug":"ieee-802局域网的mac地址发送顺序","link":"#ieee-802局域网的mac地址发送顺序","children":[]},{"level":3,"title":"单播MAC地址举例","slug":"单播mac地址举例","link":"#单播mac地址举例","children":[]},{"level":3,"title":"广播MAC地址举例","slug":"广播mac地址举例","link":"#广播mac地址举例","children":[]},{"level":3,"title":"多播MAC地址举例","slug":"多播mac地址举例","link":"#多播mac地址举例","children":[]},{"level":3,"title":"IP地址","slug":"ip地址","link":"#ip地址","children":[]},{"level":3,"title":"基本概念","slug":"基本概念-3","link":"#基本概念-3","children":[]},{"level":3,"title":"从网络体系结构看IP地址与MAC地址","slug":"从网络体系结构看ip地址与mac地址","link":"#从网络体系结构看ip地址与mac地址","children":[]},{"level":3,"title":"数据包转发过程中IP地址与MAC地址的变化情况","slug":"数据包转发过程中ip地址与mac地址的变化情况","link":"#数据包转发过程中ip地址与mac地址的变化情况","children":[]},{"level":3,"title":"ARP协议","slug":"arp协议","link":"#arp协议","children":[]},{"level":3,"title":"流程","slug":"流程","link":"#流程","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"3.8、集线器与交换机的区别","slug":"_3-8、集线器与交换机的区别","link":"#_3-8、集线器与交换机的区别","children":[{"level":3,"title":"集线器-在物理层扩展以太网","slug":"集线器-在物理层扩展以太网","link":"#集线器-在物理层扩展以太网","children":[]},{"level":3,"title":"集线器HUB在物理层扩展以太网","slug":"集线器hub在物理层扩展以太网","link":"#集线器hub在物理层扩展以太网","children":[]},{"level":3,"title":"以太网交换机-在数据链路层扩展以太网","slug":"以太网交换机-在数据链路层扩展以太网","link":"#以太网交换机-在数据链路层扩展以太网","children":[]},{"level":3,"title":"集线器HUB与交换机SWITCH区别","slug":"集线器hub与交换机switch区别","link":"#集线器hub与交换机switch区别","children":[]}]},{"level":2,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]},{"level":2,"title":"3.9、以太网交换机自学习和转发帧的流程","slug":"_3-9、以太网交换机自学习和转发帧的流程","link":"#_3-9、以太网交换机自学习和转发帧的流程","children":[{"level":3,"title":"概念","slug":"概念-2","link":"#概念-2","children":[]},{"level":3,"title":"自学习和转发帧的例子","slug":"自学习和转发帧的例子","link":"#自学习和转发帧的例子","children":[]}]},{"level":2,"title":"总结","slug":"总结-3","link":"#总结-3","children":[]},{"level":2,"title":"3.10、以太网交换机的生成树协议STP","slug":"_3-10、以太网交换机的生成树协议stp","link":"#_3-10、以太网交换机的生成树协议stp","children":[{"level":3,"title":"如何提高以太网的可靠性","slug":"如何提高以太网的可靠性","link":"#如何提高以太网的可靠性","children":[]},{"level":3,"title":"生成树协议STP","slug":"生成树协议stp","link":"#生成树协议stp","children":[]}]},{"level":2,"title":"3.11、虚拟局域网VLAN","slug":"_3-11、虚拟局域网vlan","link":"#_3-11、虚拟局域网vlan","children":[{"level":3,"title":"为什么要虚拟局域网VLAN","slug":"为什么要虚拟局域网vlan","link":"#为什么要虚拟局域网vlan","children":[]}]},{"level":2,"title":"概念","slug":"概念-3","link":"#概念-3","children":[{"level":3,"title":"虚拟局域网VLAN的实现机制","slug":"虚拟局域网vlan的实现机制","link":"#虚拟局域网vlan的实现机制","children":[]}]},{"level":2,"title":"总结","slug":"总结-4","link":"#总结-4","children":[]}],"git":{"createdTime":1760692020000,"updatedTime":1760695453000,"contributors":[{"name":"YIXUAN","email":"byyi.xuan@outlook.com","commits":3}]},"filePathRelative":"tutorials/network/计算机网络第3章（数据链路层）.md"}');export{A as comp,b as data};
